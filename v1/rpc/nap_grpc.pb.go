// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	common "github.com/sky-cloud-tec/proto/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NapDeviceServiceClient is the client API for NapDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapDeviceServiceClient interface {
	PullDeviceConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	CheckDeviceState(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetTemplateDevice(ctx context.Context, in *ByDeviceIdAndDeviceTypeAndKeyRequest, opts ...grpc.CallOption) (*GetTemplateDeviceResponse, error)
	PullRouteConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	PullHitCountConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	PullUserIDConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	SendDeviceState(ctx context.Context, in *SendDeviceStateRequest, opts ...grpc.CallOption) (*SendDeviceStateResponse, error)
}

type napDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapDeviceServiceClient(cc grpc.ClientConnInterface) NapDeviceServiceClient {
	return &napDeviceServiceClient{cc}
}

func (c *napDeviceServiceClient) PullDeviceConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) CheckDeviceState(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/CheckDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) GetTemplateDevice(ctx context.Context, in *ByDeviceIdAndDeviceTypeAndKeyRequest, opts ...grpc.CallOption) (*GetTemplateDeviceResponse, error) {
	out := new(GetTemplateDeviceResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/GetTemplateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullRouteConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullRouteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullHitCountConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullHitCountConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullUserIDConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullUserIDConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) SendDeviceState(ctx context.Context, in *SendDeviceStateRequest, opts ...grpc.CallOption) (*SendDeviceStateResponse, error) {
	out := new(SendDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/SendDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapDeviceServiceServer is the server API for NapDeviceService service.
// All implementations must embed UnimplementedNapDeviceServiceServer
// for forward compatibility
type NapDeviceServiceServer interface {
	PullDeviceConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	CheckDeviceState(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
	GetTemplateDevice(context.Context, *ByDeviceIdAndDeviceTypeAndKeyRequest) (*GetTemplateDeviceResponse, error)
	PullRouteConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	PullHitCountConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	PullUserIDConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	SendDeviceState(context.Context, *SendDeviceStateRequest) (*SendDeviceStateResponse, error)
	mustEmbedUnimplementedNapDeviceServiceServer()
}

// UnimplementedNapDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapDeviceServiceServer struct {
}

func (UnimplementedNapDeviceServiceServer) PullDeviceConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDeviceConfig not implemented")
}
func (UnimplementedNapDeviceServiceServer) CheckDeviceState(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceState not implemented")
}
func (UnimplementedNapDeviceServiceServer) GetTemplateDevice(context.Context, *ByDeviceIdAndDeviceTypeAndKeyRequest) (*GetTemplateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateDevice not implemented")
}
func (UnimplementedNapDeviceServiceServer) PullRouteConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullRouteConfig not implemented")
}
func (UnimplementedNapDeviceServiceServer) PullHitCountConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullHitCountConfig not implemented")
}
func (UnimplementedNapDeviceServiceServer) PullUserIDConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserIDConfig not implemented")
}
func (UnimplementedNapDeviceServiceServer) SendDeviceState(context.Context, *SendDeviceStateRequest) (*SendDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceState not implemented")
}
func (UnimplementedNapDeviceServiceServer) mustEmbedUnimplementedNapDeviceServiceServer() {}

// UnsafeNapDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapDeviceServiceServer will
// result in compilation errors.
type UnsafeNapDeviceServiceServer interface {
	mustEmbedUnimplementedNapDeviceServiceServer()
}

func RegisterNapDeviceServiceServer(s grpc.ServiceRegistrar, srv NapDeviceServiceServer) {
	s.RegisterService(&NapDeviceService_ServiceDesc, srv)
}

func _NapDeviceService_PullDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullDeviceConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_CheckDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).CheckDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/CheckDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).CheckDeviceState(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_GetTemplateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceIdAndDeviceTypeAndKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).GetTemplateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/GetTemplateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).GetTemplateDevice(ctx, req.(*ByDeviceIdAndDeviceTypeAndKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullRouteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullRouteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullRouteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullRouteConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullHitCountConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullHitCountConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullHitCountConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullHitCountConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullUserIDConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullUserIDConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullUserIDConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullUserIDConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_SendDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).SendDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/SendDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).SendDeviceState(ctx, req.(*SendDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapDeviceService_ServiceDesc is the grpc.ServiceDesc for NapDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapDeviceService",
	HandlerType: (*NapDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullDeviceConfig",
			Handler:    _NapDeviceService_PullDeviceConfig_Handler,
		},
		{
			MethodName: "CheckDeviceState",
			Handler:    _NapDeviceService_CheckDeviceState_Handler,
		},
		{
			MethodName: "GetTemplateDevice",
			Handler:    _NapDeviceService_GetTemplateDevice_Handler,
		},
		{
			MethodName: "PullRouteConfig",
			Handler:    _NapDeviceService_PullRouteConfig_Handler,
		},
		{
			MethodName: "PullHitCountConfig",
			Handler:    _NapDeviceService_PullHitCountConfig_Handler,
		},
		{
			MethodName: "PullUserIDConfig",
			Handler:    _NapDeviceService_PullUserIDConfig_Handler,
		},
		{
			MethodName: "SendDeviceState",
			Handler:    _NapDeviceService_SendDeviceState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapRawConfigServiceClient is the client API for NapRawConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapRawConfigServiceClient interface {
	ImportRawConfig(ctx context.Context, in *WithRawConfigRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DeleteRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	ListRawConfig(ctx context.Context, in *ByDeviceAndPageRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error)
	GetRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GetRawConfigResponse, error)
	CleanRawConfig(ctx context.Context, in *CleanRawConfigRequest, opts ...grpc.CallOption) (*CleanRawConfigResponse, error)
}

type napRawConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapRawConfigServiceClient(cc grpc.ClientConnInterface) NapRawConfigServiceClient {
	return &napRawConfigServiceClient{cc}
}

func (c *napRawConfigServiceClient) ImportRawConfig(ctx context.Context, in *WithRawConfigRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/ImportRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) DeleteRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/DeleteRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) ListRawConfig(ctx context.Context, in *ByDeviceAndPageRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error) {
	out := new(ListRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/ListRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) GetRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GetRawConfigResponse, error) {
	out := new(GetRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/GetRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) CleanRawConfig(ctx context.Context, in *CleanRawConfigRequest, opts ...grpc.CallOption) (*CleanRawConfigResponse, error) {
	out := new(CleanRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/CleanRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapRawConfigServiceServer is the server API for NapRawConfigService service.
// All implementations must embed UnimplementedNapRawConfigServiceServer
// for forward compatibility
type NapRawConfigServiceServer interface {
	ImportRawConfig(context.Context, *WithRawConfigRequest) (*common.SimpleJsonResponse, error)
	DeleteRawConfig(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
	ListRawConfig(context.Context, *ByDeviceAndPageRequest) (*ListRawConfigResponse, error)
	GetRawConfig(context.Context, *ByIdRequest) (*GetRawConfigResponse, error)
	CleanRawConfig(context.Context, *CleanRawConfigRequest) (*CleanRawConfigResponse, error)
	mustEmbedUnimplementedNapRawConfigServiceServer()
}

// UnimplementedNapRawConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapRawConfigServiceServer struct {
}

func (UnimplementedNapRawConfigServiceServer) ImportRawConfig(context.Context, *WithRawConfigRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRawConfig not implemented")
}
func (UnimplementedNapRawConfigServiceServer) DeleteRawConfig(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRawConfig not implemented")
}
func (UnimplementedNapRawConfigServiceServer) ListRawConfig(context.Context, *ByDeviceAndPageRequest) (*ListRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRawConfig not implemented")
}
func (UnimplementedNapRawConfigServiceServer) GetRawConfig(context.Context, *ByIdRequest) (*GetRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawConfig not implemented")
}
func (UnimplementedNapRawConfigServiceServer) CleanRawConfig(context.Context, *CleanRawConfigRequest) (*CleanRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanRawConfig not implemented")
}
func (UnimplementedNapRawConfigServiceServer) mustEmbedUnimplementedNapRawConfigServiceServer() {}

// UnsafeNapRawConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapRawConfigServiceServer will
// result in compilation errors.
type UnsafeNapRawConfigServiceServer interface {
	mustEmbedUnimplementedNapRawConfigServiceServer()
}

func RegisterNapRawConfigServiceServer(s grpc.ServiceRegistrar, srv NapRawConfigServiceServer) {
	s.RegisterService(&NapRawConfigService_ServiceDesc, srv)
}

func _NapRawConfigService_ImportRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).ImportRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/ImportRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).ImportRawConfig(ctx, req.(*WithRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_DeleteRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).DeleteRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/DeleteRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).DeleteRawConfig(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_ListRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).ListRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/ListRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).ListRawConfig(ctx, req.(*ByDeviceAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_GetRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).GetRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/GetRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).GetRawConfig(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_CleanRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).CleanRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/CleanRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).CleanRawConfig(ctx, req.(*CleanRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapRawConfigService_ServiceDesc is the grpc.ServiceDesc for NapRawConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapRawConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapRawConfigService",
	HandlerType: (*NapRawConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportRawConfig",
			Handler:    _NapRawConfigService_ImportRawConfig_Handler,
		},
		{
			MethodName: "DeleteRawConfig",
			Handler:    _NapRawConfigService_DeleteRawConfig_Handler,
		},
		{
			MethodName: "ListRawConfig",
			Handler:    _NapRawConfigService_ListRawConfig_Handler,
		},
		{
			MethodName: "GetRawConfig",
			Handler:    _NapRawConfigService_GetRawConfig_Handler,
		},
		{
			MethodName: "CleanRawConfig",
			Handler:    _NapRawConfigService_CleanRawConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapAddressServiceClient is the client API for NapAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapAddressServiceClient interface {
	ImportAddresses(ctx context.Context, in *WithAddressAndDeviceRequest, opts ...grpc.CallOption) (*ImportAddressesResponse, error)
	RebuildAddressIndex(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type napAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapAddressServiceClient(cc grpc.ClientConnInterface) NapAddressServiceClient {
	return &napAddressServiceClient{cc}
}

func (c *napAddressServiceClient) ImportAddresses(ctx context.Context, in *WithAddressAndDeviceRequest, opts ...grpc.CallOption) (*ImportAddressesResponse, error) {
	out := new(ImportAddressesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapAddressService/ImportAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napAddressServiceClient) RebuildAddressIndex(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapAddressService/rebuildAddressIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapAddressServiceServer is the server API for NapAddressService service.
// All implementations must embed UnimplementedNapAddressServiceServer
// for forward compatibility
type NapAddressServiceServer interface {
	ImportAddresses(context.Context, *WithAddressAndDeviceRequest) (*ImportAddressesResponse, error)
	RebuildAddressIndex(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
	mustEmbedUnimplementedNapAddressServiceServer()
}

// UnimplementedNapAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapAddressServiceServer struct {
}

func (UnimplementedNapAddressServiceServer) ImportAddresses(context.Context, *WithAddressAndDeviceRequest) (*ImportAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAddresses not implemented")
}
func (UnimplementedNapAddressServiceServer) RebuildAddressIndex(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildAddressIndex not implemented")
}
func (UnimplementedNapAddressServiceServer) mustEmbedUnimplementedNapAddressServiceServer() {}

// UnsafeNapAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapAddressServiceServer will
// result in compilation errors.
type UnsafeNapAddressServiceServer interface {
	mustEmbedUnimplementedNapAddressServiceServer()
}

func RegisterNapAddressServiceServer(s grpc.ServiceRegistrar, srv NapAddressServiceServer) {
	s.RegisterService(&NapAddressService_ServiceDesc, srv)
}

func _NapAddressService_ImportAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAddressAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapAddressServiceServer).ImportAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapAddressService/ImportAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapAddressServiceServer).ImportAddresses(ctx, req.(*WithAddressAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapAddressService_RebuildAddressIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapAddressServiceServer).RebuildAddressIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapAddressService/rebuildAddressIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapAddressServiceServer).RebuildAddressIndex(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapAddressService_ServiceDesc is the grpc.ServiceDesc for NapAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapAddressService",
	HandlerType: (*NapAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAddresses",
			Handler:    _NapAddressService_ImportAddresses_Handler,
		},
		{
			MethodName: "rebuildAddressIndex",
			Handler:    _NapAddressService_RebuildAddressIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapInterfaceServiceClient is the client API for NapInterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapInterfaceServiceClient interface {
	ImportInterfaces(ctx context.Context, in *WithInterfacesAndDeviceRequest, opts ...grpc.CallOption) (*ImportInterfacesResponse, error)
}

type napInterfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapInterfaceServiceClient(cc grpc.ClientConnInterface) NapInterfaceServiceClient {
	return &napInterfaceServiceClient{cc}
}

func (c *napInterfaceServiceClient) ImportInterfaces(ctx context.Context, in *WithInterfacesAndDeviceRequest, opts ...grpc.CallOption) (*ImportInterfacesResponse, error) {
	out := new(ImportInterfacesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapInterfaceService/ImportInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapInterfaceServiceServer is the server API for NapInterfaceService service.
// All implementations must embed UnimplementedNapInterfaceServiceServer
// for forward compatibility
type NapInterfaceServiceServer interface {
	ImportInterfaces(context.Context, *WithInterfacesAndDeviceRequest) (*ImportInterfacesResponse, error)
	mustEmbedUnimplementedNapInterfaceServiceServer()
}

// UnimplementedNapInterfaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapInterfaceServiceServer struct {
}

func (UnimplementedNapInterfaceServiceServer) ImportInterfaces(context.Context, *WithInterfacesAndDeviceRequest) (*ImportInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportInterfaces not implemented")
}
func (UnimplementedNapInterfaceServiceServer) mustEmbedUnimplementedNapInterfaceServiceServer() {}

// UnsafeNapInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapInterfaceServiceServer will
// result in compilation errors.
type UnsafeNapInterfaceServiceServer interface {
	mustEmbedUnimplementedNapInterfaceServiceServer()
}

func RegisterNapInterfaceServiceServer(s grpc.ServiceRegistrar, srv NapInterfaceServiceServer) {
	s.RegisterService(&NapInterfaceService_ServiceDesc, srv)
}

func _NapInterfaceService_ImportInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithInterfacesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapInterfaceServiceServer).ImportInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapInterfaceService/ImportInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapInterfaceServiceServer).ImportInterfaces(ctx, req.(*WithInterfacesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapInterfaceService_ServiceDesc is the grpc.ServiceDesc for NapInterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapInterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapInterfaceService",
	HandlerType: (*NapInterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportInterfaces",
			Handler:    _NapInterfaceService_ImportInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapZoneServiceClient is the client API for NapZoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapZoneServiceClient interface {
	ImportZones(ctx context.Context, in *WithZonesAndDeviceRequest, opts ...grpc.CallOption) (*ImportZonesResponse, error)
}

type napZoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapZoneServiceClient(cc grpc.ClientConnInterface) NapZoneServiceClient {
	return &napZoneServiceClient{cc}
}

func (c *napZoneServiceClient) ImportZones(ctx context.Context, in *WithZonesAndDeviceRequest, opts ...grpc.CallOption) (*ImportZonesResponse, error) {
	out := new(ImportZonesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapZoneService/ImportZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapZoneServiceServer is the server API for NapZoneService service.
// All implementations must embed UnimplementedNapZoneServiceServer
// for forward compatibility
type NapZoneServiceServer interface {
	ImportZones(context.Context, *WithZonesAndDeviceRequest) (*ImportZonesResponse, error)
	mustEmbedUnimplementedNapZoneServiceServer()
}

// UnimplementedNapZoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapZoneServiceServer struct {
}

func (UnimplementedNapZoneServiceServer) ImportZones(context.Context, *WithZonesAndDeviceRequest) (*ImportZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportZones not implemented")
}
func (UnimplementedNapZoneServiceServer) mustEmbedUnimplementedNapZoneServiceServer() {}

// UnsafeNapZoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapZoneServiceServer will
// result in compilation errors.
type UnsafeNapZoneServiceServer interface {
	mustEmbedUnimplementedNapZoneServiceServer()
}

func RegisterNapZoneServiceServer(s grpc.ServiceRegistrar, srv NapZoneServiceServer) {
	s.RegisterService(&NapZoneService_ServiceDesc, srv)
}

func _NapZoneService_ImportZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithZonesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapZoneServiceServer).ImportZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapZoneService/ImportZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapZoneServiceServer).ImportZones(ctx, req.(*WithZonesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapZoneService_ServiceDesc is the grpc.ServiceDesc for NapZoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapZoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapZoneService",
	HandlerType: (*NapZoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportZones",
			Handler:    _NapZoneService_ImportZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapNatObjectServiceClient is the client API for NapNatObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapNatObjectServiceClient interface {
	ImportNatObjects(ctx context.Context, in *WithNatObjectsAndDeviceRequest, opts ...grpc.CallOption) (*ImportNatObjectsResponse, error)
}

type napNatObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapNatObjectServiceClient(cc grpc.ClientConnInterface) NapNatObjectServiceClient {
	return &napNatObjectServiceClient{cc}
}

func (c *napNatObjectServiceClient) ImportNatObjects(ctx context.Context, in *WithNatObjectsAndDeviceRequest, opts ...grpc.CallOption) (*ImportNatObjectsResponse, error) {
	out := new(ImportNatObjectsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapNatObjectService/ImportNatObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapNatObjectServiceServer is the server API for NapNatObjectService service.
// All implementations must embed UnimplementedNapNatObjectServiceServer
// for forward compatibility
type NapNatObjectServiceServer interface {
	ImportNatObjects(context.Context, *WithNatObjectsAndDeviceRequest) (*ImportNatObjectsResponse, error)
	mustEmbedUnimplementedNapNatObjectServiceServer()
}

// UnimplementedNapNatObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapNatObjectServiceServer struct {
}

func (UnimplementedNapNatObjectServiceServer) ImportNatObjects(context.Context, *WithNatObjectsAndDeviceRequest) (*ImportNatObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportNatObjects not implemented")
}
func (UnimplementedNapNatObjectServiceServer) mustEmbedUnimplementedNapNatObjectServiceServer() {}

// UnsafeNapNatObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapNatObjectServiceServer will
// result in compilation errors.
type UnsafeNapNatObjectServiceServer interface {
	mustEmbedUnimplementedNapNatObjectServiceServer()
}

func RegisterNapNatObjectServiceServer(s grpc.ServiceRegistrar, srv NapNatObjectServiceServer) {
	s.RegisterService(&NapNatObjectService_ServiceDesc, srv)
}

func _NapNatObjectService_ImportNatObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNatObjectsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapNatObjectServiceServer).ImportNatObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapNatObjectService/ImportNatObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapNatObjectServiceServer).ImportNatObjects(ctx, req.(*WithNatObjectsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapNatObjectService_ServiceDesc is the grpc.ServiceDesc for NapNatObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapNatObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapNatObjectService",
	HandlerType: (*NapNatObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportNatObjects",
			Handler:    _NapNatObjectService_ImportNatObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapScheduleServiceClient is the client API for NapScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapScheduleServiceClient interface {
	ImportSchedules(ctx context.Context, in *WithSchedulesAndDeviceRequest, opts ...grpc.CallOption) (*ImportSchedulesResponse, error)
}

type napScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapScheduleServiceClient(cc grpc.ClientConnInterface) NapScheduleServiceClient {
	return &napScheduleServiceClient{cc}
}

func (c *napScheduleServiceClient) ImportSchedules(ctx context.Context, in *WithSchedulesAndDeviceRequest, opts ...grpc.CallOption) (*ImportSchedulesResponse, error) {
	out := new(ImportSchedulesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapScheduleService/ImportSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapScheduleServiceServer is the server API for NapScheduleService service.
// All implementations must embed UnimplementedNapScheduleServiceServer
// for forward compatibility
type NapScheduleServiceServer interface {
	ImportSchedules(context.Context, *WithSchedulesAndDeviceRequest) (*ImportSchedulesResponse, error)
	mustEmbedUnimplementedNapScheduleServiceServer()
}

// UnimplementedNapScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapScheduleServiceServer struct {
}

func (UnimplementedNapScheduleServiceServer) ImportSchedules(context.Context, *WithSchedulesAndDeviceRequest) (*ImportSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSchedules not implemented")
}
func (UnimplementedNapScheduleServiceServer) mustEmbedUnimplementedNapScheduleServiceServer() {}

// UnsafeNapScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapScheduleServiceServer will
// result in compilation errors.
type UnsafeNapScheduleServiceServer interface {
	mustEmbedUnimplementedNapScheduleServiceServer()
}

func RegisterNapScheduleServiceServer(s grpc.ServiceRegistrar, srv NapScheduleServiceServer) {
	s.RegisterService(&NapScheduleService_ServiceDesc, srv)
}

func _NapScheduleService_ImportSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSchedulesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapScheduleServiceServer).ImportSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapScheduleService/ImportSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapScheduleServiceServer).ImportSchedules(ctx, req.(*WithSchedulesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapScheduleService_ServiceDesc is the grpc.ServiceDesc for NapScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapScheduleService",
	HandlerType: (*NapScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportSchedules",
			Handler:    _NapScheduleService_ImportSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapSvcServiceClient is the client API for NapSvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapSvcServiceClient interface {
	ImportServices(ctx context.Context, in *WithServicesAndDeviceRequest, opts ...grpc.CallOption) (*ImportServicesResponse, error)
}

type napSvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapSvcServiceClient(cc grpc.ClientConnInterface) NapSvcServiceClient {
	return &napSvcServiceClient{cc}
}

func (c *napSvcServiceClient) ImportServices(ctx context.Context, in *WithServicesAndDeviceRequest, opts ...grpc.CallOption) (*ImportServicesResponse, error) {
	out := new(ImportServicesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapSvcService/ImportServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapSvcServiceServer is the server API for NapSvcService service.
// All implementations must embed UnimplementedNapSvcServiceServer
// for forward compatibility
type NapSvcServiceServer interface {
	ImportServices(context.Context, *WithServicesAndDeviceRequest) (*ImportServicesResponse, error)
	mustEmbedUnimplementedNapSvcServiceServer()
}

// UnimplementedNapSvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapSvcServiceServer struct {
}

func (UnimplementedNapSvcServiceServer) ImportServices(context.Context, *WithServicesAndDeviceRequest) (*ImportServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportServices not implemented")
}
func (UnimplementedNapSvcServiceServer) mustEmbedUnimplementedNapSvcServiceServer() {}

// UnsafeNapSvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapSvcServiceServer will
// result in compilation errors.
type UnsafeNapSvcServiceServer interface {
	mustEmbedUnimplementedNapSvcServiceServer()
}

func RegisterNapSvcServiceServer(s grpc.ServiceRegistrar, srv NapSvcServiceServer) {
	s.RegisterService(&NapSvcService_ServiceDesc, srv)
}

func _NapSvcService_ImportServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithServicesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapSvcServiceServer).ImportServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapSvcService/ImportServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapSvcServiceServer).ImportServices(ctx, req.(*WithServicesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapSvcService_ServiceDesc is the grpc.ServiceDesc for NapSvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapSvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapSvcService",
	HandlerType: (*NapSvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportServices",
			Handler:    _NapSvcService_ImportServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapRouteServiceClient is the client API for NapRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapRouteServiceClient interface {
	ImportRoutes(ctx context.Context, in *WithRoutesAndDeviceRequest, opts ...grpc.CallOption) (*ImportRoutesResponse, error)
}

type napRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapRouteServiceClient(cc grpc.ClientConnInterface) NapRouteServiceClient {
	return &napRouteServiceClient{cc}
}

func (c *napRouteServiceClient) ImportRoutes(ctx context.Context, in *WithRoutesAndDeviceRequest, opts ...grpc.CallOption) (*ImportRoutesResponse, error) {
	out := new(ImportRoutesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRouteService/ImportRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapRouteServiceServer is the server API for NapRouteService service.
// All implementations must embed UnimplementedNapRouteServiceServer
// for forward compatibility
type NapRouteServiceServer interface {
	ImportRoutes(context.Context, *WithRoutesAndDeviceRequest) (*ImportRoutesResponse, error)
	mustEmbedUnimplementedNapRouteServiceServer()
}

// UnimplementedNapRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapRouteServiceServer struct {
}

func (UnimplementedNapRouteServiceServer) ImportRoutes(context.Context, *WithRoutesAndDeviceRequest) (*ImportRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRoutes not implemented")
}
func (UnimplementedNapRouteServiceServer) mustEmbedUnimplementedNapRouteServiceServer() {}

// UnsafeNapRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapRouteServiceServer will
// result in compilation errors.
type UnsafeNapRouteServiceServer interface {
	mustEmbedUnimplementedNapRouteServiceServer()
}

func RegisterNapRouteServiceServer(s grpc.ServiceRegistrar, srv NapRouteServiceServer) {
	s.RegisterService(&NapRouteService_ServiceDesc, srv)
}

func _NapRouteService_ImportRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRoutesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRouteServiceServer).ImportRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRouteService/ImportRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRouteServiceServer).ImportRoutes(ctx, req.(*WithRoutesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapRouteService_ServiceDesc is the grpc.ServiceDesc for NapRouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapRouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapRouteService",
	HandlerType: (*NapRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportRoutes",
			Handler:    _NapRouteService_ImportRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapPolicyServiceClient is the client API for NapPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapPolicyServiceClient interface {
	ImportPolicies(ctx context.Context, in *WithPoliciesAndDeviceRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error)
}

type napPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapPolicyServiceClient(cc grpc.ClientConnInterface) NapPolicyServiceClient {
	return &napPolicyServiceClient{cc}
}

func (c *napPolicyServiceClient) ImportPolicies(ctx context.Context, in *WithPoliciesAndDeviceRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error) {
	out := new(ImportPoliciesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapPolicyService/ImportPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapPolicyServiceServer is the server API for NapPolicyService service.
// All implementations must embed UnimplementedNapPolicyServiceServer
// for forward compatibility
type NapPolicyServiceServer interface {
	ImportPolicies(context.Context, *WithPoliciesAndDeviceRequest) (*ImportPoliciesResponse, error)
	mustEmbedUnimplementedNapPolicyServiceServer()
}

// UnimplementedNapPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapPolicyServiceServer struct {
}

func (UnimplementedNapPolicyServiceServer) ImportPolicies(context.Context, *WithPoliciesAndDeviceRequest) (*ImportPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPolicies not implemented")
}
func (UnimplementedNapPolicyServiceServer) mustEmbedUnimplementedNapPolicyServiceServer() {}

// UnsafeNapPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapPolicyServiceServer will
// result in compilation errors.
type UnsafeNapPolicyServiceServer interface {
	mustEmbedUnimplementedNapPolicyServiceServer()
}

func RegisterNapPolicyServiceServer(s grpc.ServiceRegistrar, srv NapPolicyServiceServer) {
	s.RegisterService(&NapPolicyService_ServiceDesc, srv)
}

func _NapPolicyService_ImportPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPoliciesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapPolicyServiceServer).ImportPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapPolicyService/ImportPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapPolicyServiceServer).ImportPolicies(ctx, req.(*WithPoliciesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapPolicyService_ServiceDesc is the grpc.ServiceDesc for NapPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapPolicyService",
	HandlerType: (*NapPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportPolicies",
			Handler:    _NapPolicyService_ImportPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapApplicationServiceClient is the client API for NapApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapApplicationServiceClient interface {
	ImportApplications(ctx context.Context, in *WithApplicationsAndDeviceRequest, opts ...grpc.CallOption) (*ImportApplicationsResponse, error)
}

type napApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapApplicationServiceClient(cc grpc.ClientConnInterface) NapApplicationServiceClient {
	return &napApplicationServiceClient{cc}
}

func (c *napApplicationServiceClient) ImportApplications(ctx context.Context, in *WithApplicationsAndDeviceRequest, opts ...grpc.CallOption) (*ImportApplicationsResponse, error) {
	out := new(ImportApplicationsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapApplicationService/ImportApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapApplicationServiceServer is the server API for NapApplicationService service.
// All implementations must embed UnimplementedNapApplicationServiceServer
// for forward compatibility
type NapApplicationServiceServer interface {
	ImportApplications(context.Context, *WithApplicationsAndDeviceRequest) (*ImportApplicationsResponse, error)
	mustEmbedUnimplementedNapApplicationServiceServer()
}

// UnimplementedNapApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapApplicationServiceServer struct {
}

func (UnimplementedNapApplicationServiceServer) ImportApplications(context.Context, *WithApplicationsAndDeviceRequest) (*ImportApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportApplications not implemented")
}
func (UnimplementedNapApplicationServiceServer) mustEmbedUnimplementedNapApplicationServiceServer() {}

// UnsafeNapApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapApplicationServiceServer will
// result in compilation errors.
type UnsafeNapApplicationServiceServer interface {
	mustEmbedUnimplementedNapApplicationServiceServer()
}

func RegisterNapApplicationServiceServer(s grpc.ServiceRegistrar, srv NapApplicationServiceServer) {
	s.RegisterService(&NapApplicationService_ServiceDesc, srv)
}

func _NapApplicationService_ImportApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithApplicationsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapApplicationServiceServer).ImportApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapApplicationService/ImportApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapApplicationServiceServer).ImportApplications(ctx, req.(*WithApplicationsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapApplicationService_ServiceDesc is the grpc.ServiceDesc for NapApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapApplicationService",
	HandlerType: (*NapApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportApplications",
			Handler:    _NapApplicationService_ImportApplications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapHitCountServiceClient is the client API for NapHitCountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapHitCountServiceClient interface {
	ImportHitCounts(ctx context.Context, in *WithHitCountAndDeviceRequest, opts ...grpc.CallOption) (*ImportHitCountsResponse, error)
}

type napHitCountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapHitCountServiceClient(cc grpc.ClientConnInterface) NapHitCountServiceClient {
	return &napHitCountServiceClient{cc}
}

func (c *napHitCountServiceClient) ImportHitCounts(ctx context.Context, in *WithHitCountAndDeviceRequest, opts ...grpc.CallOption) (*ImportHitCountsResponse, error) {
	out := new(ImportHitCountsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapHitCountService/ImportHitCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapHitCountServiceServer is the server API for NapHitCountService service.
// All implementations must embed UnimplementedNapHitCountServiceServer
// for forward compatibility
type NapHitCountServiceServer interface {
	ImportHitCounts(context.Context, *WithHitCountAndDeviceRequest) (*ImportHitCountsResponse, error)
	mustEmbedUnimplementedNapHitCountServiceServer()
}

// UnimplementedNapHitCountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapHitCountServiceServer struct {
}

func (UnimplementedNapHitCountServiceServer) ImportHitCounts(context.Context, *WithHitCountAndDeviceRequest) (*ImportHitCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportHitCounts not implemented")
}
func (UnimplementedNapHitCountServiceServer) mustEmbedUnimplementedNapHitCountServiceServer() {}

// UnsafeNapHitCountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapHitCountServiceServer will
// result in compilation errors.
type UnsafeNapHitCountServiceServer interface {
	mustEmbedUnimplementedNapHitCountServiceServer()
}

func RegisterNapHitCountServiceServer(s grpc.ServiceRegistrar, srv NapHitCountServiceServer) {
	s.RegisterService(&NapHitCountService_ServiceDesc, srv)
}

func _NapHitCountService_ImportHitCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithHitCountAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapHitCountServiceServer).ImportHitCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapHitCountService/ImportHitCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapHitCountServiceServer).ImportHitCounts(ctx, req.(*WithHitCountAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapHitCountService_ServiceDesc is the grpc.ServiceDesc for NapHitCountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapHitCountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapHitCountService",
	HandlerType: (*NapHitCountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportHitCounts",
			Handler:    _NapHitCountService_ImportHitCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapUserIDServiceClient is the client API for NapUserIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapUserIDServiceClient interface {
	ImportUserIDs(ctx context.Context, in *WithUserIDsAndDeviceRequest, opts ...grpc.CallOption) (*ImportUserIDsResponse, error)
}

type napUserIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapUserIDServiceClient(cc grpc.ClientConnInterface) NapUserIDServiceClient {
	return &napUserIDServiceClient{cc}
}

func (c *napUserIDServiceClient) ImportUserIDs(ctx context.Context, in *WithUserIDsAndDeviceRequest, opts ...grpc.CallOption) (*ImportUserIDsResponse, error) {
	out := new(ImportUserIDsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapUserIDService/ImportUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapUserIDServiceServer is the server API for NapUserIDService service.
// All implementations must embed UnimplementedNapUserIDServiceServer
// for forward compatibility
type NapUserIDServiceServer interface {
	ImportUserIDs(context.Context, *WithUserIDsAndDeviceRequest) (*ImportUserIDsResponse, error)
	mustEmbedUnimplementedNapUserIDServiceServer()
}

// UnimplementedNapUserIDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapUserIDServiceServer struct {
}

func (UnimplementedNapUserIDServiceServer) ImportUserIDs(context.Context, *WithUserIDsAndDeviceRequest) (*ImportUserIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserIDs not implemented")
}
func (UnimplementedNapUserIDServiceServer) mustEmbedUnimplementedNapUserIDServiceServer() {}

// UnsafeNapUserIDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapUserIDServiceServer will
// result in compilation errors.
type UnsafeNapUserIDServiceServer interface {
	mustEmbedUnimplementedNapUserIDServiceServer()
}

func RegisterNapUserIDServiceServer(s grpc.ServiceRegistrar, srv NapUserIDServiceServer) {
	s.RegisterService(&NapUserIDService_ServiceDesc, srv)
}

func _NapUserIDService_ImportUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUserIDsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapUserIDServiceServer).ImportUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapUserIDService/ImportUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapUserIDServiceServer).ImportUserIDs(ctx, req.(*WithUserIDsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapUserIDService_ServiceDesc is the grpc.ServiceDesc for NapUserIDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapUserIDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapUserIDService",
	HandlerType: (*NapUserIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportUserIDs",
			Handler:    _NapUserIDService_ImportUserIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapAccessGroupServiceClient is the client API for NapAccessGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NapAccessGroupServiceClient interface {
	ImportAccessGroups(ctx context.Context, in *WithAccessGroupsAndDeviceRequest, opts ...grpc.CallOption) (*ImportAccessGroupsResponse, error)
}

type napAccessGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapAccessGroupServiceClient(cc grpc.ClientConnInterface) NapAccessGroupServiceClient {
	return &napAccessGroupServiceClient{cc}
}

func (c *napAccessGroupServiceClient) ImportAccessGroups(ctx context.Context, in *WithAccessGroupsAndDeviceRequest, opts ...grpc.CallOption) (*ImportAccessGroupsResponse, error) {
	out := new(ImportAccessGroupsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapAccessGroupService/ImportAccessGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapAccessGroupServiceServer is the server API for NapAccessGroupService service.
// All implementations must embed UnimplementedNapAccessGroupServiceServer
// for forward compatibility
type NapAccessGroupServiceServer interface {
	ImportAccessGroups(context.Context, *WithAccessGroupsAndDeviceRequest) (*ImportAccessGroupsResponse, error)
	mustEmbedUnimplementedNapAccessGroupServiceServer()
}

// UnimplementedNapAccessGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNapAccessGroupServiceServer struct {
}

func (UnimplementedNapAccessGroupServiceServer) ImportAccessGroups(context.Context, *WithAccessGroupsAndDeviceRequest) (*ImportAccessGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAccessGroups not implemented")
}
func (UnimplementedNapAccessGroupServiceServer) mustEmbedUnimplementedNapAccessGroupServiceServer() {}

// UnsafeNapAccessGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NapAccessGroupServiceServer will
// result in compilation errors.
type UnsafeNapAccessGroupServiceServer interface {
	mustEmbedUnimplementedNapAccessGroupServiceServer()
}

func RegisterNapAccessGroupServiceServer(s grpc.ServiceRegistrar, srv NapAccessGroupServiceServer) {
	s.RegisterService(&NapAccessGroupService_ServiceDesc, srv)
}

func _NapAccessGroupService_ImportAccessGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAccessGroupsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapAccessGroupServiceServer).ImportAccessGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapAccessGroupService/ImportAccessGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapAccessGroupServiceServer).ImportAccessGroups(ctx, req.(*WithAccessGroupsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NapAccessGroupService_ServiceDesc is the grpc.ServiceDesc for NapAccessGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NapAccessGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapAccessGroupService",
	HandlerType: (*NapAccessGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAccessGroups",
			Handler:    _NapAccessGroupService_ImportAccessGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}
