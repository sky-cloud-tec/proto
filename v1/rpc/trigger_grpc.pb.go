// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: src/grpc/trigger.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// 根据关键字分页查找触发器
	ListTrigger(ctx context.Context, in *ByKeyAndPageRequest, opts ...grpc.CallOption) (*ListTriggerResponse, error)
	// 更新触发器信息
	UpdateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// 批量更新触发器信息
	UpdateTriggers(ctx context.Context, in *ListTriggerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 创建触发器信息
	CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// 批量创建触发器信息
	CreateTriggers(ctx context.Context, in *ListTriggerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// 删除触发器信息
	DeleteTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*DeleteTriggerResponse, error)
	// 批量删除触发器信息
	DeleteTriggers(ctx context.Context, in *ByTriggerIdsRequest, opts ...grpc.CallOption) (*DeleteTriggerResponse, error)
	// 获取触发器信息
	GetTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// 暂停触发器
	StopTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// 恢复触发器
	ResumeTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// 根据资源查找对应的触发器
	SearchTrigger(ctx context.Context, in *ByResourceRequest, opts ...grpc.CallOption) (*ListTriggerResponse, error)
	//立即执行一次触发器任务
	StartNowTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*StartNowTriggerResponse, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) ListTrigger(ctx context.Context, in *ByKeyAndPageRequest, opts ...grpc.CallOption) (*ListTriggerResponse, error) {
	out := new(ListTriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/ListTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpdateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/UpdateTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpdateTriggers(ctx context.Context, in *ListTriggerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/UpdateTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/CreateTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) CreateTriggers(ctx context.Context, in *ListTriggerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/CreateTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*DeleteTriggerResponse, error) {
	out := new(DeleteTriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/DeleteTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteTriggers(ctx context.Context, in *ByTriggerIdsRequest, opts ...grpc.CallOption) (*DeleteTriggerResponse, error) {
	out := new(DeleteTriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/DeleteTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/GetTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) StopTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/StopTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ResumeTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/ResumeTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) SearchTrigger(ctx context.Context, in *ByResourceRequest, opts ...grpc.CallOption) (*ListTriggerResponse, error) {
	out := new(ListTriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/SearchTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) StartNowTrigger(ctx context.Context, in *ByTriggerIdRequest, opts ...grpc.CallOption) (*StartNowTriggerResponse, error) {
	out := new(StartNowTriggerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TriggerService/StartNowTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations must embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	// 根据关键字分页查找触发器
	ListTrigger(context.Context, *ByKeyAndPageRequest) (*ListTriggerResponse, error)
	// 更新触发器信息
	UpdateTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	// 批量更新触发器信息
	UpdateTriggers(context.Context, *ListTriggerRequest) (*EmptyResponse, error)
	// 创建触发器信息
	CreateTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	// 批量创建触发器信息
	CreateTriggers(context.Context, *ListTriggerRequest) (*EmptyResponse, error)
	// 删除触发器信息
	DeleteTrigger(context.Context, *ByTriggerIdRequest) (*DeleteTriggerResponse, error)
	// 批量删除触发器信息
	DeleteTriggers(context.Context, *ByTriggerIdsRequest) (*DeleteTriggerResponse, error)
	// 获取触发器信息
	GetTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error)
	// 暂停触发器
	StopTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error)
	// 恢复触发器
	ResumeTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error)
	// 根据资源查找对应的触发器
	SearchTrigger(context.Context, *ByResourceRequest) (*ListTriggerResponse, error)
	//立即执行一次触发器任务
	StartNowTrigger(context.Context, *ByTriggerIdRequest) (*StartNowTriggerResponse, error)
	mustEmbedUnimplementedTriggerServiceServer()
}

// UnimplementedTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) ListTrigger(context.Context, *ByKeyAndPageRequest) (*ListTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) UpdateTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) UpdateTriggers(context.Context, *ListTriggerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) CreateTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) CreateTriggers(context.Context, *ListTriggerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteTrigger(context.Context, *ByTriggerIdRequest) (*DeleteTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteTriggers(context.Context, *ByTriggerIdsRequest) (*DeleteTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) GetTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) StopTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) ResumeTrigger(context.Context, *ByTriggerIdRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) SearchTrigger(context.Context, *ByResourceRequest) (*ListTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) StartNowTrigger(context.Context, *ByTriggerIdRequest) (*StartNowTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNowTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) mustEmbedUnimplementedTriggerServiceServer() {}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_ListTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByKeyAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/ListTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListTrigger(ctx, req.(*ByKeyAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpdateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpdateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/UpdateTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpdateTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpdateTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpdateTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/UpdateTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpdateTriggers(ctx, req.(*ListTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/CreateTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).CreateTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_CreateTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).CreateTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/CreateTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).CreateTriggers(ctx, req.(*ListTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/DeleteTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteTrigger(ctx, req.(*ByTriggerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/DeleteTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteTriggers(ctx, req.(*ByTriggerIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/GetTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTrigger(ctx, req.(*ByTriggerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_StopTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).StopTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/StopTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).StopTrigger(ctx, req.(*ByTriggerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ResumeTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ResumeTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/ResumeTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ResumeTrigger(ctx, req.(*ByTriggerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_SearchTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).SearchTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/SearchTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).SearchTrigger(ctx, req.(*ByResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_StartNowTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByTriggerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).StartNowTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TriggerService/StartNowTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).StartNowTrigger(ctx, req.(*ByTriggerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTrigger",
			Handler:    _TriggerService_ListTrigger_Handler,
		},
		{
			MethodName: "UpdateTrigger",
			Handler:    _TriggerService_UpdateTrigger_Handler,
		},
		{
			MethodName: "UpdateTriggers",
			Handler:    _TriggerService_UpdateTriggers_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _TriggerService_CreateTrigger_Handler,
		},
		{
			MethodName: "CreateTriggers",
			Handler:    _TriggerService_CreateTriggers_Handler,
		},
		{
			MethodName: "DeleteTrigger",
			Handler:    _TriggerService_DeleteTrigger_Handler,
		},
		{
			MethodName: "DeleteTriggers",
			Handler:    _TriggerService_DeleteTriggers_Handler,
		},
		{
			MethodName: "GetTrigger",
			Handler:    _TriggerService_GetTrigger_Handler,
		},
		{
			MethodName: "StopTrigger",
			Handler:    _TriggerService_StopTrigger_Handler,
		},
		{
			MethodName: "ResumeTrigger",
			Handler:    _TriggerService_ResumeTrigger_Handler,
		},
		{
			MethodName: "SearchTrigger",
			Handler:    _TriggerService_SearchTrigger_Handler,
		},
		{
			MethodName: "StartNowTrigger",
			Handler:    _TriggerService_StartNowTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/trigger.proto",
}
