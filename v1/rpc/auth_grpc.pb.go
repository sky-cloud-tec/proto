// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: src/grpc/auth.proto

package rpc

import (
	context "context"
	common "github.com/sky-cloud-tec/proto/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermServiceClient is the client API for PermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermServiceClient interface {
	// DISCUSSION
	// style 1
	// CheckPermission -> CheckPerm -> Check
	// 在PermService下的Check，自然带有 CheckPerm的意思，所以Perm可以省略
	// 但是加上的话，读起来会更连贯, 准确
	CheckPerm(ctx context.Context, in *ByHttpIdentityRequest, opts ...grpc.CallOption) (*CheckPermResponse, error)
	ListPerm(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*ListPermResponse, error)
}

type permServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermServiceClient(cc grpc.ClientConnInterface) PermServiceClient {
	return &permServiceClient{cc}
}

func (c *permServiceClient) CheckPerm(ctx context.Context, in *ByHttpIdentityRequest, opts ...grpc.CallOption) (*CheckPermResponse, error) {
	out := new(CheckPermResponse)
	err := c.cc.Invoke(ctx, "/rpc.PermService/CheckPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) ListPerm(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*ListPermResponse, error) {
	out := new(ListPermResponse)
	err := c.cc.Invoke(ctx, "/rpc.PermService/ListPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServiceServer is the server API for PermService service.
// All implementations must embed UnimplementedPermServiceServer
// for forward compatibility
type PermServiceServer interface {
	// DISCUSSION
	// style 1
	// CheckPermission -> CheckPerm -> Check
	// 在PermService下的Check，自然带有 CheckPerm的意思，所以Perm可以省略
	// 但是加上的话，读起来会更连贯, 准确
	CheckPerm(context.Context, *ByHttpIdentityRequest) (*CheckPermResponse, error)
	ListPerm(context.Context, *ByNameRequest) (*ListPermResponse, error)
	mustEmbedUnimplementedPermServiceServer()
}

// UnimplementedPermServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermServiceServer struct {
}

func (UnimplementedPermServiceServer) CheckPerm(context.Context, *ByHttpIdentityRequest) (*CheckPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPerm not implemented")
}
func (UnimplementedPermServiceServer) ListPerm(context.Context, *ByNameRequest) (*ListPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPerm not implemented")
}
func (UnimplementedPermServiceServer) mustEmbedUnimplementedPermServiceServer() {}

// UnsafePermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermServiceServer will
// result in compilation errors.
type UnsafePermServiceServer interface {
	mustEmbedUnimplementedPermServiceServer()
}

func RegisterPermServiceServer(s grpc.ServiceRegistrar, srv PermServiceServer) {
	s.RegisterService(&PermService_ServiceDesc, srv)
}

func _PermService_CheckPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByHttpIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).CheckPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PermService/CheckPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).CheckPerm(ctx, req.(*ByHttpIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_ListPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).ListPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PermService/ListPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).ListPerm(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermService_ServiceDesc is the grpc.ServiceDesc for PermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PermService",
	HandlerType: (*PermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPerm",
			Handler:    _PermService_CheckPerm_Handler,
		},
		{
			MethodName: "ListPerm",
			Handler:    _PermService_ListPerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/auth.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 根据用户名字模糊查询用户
	SearchUser(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	// 根据用户组名模糊查询
	SearchUserGroup(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*SearchUserGroupResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SearchUser(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/rpc.UserService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUserGroup(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*SearchUserGroupResponse, error) {
	out := new(SearchUserGroupResponse)
	err := c.cc.Invoke(ctx, "/rpc.UserService/SearchUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 根据用户名字模糊查询用户
	SearchUser(context.Context, *ByNameRequest) (*SearchUserResponse, error)
	// 根据用户组名模糊查询
	SearchUserGroup(context.Context, *ByNameRequest) (*SearchUserGroupResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SearchUser(context.Context, *ByNameRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServiceServer) SearchUserGroup(context.Context, *ByNameRequest) (*SearchUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserGroup not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUser(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserService/SearchUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUserGroup(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUser",
			Handler:    _UserService_SearchUser_Handler,
		},
		{
			MethodName: "SearchUserGroup",
			Handler:    _UserService_SearchUserGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/auth.proto",
}

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// 根据服务名和用户角色展示用户和用户组信息
	ListUserAndUserGroup(ctx context.Context, in *ByRoleAndAppRequest, opts ...grpc.CallOption) (*ListUserAndUserGroupResponse, error)
	// 更新用户请求权限
	UpdateRole(ctx context.Context, in *ByEventRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	CreateRole(ctx context.Context, in *WithAppInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DeleteRole(ctx context.Context, in *WithAppInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	UpdateUserGroupRole(ctx context.Context, in *ByEventRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) ListUserAndUserGroup(ctx context.Context, in *ByRoleAndAppRequest, opts ...grpc.CallOption) (*ListUserAndUserGroupResponse, error) {
	out := new(ListUserAndUserGroupResponse)
	err := c.cc.Invoke(ctx, "/rpc.RoleService/ListUserAndUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *ByEventRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.RoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *WithAppInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.RoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *WithAppInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.RoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateUserGroupRole(ctx context.Context, in *ByEventRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.RoleService/UpdateUserGroupRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// 根据服务名和用户角色展示用户和用户组信息
	ListUserAndUserGroup(context.Context, *ByRoleAndAppRequest) (*ListUserAndUserGroupResponse, error)
	// 更新用户请求权限
	UpdateRole(context.Context, *ByEventRequest) (*common.SimpleJsonResponse, error)
	CreateRole(context.Context, *WithAppInfoRequest) (*common.SimpleJsonResponse, error)
	DeleteRole(context.Context, *WithAppInfoRequest) (*common.SimpleJsonResponse, error)
	UpdateUserGroupRole(context.Context, *ByEventRequest) (*common.SimpleJsonResponse, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) ListUserAndUserGroup(context.Context, *ByRoleAndAppRequest) (*ListUserAndUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAndUserGroup not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *ByEventRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) CreateRole(context.Context, *WithAppInfoRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *WithAppInfoRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateUserGroupRole(context.Context, *ByEventRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroupRole not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_ListUserAndUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByRoleAndAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListUserAndUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoleService/ListUserAndUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListUserAndUserGroup(ctx, req.(*ByRoleAndAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*ByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*WithAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*WithAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateUserGroupRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateUserGroupRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoleService/UpdateUserGroupRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateUserGroupRole(ctx, req.(*ByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserAndUserGroup",
			Handler:    _RoleService_ListUserAndUserGroup_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateUserGroupRole",
			Handler:    _RoleService_UpdateUserGroupRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/auth.proto",
}
