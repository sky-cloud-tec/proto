// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/grpc/httpd.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("src/grpc/httpd.proto", fileDescriptor_d5ecb45e4b4a8ff9) }

var fileDescriptor_d5ecb45e4b4a8ff9 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8d, 0x41, 0xab, 0x82, 0x50,
	0x10, 0x46, 0x1f, 0x3c, 0x88, 0xb8, 0x54, 0x0b, 0x89, 0x02, 0x97, 0x41, 0xab, 0xf0, 0x5e, 0xaa,
	0x65, 0x8b, 0xa0, 0x55, 0x6d, 0x6b, 0xd7, 0x2e, 0xc7, 0x41, 0x45, 0xf3, 0x4e, 0x33, 0xa3, 0xe0,
	0xbf, 0x0f, 0xb5, 0x5a, 0x1e, 0xce, 0xf9, 0xf8, 0xcc, 0x5c, 0x18, 0x5c, 0xca, 0x04, 0x2e, 0x53,
	0xa5, 0xc4, 0x12, 0x7b, 0xf5, 0xc1, 0x3f, 0x13, 0x84, 0xcb, 0x9f, 0xca, 0x19, 0x5f, 0x35, 0x8a,
	0x0e, 0x76, 0x77, 0x30, 0x93, 0x73, 0x17, 0xdf, 0x90, 0x9b, 0x1c, 0x30, 0xd8, 0x98, 0x71, 0x82,
	0x25, 0xa6, 0x0f, 0xc5, 0x60, 0x6a, 0x99, 0xc0, 0x5e, 0xae, 0xc3, 0x20, 0x9c, 0x7d, 0x51, 0xc8,
	0x57, 0x82, 0xab, 0xbf, 0xd3, 0xd1, 0x2c, 0x2a, 0x54, 0x2b, 0x45, 0x0b, 0xa5, 0xaf, 0x3f, 0x87,
	0x5d, 0x75, 0x5f, 0xa7, 0xb9, 0x66, 0x75, 0x6c, 0xc1, 0x3f, 0x9d, 0x14, 0x6d, 0xd4, 0xfb, 0x48,
	0x11, 0x5c, 0xdf, 0xb8, 0x66, 0xeb, 0x98, 0x20, 0x1e, 0xf5, 0xb4, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x98, 0xb4, 0xf3, 0xec, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HttpdServiceClient is the client API for HttpdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HttpdServiceClient interface {
	// use SimpleJsonRequest and SimpleJsonResponse
	Delegate(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error)
}

type httpdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpdServiceClient(cc grpc.ClientConnInterface) HttpdServiceClient {
	return &httpdServiceClient{cc}
}

func (c *httpdServiceClient) Delegate(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error) {
	out := new(IResponse)
	err := c.cc.Invoke(ctx, "/rpc.HttpdService/delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpdServiceServer is the server API for HttpdService service.
type HttpdServiceServer interface {
	// use SimpleJsonRequest and SimpleJsonResponse
	Delegate(context.Context, *IRequest) (*IResponse, error)
}

// UnimplementedHttpdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHttpdServiceServer struct {
}

func (*UnimplementedHttpdServiceServer) Delegate(ctx context.Context, req *IRequest) (*IResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}

func RegisterHttpdServiceServer(s *grpc.Server, srv HttpdServiceServer) {
	s.RegisterService(&_HttpdService_serviceDesc, srv)
}

func _HttpdService_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpdServiceServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.HttpdService/Delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpdServiceServer).Delegate(ctx, req.(*IRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.HttpdService",
	HandlerType: (*HttpdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "delegate",
			Handler:    _HttpdService_Delegate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/httpd.proto",
}
