// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: src/grpc/nap.proto

package rpc

import (
	common "github.com/sky-cloud-tec/proto/v1/common"
	nap "github.com/sky-cloud-tec/proto/v1/nap"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeType int32

const (
	TimeType_DAY    TimeType = 0
	TimeType_HOUR   TimeType = 1
	TimeType_MINUTE TimeType = 2
	TimeType_SECOND TimeType = 3
	TimeType_MONTH  TimeType = 4
)

// Enum value maps for TimeType.
var (
	TimeType_name = map[int32]string{
		0: "DAY",
		1: "HOUR",
		2: "MINUTE",
		3: "SECOND",
		4: "MONTH",
	}
	TimeType_value = map[string]int32{
		"DAY":    0,
		"HOUR":   1,
		"MINUTE": 2,
		"SECOND": 3,
		"MONTH":  4,
	}
)

func (x TimeType) Enum() *TimeType {
	p := new(TimeType)
	*p = x
	return p
}

func (x TimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_grpc_nap_proto_enumTypes[0].Descriptor()
}

func (TimeType) Type() protoreflect.EnumType {
	return &file_src_grpc_nap_proto_enumTypes[0]
}

func (x TimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeType.Descriptor instead.
func (TimeType) EnumDescriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{0}
}

type CleanResult int32

const (
	CleanResult_SUCCEED CleanResult = 0
	CleanResult_FAILED  CleanResult = 1
)

// Enum value maps for CleanResult.
var (
	CleanResult_name = map[int32]string{
		0: "SUCCEED",
		1: "FAILED",
	}
	CleanResult_value = map[string]int32{
		"SUCCEED": 0,
		"FAILED":  1,
	}
)

func (x CleanResult) Enum() *CleanResult {
	p := new(CleanResult)
	*p = x
	return p
}

func (x CleanResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CleanResult) Descriptor() protoreflect.EnumDescriptor {
	return file_src_grpc_nap_proto_enumTypes[1].Descriptor()
}

func (CleanResult) Type() protoreflect.EnumType {
	return &file_src_grpc_nap_proto_enumTypes[1]
}

func (x CleanResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CleanResult.Descriptor instead.
func (CleanResult) EnumDescriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{1}
}

type ByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	ContextId string `protobuf:"bytes,20,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *ByIdRequest) Reset() {
	*x = ByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByIdRequest) ProtoMessage() {}

func (x *ByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByIdRequest.ProtoReflect.Descriptor instead.
func (*ByIdRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{0}
}

func (x *ByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ByIdRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type ByDeviceAndTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	TaskId     string `protobuf:"bytes,20,opt,name=taskId,proto3" json:"taskId,omitempty"`
	DeviceType string `protobuf:"bytes,30,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	ContextId  string `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *ByDeviceAndTaskRequest) Reset() {
	*x = ByDeviceAndTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByDeviceAndTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByDeviceAndTaskRequest) ProtoMessage() {}

func (x *ByDeviceAndTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByDeviceAndTaskRequest.ProtoReflect.Descriptor instead.
func (*ByDeviceAndTaskRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{1}
}

func (x *ByDeviceAndTaskRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ByDeviceAndTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ByDeviceAndTaskRequest) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *ByDeviceAndTaskRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type ByDeviceIdAndDeviceTypeAndKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string `protobuf:"bytes,10,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Key        string `protobuf:"bytes,20,opt,name=key,proto3" json:"key,omitempty"`
	DeviceType string `protobuf:"bytes,30,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) Reset() {
	*x = ByDeviceIdAndDeviceTypeAndKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByDeviceIdAndDeviceTypeAndKeyRequest) ProtoMessage() {}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByDeviceIdAndDeviceTypeAndKeyRequest.ProtoReflect.Descriptor instead.
func (*ByDeviceIdAndDeviceTypeAndKeyRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{2}
}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ByDeviceIdAndDeviceTypeAndKeyRequest) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

type GetTemplateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetTemplateDeviceResponse) Reset() {
	*x = GetTemplateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemplateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemplateDeviceResponse) ProtoMessage() {}

func (x *GetTemplateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemplateDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetTemplateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{3}
}

func (x *GetTemplateDeviceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTemplateDeviceResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type WithRawConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfg *nap.RawConfig `protobuf:"bytes,10,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *WithRawConfigRequest) Reset() {
	*x = WithRawConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithRawConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithRawConfigRequest) ProtoMessage() {}

func (x *WithRawConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithRawConfigRequest.ProtoReflect.Descriptor instead.
func (*WithRawConfigRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{4}
}

func (x *WithRawConfigRequest) GetCfg() *nap.RawConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type WithAddressAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *nap.Address `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Device    string       `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string       `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithAddressAndDeviceRequest) Reset() {
	*x = WithAddressAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithAddressAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithAddressAndDeviceRequest) ProtoMessage() {}

func (x *WithAddressAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithAddressAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithAddressAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{5}
}

func (x *WithAddressAndDeviceRequest) GetAddress() *nap.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *WithAddressAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithAddressAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithHitCountAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hitcount  *nap.HitCounts `protobuf:"bytes,10,opt,name=hitcount,proto3" json:"hitcount,omitempty"`
	Device    string         `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string         `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithHitCountAndDeviceRequest) Reset() {
	*x = WithHitCountAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithHitCountAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithHitCountAndDeviceRequest) ProtoMessage() {}

func (x *WithHitCountAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithHitCountAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithHitCountAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{6}
}

func (x *WithHitCountAndDeviceRequest) GetHitcount() *nap.HitCounts {
	if x != nil {
		return x.Hitcount
	}
	return nil
}

func (x *WithHitCountAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithHitCountAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithInterfacesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces *nap.Interfaces `protobuf:"bytes,10,opt,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	Device     string          `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId  string          `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithInterfacesAndDeviceRequest) Reset() {
	*x = WithInterfacesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithInterfacesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithInterfacesAndDeviceRequest) ProtoMessage() {}

func (x *WithInterfacesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithInterfacesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithInterfacesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{7}
}

func (x *WithInterfacesAndDeviceRequest) GetInterfaces() *nap.Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *WithInterfacesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithInterfacesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithZonesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zones     *nap.Zones      `protobuf:"bytes,10,opt,name=zones,proto3" json:"zones,omitempty"`
	ZonePairs []*nap.ZonePair `protobuf:"bytes,15,rep,name=zone_pairs,json=zonePairs,proto3" json:"zone_pairs,omitempty"`
	Device    string          `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string          `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithZonesAndDeviceRequest) Reset() {
	*x = WithZonesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithZonesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithZonesAndDeviceRequest) ProtoMessage() {}

func (x *WithZonesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithZonesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithZonesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{8}
}

func (x *WithZonesAndDeviceRequest) GetZones() *nap.Zones {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *WithZonesAndDeviceRequest) GetZonePairs() []*nap.ZonePair {
	if x != nil {
		return x.ZonePairs
	}
	return nil
}

func (x *WithZonesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithZonesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithNatObjectsAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatObjects *nap.NatObjects `protobuf:"bytes,10,opt,name=natObjects,proto3" json:"natObjects,omitempty"`
	Device     string          `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId  string          `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithNatObjectsAndDeviceRequest) Reset() {
	*x = WithNatObjectsAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithNatObjectsAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithNatObjectsAndDeviceRequest) ProtoMessage() {}

func (x *WithNatObjectsAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithNatObjectsAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithNatObjectsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{9}
}

func (x *WithNatObjectsAndDeviceRequest) GetNatObjects() *nap.NatObjects {
	if x != nil {
		return x.NatObjects
	}
	return nil
}

func (x *WithNatObjectsAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithNatObjectsAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithSchedulesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules *nap.Schedules `protobuf:"bytes,10,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Device    string         `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string         `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithSchedulesAndDeviceRequest) Reset() {
	*x = WithSchedulesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithSchedulesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithSchedulesAndDeviceRequest) ProtoMessage() {}

func (x *WithSchedulesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithSchedulesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithSchedulesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{10}
}

func (x *WithSchedulesAndDeviceRequest) GetSchedules() *nap.Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *WithSchedulesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithSchedulesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithServicesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services  *nap.Services `protobuf:"bytes,10,opt,name=services,proto3" json:"services,omitempty"`
	Device    string        `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string        `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithServicesAndDeviceRequest) Reset() {
	*x = WithServicesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithServicesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithServicesAndDeviceRequest) ProtoMessage() {}

func (x *WithServicesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithServicesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithServicesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{11}
}

func (x *WithServicesAndDeviceRequest) GetServices() *nap.Services {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *WithServicesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithServicesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithRoutesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes    *nap.Routes `protobuf:"bytes,10,opt,name=routes,proto3" json:"routes,omitempty"`
	Device    string      `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string      `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithRoutesAndDeviceRequest) Reset() {
	*x = WithRoutesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithRoutesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithRoutesAndDeviceRequest) ProtoMessage() {}

func (x *WithRoutesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithRoutesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithRoutesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{12}
}

func (x *WithRoutesAndDeviceRequest) GetRoutes() *nap.Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *WithRoutesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithRoutesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithPoliciesAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies  *nap.Policies `protobuf:"bytes,10,opt,name=policies,proto3" json:"policies,omitempty"`
	Device    string        `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string        `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithPoliciesAndDeviceRequest) Reset() {
	*x = WithPoliciesAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithPoliciesAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithPoliciesAndDeviceRequest) ProtoMessage() {}

func (x *WithPoliciesAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithPoliciesAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithPoliciesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{13}
}

func (x *WithPoliciesAndDeviceRequest) GetPolicies() *nap.Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *WithPoliciesAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithPoliciesAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithApplicationsAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications   *nap.Applications `protobuf:"bytes,10,opt,name=applications,proto3" json:"applications,omitempty"`
	Device         string            `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	AppDirectoryId string            `protobuf:"bytes,30,opt,name=appDirectoryId,proto3" json:"appDirectoryId,omitempty"`
	ContextId      string            `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithApplicationsAndDeviceRequest) Reset() {
	*x = WithApplicationsAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithApplicationsAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithApplicationsAndDeviceRequest) ProtoMessage() {}

func (x *WithApplicationsAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithApplicationsAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithApplicationsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{14}
}

func (x *WithApplicationsAndDeviceRequest) GetApplications() *nap.Applications {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *WithApplicationsAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithApplicationsAndDeviceRequest) GetAppDirectoryId() string {
	if x != nil {
		return x.AppDirectoryId
	}
	return ""
}

func (x *WithApplicationsAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithUserIDsAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs   *nap.UserIDs `protobuf:"bytes,10,opt,name=userIDs,proto3" json:"userIDs,omitempty"`
	Device    string       `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId string       `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithUserIDsAndDeviceRequest) Reset() {
	*x = WithUserIDsAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithUserIDsAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithUserIDsAndDeviceRequest) ProtoMessage() {}

func (x *WithUserIDsAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithUserIDsAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithUserIDsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{15}
}

func (x *WithUserIDsAndDeviceRequest) GetUserIDs() *nap.UserIDs {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *WithUserIDsAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithUserIDsAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type WithAccessGroupsAndDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessGroups *nap.AccessGroups `protobuf:"bytes,10,opt,name=accessGroups,proto3" json:"accessGroups,omitempty"`
	Device       string            `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId    string            `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
}

func (x *WithAccessGroupsAndDeviceRequest) Reset() {
	*x = WithAccessGroupsAndDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithAccessGroupsAndDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithAccessGroupsAndDeviceRequest) ProtoMessage() {}

func (x *WithAccessGroupsAndDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithAccessGroupsAndDeviceRequest.ProtoReflect.Descriptor instead.
func (*WithAccessGroupsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{16}
}

func (x *WithAccessGroupsAndDeviceRequest) GetAccessGroups() *nap.AccessGroups {
	if x != nil {
		return x.AccessGroups
	}
	return nil
}

func (x *WithAccessGroupsAndDeviceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WithAccessGroupsAndDeviceRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

type ByDeviceAndPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
	Page   int32  `protobuf:"varint,20,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32  `protobuf:"varint,30,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ByDeviceAndPageRequest) Reset() {
	*x = ByDeviceAndPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByDeviceAndPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByDeviceAndPageRequest) ProtoMessage() {}

func (x *ByDeviceAndPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByDeviceAndPageRequest.ProtoReflect.Descriptor instead.
func (*ByDeviceAndPageRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{17}
}

func (x *ByDeviceAndPageRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ByDeviceAndPageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ByDeviceAndPageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PullDeviceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result nap.PullResult `protobuf:"varint,10,opt,name=result,proto3,enum=nap.PullResult" json:"result,omitempty"`
}

func (x *PullDeviceConfigResponse) Reset() {
	*x = PullDeviceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullDeviceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDeviceConfigResponse) ProtoMessage() {}

func (x *PullDeviceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDeviceConfigResponse.ProtoReflect.Descriptor instead.
func (*PullDeviceConfigResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{18}
}

func (x *PullDeviceConfigResponse) GetResult() nap.PullResult {
	if x != nil {
		return x.Result
	}
	return nap.PullResult_UPDATED
}

type ListRawConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *common.PageInfo `protobuf:"bytes,10,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	Items    []*nap.RawConfig `protobuf:"bytes,20,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListRawConfigResponse) Reset() {
	*x = ListRawConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRawConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRawConfigResponse) ProtoMessage() {}

func (x *ListRawConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRawConfigResponse.ProtoReflect.Descriptor instead.
func (*ListRawConfigResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{19}
}

func (x *ListRawConfigResponse) GetPageInfo() *common.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListRawConfigResponse) GetItems() []*nap.RawConfig {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetRawConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfg *nap.RawConfig `protobuf:"bytes,10,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *GetRawConfigResponse) Reset() {
	*x = GetRawConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawConfigResponse) ProtoMessage() {}

func (x *GetRawConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawConfigResponse.ProtoReflect.Descriptor instead.
func (*GetRawConfigResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{20}
}

func (x *GetRawConfigResponse) GetCfg() *nap.RawConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type SendDeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    string `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	TaskType    string `protobuf:"bytes,20,opt,name=taskType,proto3" json:"taskType,omitempty"`
	DeviceState string `protobuf:"bytes,30,opt,name=deviceState,proto3" json:"deviceState,omitempty"`
	ContextId   string `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
	Message     string `protobuf:"bytes,50,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendDeviceStateRequest) Reset() {
	*x = SendDeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendDeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDeviceStateRequest) ProtoMessage() {}

func (x *SendDeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDeviceStateRequest.ProtoReflect.Descriptor instead.
func (*SendDeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{21}
}

func (x *SendDeviceStateRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SendDeviceStateRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *SendDeviceStateRequest) GetDeviceState() string {
	if x != nil {
		return x.DeviceState
	}
	return ""
}

func (x *SendDeviceStateRequest) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *SendDeviceStateRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CleanRawConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string   `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	MaxSize    int32    `protobuf:"varint,20,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	SizeEnable bool     `protobuf:"varint,30,opt,name=sizeEnable,proto3" json:"sizeEnable,omitempty"`
	MaxDay     int32    `protobuf:"varint,40,opt,name=maxDay,proto3" json:"maxDay,omitempty"`
	DayEnable  bool     `protobuf:"varint,50,opt,name=dayEnable,proto3" json:"dayEnable,omitempty"`
	TimeType   TimeType `protobuf:"varint,60,opt,name=timeType,proto3,enum=rpc.TimeType" json:"timeType,omitempty"`
}

func (x *CleanRawConfigRequest) Reset() {
	*x = CleanRawConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanRawConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanRawConfigRequest) ProtoMessage() {}

func (x *CleanRawConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanRawConfigRequest.ProtoReflect.Descriptor instead.
func (*CleanRawConfigRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{22}
}

func (x *CleanRawConfigRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CleanRawConfigRequest) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *CleanRawConfigRequest) GetSizeEnable() bool {
	if x != nil {
		return x.SizeEnable
	}
	return false
}

func (x *CleanRawConfigRequest) GetMaxDay() int32 {
	if x != nil {
		return x.MaxDay
	}
	return 0
}

func (x *CleanRawConfigRequest) GetDayEnable() bool {
	if x != nil {
		return x.DayEnable
	}
	return false
}

func (x *CleanRawConfigRequest) GetTimeType() TimeType {
	if x != nil {
		return x.TimeType
	}
	return TimeType_DAY
}

type CleanRawConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CleanResult `protobuf:"varint,10,opt,name=result,proto3,enum=rpc.CleanResult" json:"result,omitempty"`
}

func (x *CleanRawConfigResponse) Reset() {
	*x = CleanRawConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanRawConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanRawConfigResponse) ProtoMessage() {}

func (x *CleanRawConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanRawConfigResponse.ProtoReflect.Descriptor instead.
func (*CleanRawConfigResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{23}
}

func (x *CleanRawConfigResponse) GetResult() CleanResult {
	if x != nil {
		return x.Result
	}
	return CleanResult_SUCCEED
}

type ImportAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportAddressesResponse) Reset() {
	*x = ImportAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressesResponse) ProtoMessage() {}

func (x *ImportAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressesResponse.ProtoReflect.Descriptor instead.
func (*ImportAddressesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{24}
}

type ImportInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportInterfacesResponse) Reset() {
	*x = ImportInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportInterfacesResponse) ProtoMessage() {}

func (x *ImportInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ImportInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{25}
}

type ImportZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportZonesResponse) Reset() {
	*x = ImportZonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportZonesResponse) ProtoMessage() {}

func (x *ImportZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportZonesResponse.ProtoReflect.Descriptor instead.
func (*ImportZonesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{26}
}

type ImportNatObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportNatObjectsResponse) Reset() {
	*x = ImportNatObjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNatObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNatObjectsResponse) ProtoMessage() {}

func (x *ImportNatObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNatObjectsResponse.ProtoReflect.Descriptor instead.
func (*ImportNatObjectsResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{27}
}

type ImportSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportSchedulesResponse) Reset() {
	*x = ImportSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSchedulesResponse) ProtoMessage() {}

func (x *ImportSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ImportSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{28}
}

type ImportServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportServicesResponse) Reset() {
	*x = ImportServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportServicesResponse) ProtoMessage() {}

func (x *ImportServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportServicesResponse.ProtoReflect.Descriptor instead.
func (*ImportServicesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{29}
}

type ImportRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportRoutesResponse) Reset() {
	*x = ImportRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportRoutesResponse) ProtoMessage() {}

func (x *ImportRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportRoutesResponse.ProtoReflect.Descriptor instead.
func (*ImportRoutesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{30}
}

type ImportPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportPoliciesResponse) Reset() {
	*x = ImportPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPoliciesResponse) ProtoMessage() {}

func (x *ImportPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ImportPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{31}
}

type ImportApplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportApplicationsResponse) Reset() {
	*x = ImportApplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportApplicationsResponse) ProtoMessage() {}

func (x *ImportApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportApplicationsResponse.ProtoReflect.Descriptor instead.
func (*ImportApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{32}
}

type ImportHitCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportHitCountsResponse) Reset() {
	*x = ImportHitCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportHitCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportHitCountsResponse) ProtoMessage() {}

func (x *ImportHitCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportHitCountsResponse.ProtoReflect.Descriptor instead.
func (*ImportHitCountsResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{33}
}

type ImportUserIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportUserIDsResponse) Reset() {
	*x = ImportUserIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUserIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUserIDsResponse) ProtoMessage() {}

func (x *ImportUserIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUserIDsResponse.ProtoReflect.Descriptor instead.
func (*ImportUserIDsResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{34}
}

type ImportAccessGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportAccessGroupsResponse) Reset() {
	*x = ImportAccessGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAccessGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAccessGroupsResponse) ProtoMessage() {}

func (x *ImportAccessGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAccessGroupsResponse.ProtoReflect.Descriptor instead.
func (*ImportAccessGroupsResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{35}
}

type SendDeviceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendDeviceStateResponse) Reset() {
	*x = SendDeviceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_nap_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendDeviceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDeviceStateResponse) ProtoMessage() {}

func (x *SendDeviceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_nap_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDeviceStateResponse.ProtoReflect.Descriptor instead.
func (*SendDeviceStateResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_nap_proto_rawDescGZIP(), []int{36}
}

var File_src_grpc_nap_proto protoreflect.FileDescriptor

var file_src_grpc_nap_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x61, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x15, 0x73, 0x72, 0x63, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x72, 0x63, 0x2f, 0x6e, 0x61, 0x70,
	0x2f, 0x6e, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0b, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x24, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x63,
	0x66, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x52,
	0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0x7b, 0x0a,
	0x1b, 0x57, 0x69, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x57,
	0x69, 0x74, 0x68, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x68,
	0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6e, 0x61, 0x70, 0x2e, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x68,
	0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x1e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x61,
	0x70, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1e,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6e,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x61, 0x70,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x1a,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x61, 0x70,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x20, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x22, 0x7b, 0x0a, 0x1b, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01,
	0x0a, 0x20, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x16, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x18, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x40, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x2a, 0x26, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x32, 0xd1,
	0x04, 0x0a, 0x10, 0x4e, 0x61, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12,
	0x50, 0x75, 0x6c, 0x6c, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0xfc, 0x02, 0x0a, 0x13, 0x4e, 0x61, 0x70, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xaf, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0x6f, 0x0a, 0x13, 0x4e, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x5b, 0x0a, 0x0e, 0x4e, 0x61, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x6f, 0x0a, 0x13, 0x4e, 0x61, 0x70, 0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0x6b, 0x0a, 0x12, 0x4e, 0x61, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x63, 0x0a, 0x0d, 0x4e, 0x61, 0x70, 0x53, 0x76, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x52, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x5f, 0x0a, 0x0f, 0x4e, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x66, 0x0a, 0x10, 0x4e, 0x61, 0x70, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x77, 0x0a,
	0x15, 0x4e, 0x61, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x6a, 0x0a, 0x12, 0x4e, 0x61, 0x70, 0x48, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0f,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0x63, 0x0a, 0x10, 0x4e, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x77, 0x0a, 0x15, 0x4e, 0x61, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5e, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x3f, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6b, 0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x74, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_grpc_nap_proto_rawDescOnce sync.Once
	file_src_grpc_nap_proto_rawDescData = file_src_grpc_nap_proto_rawDesc
)

func file_src_grpc_nap_proto_rawDescGZIP() []byte {
	file_src_grpc_nap_proto_rawDescOnce.Do(func() {
		file_src_grpc_nap_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_grpc_nap_proto_rawDescData)
	})
	return file_src_grpc_nap_proto_rawDescData
}

var file_src_grpc_nap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_src_grpc_nap_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_src_grpc_nap_proto_goTypes = []interface{}{
	(TimeType)(0),                                // 0: rpc.TimeType
	(CleanResult)(0),                             // 1: rpc.CleanResult
	(*ByIdRequest)(nil),                          // 2: rpc.ByIdRequest
	(*ByDeviceAndTaskRequest)(nil),               // 3: rpc.ByDeviceAndTaskRequest
	(*ByDeviceIdAndDeviceTypeAndKeyRequest)(nil), // 4: rpc.ByDeviceIdAndDeviceTypeAndKeyRequest
	(*GetTemplateDeviceResponse)(nil),            // 5: rpc.GetTemplateDeviceResponse
	(*WithRawConfigRequest)(nil),                 // 6: rpc.WithRawConfigRequest
	(*WithAddressAndDeviceRequest)(nil),          // 7: rpc.WithAddressAndDeviceRequest
	(*WithHitCountAndDeviceRequest)(nil),         // 8: rpc.WithHitCountAndDeviceRequest
	(*WithInterfacesAndDeviceRequest)(nil),       // 9: rpc.WithInterfacesAndDeviceRequest
	(*WithZonesAndDeviceRequest)(nil),            // 10: rpc.WithZonesAndDeviceRequest
	(*WithNatObjectsAndDeviceRequest)(nil),       // 11: rpc.WithNatObjectsAndDeviceRequest
	(*WithSchedulesAndDeviceRequest)(nil),        // 12: rpc.WithSchedulesAndDeviceRequest
	(*WithServicesAndDeviceRequest)(nil),         // 13: rpc.WithServicesAndDeviceRequest
	(*WithRoutesAndDeviceRequest)(nil),           // 14: rpc.WithRoutesAndDeviceRequest
	(*WithPoliciesAndDeviceRequest)(nil),         // 15: rpc.WithPoliciesAndDeviceRequest
	(*WithApplicationsAndDeviceRequest)(nil),     // 16: rpc.WithApplicationsAndDeviceRequest
	(*WithUserIDsAndDeviceRequest)(nil),          // 17: rpc.WithUserIDsAndDeviceRequest
	(*WithAccessGroupsAndDeviceRequest)(nil),     // 18: rpc.WithAccessGroupsAndDeviceRequest
	(*ByDeviceAndPageRequest)(nil),               // 19: rpc.ByDeviceAndPageRequest
	(*PullDeviceConfigResponse)(nil),             // 20: rpc.PullDeviceConfigResponse
	(*ListRawConfigResponse)(nil),                // 21: rpc.ListRawConfigResponse
	(*GetRawConfigResponse)(nil),                 // 22: rpc.GetRawConfigResponse
	(*SendDeviceStateRequest)(nil),               // 23: rpc.SendDeviceStateRequest
	(*CleanRawConfigRequest)(nil),                // 24: rpc.CleanRawConfigRequest
	(*CleanRawConfigResponse)(nil),               // 25: rpc.CleanRawConfigResponse
	(*ImportAddressesResponse)(nil),              // 26: rpc.ImportAddressesResponse
	(*ImportInterfacesResponse)(nil),             // 27: rpc.ImportInterfacesResponse
	(*ImportZonesResponse)(nil),                  // 28: rpc.ImportZonesResponse
	(*ImportNatObjectsResponse)(nil),             // 29: rpc.ImportNatObjectsResponse
	(*ImportSchedulesResponse)(nil),              // 30: rpc.ImportSchedulesResponse
	(*ImportServicesResponse)(nil),               // 31: rpc.ImportServicesResponse
	(*ImportRoutesResponse)(nil),                 // 32: rpc.ImportRoutesResponse
	(*ImportPoliciesResponse)(nil),               // 33: rpc.ImportPoliciesResponse
	(*ImportApplicationsResponse)(nil),           // 34: rpc.ImportApplicationsResponse
	(*ImportHitCountsResponse)(nil),              // 35: rpc.ImportHitCountsResponse
	(*ImportUserIDsResponse)(nil),                // 36: rpc.ImportUserIDsResponse
	(*ImportAccessGroupsResponse)(nil),           // 37: rpc.ImportAccessGroupsResponse
	(*SendDeviceStateResponse)(nil),              // 38: rpc.SendDeviceStateResponse
	(*nap.RawConfig)(nil),                        // 39: nap.RawConfig
	(*nap.Address)(nil),                          // 40: nap.Address
	(*nap.HitCounts)(nil),                        // 41: nap.HitCounts
	(*nap.Interfaces)(nil),                       // 42: nap.Interfaces
	(*nap.Zones)(nil),                            // 43: nap.Zones
	(*nap.ZonePair)(nil),                         // 44: nap.ZonePair
	(*nap.NatObjects)(nil),                       // 45: nap.NatObjects
	(*nap.Schedules)(nil),                        // 46: nap.Schedules
	(*nap.Services)(nil),                         // 47: nap.Services
	(*nap.Routes)(nil),                           // 48: nap.Routes
	(*nap.Policies)(nil),                         // 49: nap.Policies
	(*nap.Applications)(nil),                     // 50: nap.Applications
	(*nap.UserIDs)(nil),                          // 51: nap.UserIDs
	(*nap.AccessGroups)(nil),                     // 52: nap.AccessGroups
	(nap.PullResult)(0),                          // 53: nap.PullResult
	(*common.PageInfo)(nil),                      // 54: common.PageInfo
	(*common.SimpleJsonResponse)(nil),            // 55: common.SimpleJsonResponse
}
var file_src_grpc_nap_proto_depIdxs = []int32{
	39, // 0: rpc.WithRawConfigRequest.cfg:type_name -> nap.RawConfig
	40, // 1: rpc.WithAddressAndDeviceRequest.address:type_name -> nap.Address
	41, // 2: rpc.WithHitCountAndDeviceRequest.hitcount:type_name -> nap.HitCounts
	42, // 3: rpc.WithInterfacesAndDeviceRequest.Interfaces:type_name -> nap.Interfaces
	43, // 4: rpc.WithZonesAndDeviceRequest.zones:type_name -> nap.Zones
	44, // 5: rpc.WithZonesAndDeviceRequest.zone_pairs:type_name -> nap.ZonePair
	45, // 6: rpc.WithNatObjectsAndDeviceRequest.natObjects:type_name -> nap.NatObjects
	46, // 7: rpc.WithSchedulesAndDeviceRequest.schedules:type_name -> nap.Schedules
	47, // 8: rpc.WithServicesAndDeviceRequest.services:type_name -> nap.Services
	48, // 9: rpc.WithRoutesAndDeviceRequest.routes:type_name -> nap.Routes
	49, // 10: rpc.WithPoliciesAndDeviceRequest.policies:type_name -> nap.Policies
	50, // 11: rpc.WithApplicationsAndDeviceRequest.applications:type_name -> nap.Applications
	51, // 12: rpc.WithUserIDsAndDeviceRequest.userIDs:type_name -> nap.UserIDs
	52, // 13: rpc.WithAccessGroupsAndDeviceRequest.accessGroups:type_name -> nap.AccessGroups
	53, // 14: rpc.PullDeviceConfigResponse.result:type_name -> nap.PullResult
	54, // 15: rpc.ListRawConfigResponse.page_info:type_name -> common.PageInfo
	39, // 16: rpc.ListRawConfigResponse.items:type_name -> nap.RawConfig
	39, // 17: rpc.GetRawConfigResponse.cfg:type_name -> nap.RawConfig
	0,  // 18: rpc.CleanRawConfigRequest.timeType:type_name -> rpc.TimeType
	1,  // 19: rpc.CleanRawConfigResponse.result:type_name -> rpc.CleanResult
	3,  // 20: rpc.NapDeviceService.PullDeviceConfig:input_type -> rpc.ByDeviceAndTaskRequest
	2,  // 21: rpc.NapDeviceService.CheckDeviceState:input_type -> rpc.ByIdRequest
	4,  // 22: rpc.NapDeviceService.GetTemplateDevice:input_type -> rpc.ByDeviceIdAndDeviceTypeAndKeyRequest
	3,  // 23: rpc.NapDeviceService.PullRouteConfig:input_type -> rpc.ByDeviceAndTaskRequest
	3,  // 24: rpc.NapDeviceService.PullHitCountConfig:input_type -> rpc.ByDeviceAndTaskRequest
	3,  // 25: rpc.NapDeviceService.PullUserIDConfig:input_type -> rpc.ByDeviceAndTaskRequest
	23, // 26: rpc.NapDeviceService.SendDeviceState:input_type -> rpc.SendDeviceStateRequest
	6,  // 27: rpc.NapRawConfigService.ImportRawConfig:input_type -> rpc.WithRawConfigRequest
	2,  // 28: rpc.NapRawConfigService.DeleteRawConfig:input_type -> rpc.ByIdRequest
	19, // 29: rpc.NapRawConfigService.ListRawConfig:input_type -> rpc.ByDeviceAndPageRequest
	2,  // 30: rpc.NapRawConfigService.GetRawConfig:input_type -> rpc.ByIdRequest
	24, // 31: rpc.NapRawConfigService.CleanRawConfig:input_type -> rpc.CleanRawConfigRequest
	7,  // 32: rpc.NapAddressService.ImportAddresses:input_type -> rpc.WithAddressAndDeviceRequest
	2,  // 33: rpc.NapAddressService.rebuildAddressIndex:input_type -> rpc.ByIdRequest
	9,  // 34: rpc.NapInterfaceService.ImportInterfaces:input_type -> rpc.WithInterfacesAndDeviceRequest
	10, // 35: rpc.NapZoneService.ImportZones:input_type -> rpc.WithZonesAndDeviceRequest
	11, // 36: rpc.NapNatObjectService.ImportNatObjects:input_type -> rpc.WithNatObjectsAndDeviceRequest
	12, // 37: rpc.NapScheduleService.ImportSchedules:input_type -> rpc.WithSchedulesAndDeviceRequest
	13, // 38: rpc.NapSvcService.ImportServices:input_type -> rpc.WithServicesAndDeviceRequest
	14, // 39: rpc.NapRouteService.ImportRoutes:input_type -> rpc.WithRoutesAndDeviceRequest
	15, // 40: rpc.NapPolicyService.ImportPolicies:input_type -> rpc.WithPoliciesAndDeviceRequest
	16, // 41: rpc.NapApplicationService.ImportApplications:input_type -> rpc.WithApplicationsAndDeviceRequest
	8,  // 42: rpc.NapHitCountService.ImportHitCounts:input_type -> rpc.WithHitCountAndDeviceRequest
	17, // 43: rpc.NapUserIDService.ImportUserIDs:input_type -> rpc.WithUserIDsAndDeviceRequest
	18, // 44: rpc.NapAccessGroupService.ImportAccessGroups:input_type -> rpc.WithAccessGroupsAndDeviceRequest
	20, // 45: rpc.NapDeviceService.PullDeviceConfig:output_type -> rpc.PullDeviceConfigResponse
	55, // 46: rpc.NapDeviceService.CheckDeviceState:output_type -> common.SimpleJsonResponse
	5,  // 47: rpc.NapDeviceService.GetTemplateDevice:output_type -> rpc.GetTemplateDeviceResponse
	20, // 48: rpc.NapDeviceService.PullRouteConfig:output_type -> rpc.PullDeviceConfigResponse
	20, // 49: rpc.NapDeviceService.PullHitCountConfig:output_type -> rpc.PullDeviceConfigResponse
	20, // 50: rpc.NapDeviceService.PullUserIDConfig:output_type -> rpc.PullDeviceConfigResponse
	38, // 51: rpc.NapDeviceService.SendDeviceState:output_type -> rpc.SendDeviceStateResponse
	55, // 52: rpc.NapRawConfigService.ImportRawConfig:output_type -> common.SimpleJsonResponse
	55, // 53: rpc.NapRawConfigService.DeleteRawConfig:output_type -> common.SimpleJsonResponse
	21, // 54: rpc.NapRawConfigService.ListRawConfig:output_type -> rpc.ListRawConfigResponse
	22, // 55: rpc.NapRawConfigService.GetRawConfig:output_type -> rpc.GetRawConfigResponse
	25, // 56: rpc.NapRawConfigService.CleanRawConfig:output_type -> rpc.CleanRawConfigResponse
	26, // 57: rpc.NapAddressService.ImportAddresses:output_type -> rpc.ImportAddressesResponse
	55, // 58: rpc.NapAddressService.rebuildAddressIndex:output_type -> common.SimpleJsonResponse
	27, // 59: rpc.NapInterfaceService.ImportInterfaces:output_type -> rpc.ImportInterfacesResponse
	28, // 60: rpc.NapZoneService.ImportZones:output_type -> rpc.ImportZonesResponse
	29, // 61: rpc.NapNatObjectService.ImportNatObjects:output_type -> rpc.ImportNatObjectsResponse
	30, // 62: rpc.NapScheduleService.ImportSchedules:output_type -> rpc.ImportSchedulesResponse
	31, // 63: rpc.NapSvcService.ImportServices:output_type -> rpc.ImportServicesResponse
	32, // 64: rpc.NapRouteService.ImportRoutes:output_type -> rpc.ImportRoutesResponse
	33, // 65: rpc.NapPolicyService.ImportPolicies:output_type -> rpc.ImportPoliciesResponse
	34, // 66: rpc.NapApplicationService.ImportApplications:output_type -> rpc.ImportApplicationsResponse
	35, // 67: rpc.NapHitCountService.ImportHitCounts:output_type -> rpc.ImportHitCountsResponse
	36, // 68: rpc.NapUserIDService.ImportUserIDs:output_type -> rpc.ImportUserIDsResponse
	37, // 69: rpc.NapAccessGroupService.ImportAccessGroups:output_type -> rpc.ImportAccessGroupsResponse
	45, // [45:70] is the sub-list for method output_type
	20, // [20:45] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_src_grpc_nap_proto_init() }
func file_src_grpc_nap_proto_init() {
	if File_src_grpc_nap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_grpc_nap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByDeviceAndTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByDeviceIdAndDeviceTypeAndKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemplateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithRawConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithAddressAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithHitCountAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithInterfacesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithZonesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithNatObjectsAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithSchedulesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithServicesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithRoutesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithPoliciesAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithApplicationsAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithUserIDsAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithAccessGroupsAndDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByDeviceAndPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullDeviceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRawConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendDeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanRawConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanRawConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportZonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNatObjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportApplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportHitCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUserIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAccessGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_nap_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendDeviceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_grpc_nap_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   14,
		},
		GoTypes:           file_src_grpc_nap_proto_goTypes,
		DependencyIndexes: file_src_grpc_nap_proto_depIdxs,
		EnumInfos:         file_src_grpc_nap_proto_enumTypes,
		MessageInfos:      file_src_grpc_nap_proto_msgTypes,
	}.Build()
	File_src_grpc_nap_proto = out.File
	file_src_grpc_nap_proto_rawDesc = nil
	file_src_grpc_nap_proto_goTypes = nil
	file_src_grpc_nap_proto_depIdxs = nil
}
