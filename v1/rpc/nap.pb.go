// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/grpc/nap.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/sky-cloud-tec/proto/v1/common"
	nap "github.com/sky-cloud-tec/proto/v1/nap"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimeType int32

const (
	TimeType_DAY    TimeType = 0
	TimeType_HOUR   TimeType = 1
	TimeType_MINUTE TimeType = 2
	TimeType_SECOND TimeType = 3
	TimeType_MONTH  TimeType = 4
)

var TimeType_name = map[int32]string{
	0: "DAY",
	1: "HOUR",
	2: "MINUTE",
	3: "SECOND",
	4: "MONTH",
}

var TimeType_value = map[string]int32{
	"DAY":    0,
	"HOUR":   1,
	"MINUTE": 2,
	"SECOND": 3,
	"MONTH":  4,
}

func (x TimeType) String() string {
	return proto.EnumName(TimeType_name, int32(x))
}

func (TimeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{0}
}

type CleanResult int32

const (
	CleanResult_SUCCEED CleanResult = 0
	CleanResult_FAILED  CleanResult = 1
)

var CleanResult_name = map[int32]string{
	0: "SUCCEED",
	1: "FAILED",
}

var CleanResult_value = map[string]int32{
	"SUCCEED": 0,
	"FAILED":  1,
}

func (x CleanResult) String() string {
	return proto.EnumName(CleanResult_name, int32(x))
}

func (CleanResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{1}
}

type ByIdRequest struct {
	Id                   string   `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	ContextId            string   `protobuf:"bytes,20,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByIdRequest) Reset()         { *m = ByIdRequest{} }
func (m *ByIdRequest) String() string { return proto.CompactTextString(m) }
func (*ByIdRequest) ProtoMessage()    {}
func (*ByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{0}
}

func (m *ByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByIdRequest.Unmarshal(m, b)
}
func (m *ByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByIdRequest.Marshal(b, m, deterministic)
}
func (m *ByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByIdRequest.Merge(m, src)
}
func (m *ByIdRequest) XXX_Size() int {
	return xxx_messageInfo_ByIdRequest.Size(m)
}
func (m *ByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByIdRequest proto.InternalMessageInfo

func (m *ByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ByIdRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type ByDeviceAndTaskRequest struct {
	DeviceId             string   `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	TaskId               string   `protobuf:"bytes,20,opt,name=taskId,proto3" json:"taskId,omitempty"`
	DeviceType           string   `protobuf:"bytes,30,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	ContextId            string   `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByDeviceAndTaskRequest) Reset()         { *m = ByDeviceAndTaskRequest{} }
func (m *ByDeviceAndTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ByDeviceAndTaskRequest) ProtoMessage()    {}
func (*ByDeviceAndTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{1}
}

func (m *ByDeviceAndTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByDeviceAndTaskRequest.Unmarshal(m, b)
}
func (m *ByDeviceAndTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByDeviceAndTaskRequest.Marshal(b, m, deterministic)
}
func (m *ByDeviceAndTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByDeviceAndTaskRequest.Merge(m, src)
}
func (m *ByDeviceAndTaskRequest) XXX_Size() int {
	return xxx_messageInfo_ByDeviceAndTaskRequest.Size(m)
}
func (m *ByDeviceAndTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByDeviceAndTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByDeviceAndTaskRequest proto.InternalMessageInfo

func (m *ByDeviceAndTaskRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ByDeviceAndTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ByDeviceAndTaskRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ByDeviceAndTaskRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type ByDeviceIdAndDeviceTypeAndKeyRequest struct {
	DeviceId             string   `protobuf:"bytes,10,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Key                  string   `protobuf:"bytes,20,opt,name=key,proto3" json:"key,omitempty"`
	DeviceType           string   `protobuf:"bytes,30,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) Reset()         { *m = ByDeviceIdAndDeviceTypeAndKeyRequest{} }
func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ByDeviceIdAndDeviceTypeAndKeyRequest) ProtoMessage()    {}
func (*ByDeviceIdAndDeviceTypeAndKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{2}
}

func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest.Unmarshal(m, b)
}
func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest.Marshal(b, m, deterministic)
}
func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest.Merge(m, src)
}
func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) XXX_Size() int {
	return xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest.Size(m)
}
func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByDeviceIdAndDeviceTypeAndKeyRequest proto.InternalMessageInfo

func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ByDeviceIdAndDeviceTypeAndKeyRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

type GetTemplateDeviceResponse struct {
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTemplateDeviceResponse) Reset()         { *m = GetTemplateDeviceResponse{} }
func (m *GetTemplateDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*GetTemplateDeviceResponse) ProtoMessage()    {}
func (*GetTemplateDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{3}
}

func (m *GetTemplateDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemplateDeviceResponse.Unmarshal(m, b)
}
func (m *GetTemplateDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemplateDeviceResponse.Marshal(b, m, deterministic)
}
func (m *GetTemplateDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemplateDeviceResponse.Merge(m, src)
}
func (m *GetTemplateDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_GetTemplateDeviceResponse.Size(m)
}
func (m *GetTemplateDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemplateDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemplateDeviceResponse proto.InternalMessageInfo

func (m *GetTemplateDeviceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTemplateDeviceResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WithRawConfigRequest struct {
	Cfg                  *nap.RawConfig `protobuf:"bytes,10,opt,name=cfg,proto3" json:"cfg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WithRawConfigRequest) Reset()         { *m = WithRawConfigRequest{} }
func (m *WithRawConfigRequest) String() string { return proto.CompactTextString(m) }
func (*WithRawConfigRequest) ProtoMessage()    {}
func (*WithRawConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{4}
}

func (m *WithRawConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithRawConfigRequest.Unmarshal(m, b)
}
func (m *WithRawConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithRawConfigRequest.Marshal(b, m, deterministic)
}
func (m *WithRawConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithRawConfigRequest.Merge(m, src)
}
func (m *WithRawConfigRequest) XXX_Size() int {
	return xxx_messageInfo_WithRawConfigRequest.Size(m)
}
func (m *WithRawConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithRawConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithRawConfigRequest proto.InternalMessageInfo

func (m *WithRawConfigRequest) GetCfg() *nap.RawConfig {
	if m != nil {
		return m.Cfg
	}
	return nil
}

type WithAddressAndDeviceRequest struct {
	Address              *nap.Address `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Device               string       `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string       `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WithAddressAndDeviceRequest) Reset()         { *m = WithAddressAndDeviceRequest{} }
func (m *WithAddressAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithAddressAndDeviceRequest) ProtoMessage()    {}
func (*WithAddressAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{5}
}

func (m *WithAddressAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithAddressAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithAddressAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithAddressAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithAddressAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithAddressAndDeviceRequest.Merge(m, src)
}
func (m *WithAddressAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithAddressAndDeviceRequest.Size(m)
}
func (m *WithAddressAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithAddressAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithAddressAndDeviceRequest proto.InternalMessageInfo

func (m *WithAddressAndDeviceRequest) GetAddress() *nap.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WithAddressAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithAddressAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithHitCountAndDeviceRequest struct {
	Hitcount             *nap.HitCounts `protobuf:"bytes,10,opt,name=hitcount,proto3" json:"hitcount,omitempty"`
	Device               string         `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string         `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WithHitCountAndDeviceRequest) Reset()         { *m = WithHitCountAndDeviceRequest{} }
func (m *WithHitCountAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithHitCountAndDeviceRequest) ProtoMessage()    {}
func (*WithHitCountAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{6}
}

func (m *WithHitCountAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithHitCountAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithHitCountAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithHitCountAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithHitCountAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithHitCountAndDeviceRequest.Merge(m, src)
}
func (m *WithHitCountAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithHitCountAndDeviceRequest.Size(m)
}
func (m *WithHitCountAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithHitCountAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithHitCountAndDeviceRequest proto.InternalMessageInfo

func (m *WithHitCountAndDeviceRequest) GetHitcount() *nap.HitCounts {
	if m != nil {
		return m.Hitcount
	}
	return nil
}

func (m *WithHitCountAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithHitCountAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithInterfacesAndDeviceRequest struct {
	Interfaces           *nap.Interfaces `protobuf:"bytes,10,opt,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	Device               string          `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string          `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WithInterfacesAndDeviceRequest) Reset()         { *m = WithInterfacesAndDeviceRequest{} }
func (m *WithInterfacesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithInterfacesAndDeviceRequest) ProtoMessage()    {}
func (*WithInterfacesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{7}
}

func (m *WithInterfacesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithInterfacesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithInterfacesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithInterfacesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithInterfacesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithInterfacesAndDeviceRequest.Merge(m, src)
}
func (m *WithInterfacesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithInterfacesAndDeviceRequest.Size(m)
}
func (m *WithInterfacesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithInterfacesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithInterfacesAndDeviceRequest proto.InternalMessageInfo

func (m *WithInterfacesAndDeviceRequest) GetInterfaces() *nap.Interfaces {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *WithInterfacesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithInterfacesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithZonesAndDeviceRequest struct {
	Zones                *nap.Zones `protobuf:"bytes,10,opt,name=zones,proto3" json:"zones,omitempty"`
	Device               string     `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string     `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WithZonesAndDeviceRequest) Reset()         { *m = WithZonesAndDeviceRequest{} }
func (m *WithZonesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithZonesAndDeviceRequest) ProtoMessage()    {}
func (*WithZonesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{8}
}

func (m *WithZonesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithZonesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithZonesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithZonesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithZonesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithZonesAndDeviceRequest.Merge(m, src)
}
func (m *WithZonesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithZonesAndDeviceRequest.Size(m)
}
func (m *WithZonesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithZonesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithZonesAndDeviceRequest proto.InternalMessageInfo

func (m *WithZonesAndDeviceRequest) GetZones() *nap.Zones {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *WithZonesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithZonesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithSchedulesAndDeviceRequest struct {
	Schedules            *nap.Schedules `protobuf:"bytes,10,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Device               string         `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string         `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WithSchedulesAndDeviceRequest) Reset()         { *m = WithSchedulesAndDeviceRequest{} }
func (m *WithSchedulesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithSchedulesAndDeviceRequest) ProtoMessage()    {}
func (*WithSchedulesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{9}
}

func (m *WithSchedulesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithSchedulesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithSchedulesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithSchedulesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithSchedulesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithSchedulesAndDeviceRequest.Merge(m, src)
}
func (m *WithSchedulesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithSchedulesAndDeviceRequest.Size(m)
}
func (m *WithSchedulesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithSchedulesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithSchedulesAndDeviceRequest proto.InternalMessageInfo

func (m *WithSchedulesAndDeviceRequest) GetSchedules() *nap.Schedules {
	if m != nil {
		return m.Schedules
	}
	return nil
}

func (m *WithSchedulesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithSchedulesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithServicesAndDeviceRequest struct {
	Services             *nap.Services `protobuf:"bytes,10,opt,name=services,proto3" json:"services,omitempty"`
	Device               string        `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string        `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WithServicesAndDeviceRequest) Reset()         { *m = WithServicesAndDeviceRequest{} }
func (m *WithServicesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithServicesAndDeviceRequest) ProtoMessage()    {}
func (*WithServicesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{10}
}

func (m *WithServicesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithServicesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithServicesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithServicesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithServicesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithServicesAndDeviceRequest.Merge(m, src)
}
func (m *WithServicesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithServicesAndDeviceRequest.Size(m)
}
func (m *WithServicesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithServicesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithServicesAndDeviceRequest proto.InternalMessageInfo

func (m *WithServicesAndDeviceRequest) GetServices() *nap.Services {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *WithServicesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithServicesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithRoutesAndDeviceRequest struct {
	Routes               *nap.Routes `protobuf:"bytes,10,opt,name=routes,proto3" json:"routes,omitempty"`
	Device               string      `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string      `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WithRoutesAndDeviceRequest) Reset()         { *m = WithRoutesAndDeviceRequest{} }
func (m *WithRoutesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithRoutesAndDeviceRequest) ProtoMessage()    {}
func (*WithRoutesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{11}
}

func (m *WithRoutesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithRoutesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithRoutesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithRoutesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithRoutesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithRoutesAndDeviceRequest.Merge(m, src)
}
func (m *WithRoutesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithRoutesAndDeviceRequest.Size(m)
}
func (m *WithRoutesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithRoutesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithRoutesAndDeviceRequest proto.InternalMessageInfo

func (m *WithRoutesAndDeviceRequest) GetRoutes() *nap.Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *WithRoutesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithRoutesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithPoliciesAndDeviceRequest struct {
	Policies             *nap.Policies `protobuf:"bytes,10,opt,name=policies,proto3" json:"policies,omitempty"`
	Device               string        `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string        `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WithPoliciesAndDeviceRequest) Reset()         { *m = WithPoliciesAndDeviceRequest{} }
func (m *WithPoliciesAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithPoliciesAndDeviceRequest) ProtoMessage()    {}
func (*WithPoliciesAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{12}
}

func (m *WithPoliciesAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithPoliciesAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithPoliciesAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithPoliciesAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithPoliciesAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithPoliciesAndDeviceRequest.Merge(m, src)
}
func (m *WithPoliciesAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithPoliciesAndDeviceRequest.Size(m)
}
func (m *WithPoliciesAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithPoliciesAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithPoliciesAndDeviceRequest proto.InternalMessageInfo

func (m *WithPoliciesAndDeviceRequest) GetPolicies() *nap.Policies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *WithPoliciesAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithPoliciesAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithApplicationsAndDeviceRequest struct {
	Applications         *nap.Applications `protobuf:"bytes,10,opt,name=applications,proto3" json:"applications,omitempty"`
	Device               string            `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	AppDirectoryId       string            `protobuf:"bytes,30,opt,name=appDirectoryId,proto3" json:"appDirectoryId,omitempty"`
	ContextId            string            `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WithApplicationsAndDeviceRequest) Reset()         { *m = WithApplicationsAndDeviceRequest{} }
func (m *WithApplicationsAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithApplicationsAndDeviceRequest) ProtoMessage()    {}
func (*WithApplicationsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{13}
}

func (m *WithApplicationsAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithApplicationsAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithApplicationsAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithApplicationsAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithApplicationsAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithApplicationsAndDeviceRequest.Merge(m, src)
}
func (m *WithApplicationsAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithApplicationsAndDeviceRequest.Size(m)
}
func (m *WithApplicationsAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithApplicationsAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithApplicationsAndDeviceRequest proto.InternalMessageInfo

func (m *WithApplicationsAndDeviceRequest) GetApplications() *nap.Applications {
	if m != nil {
		return m.Applications
	}
	return nil
}

func (m *WithApplicationsAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithApplicationsAndDeviceRequest) GetAppDirectoryId() string {
	if m != nil {
		return m.AppDirectoryId
	}
	return ""
}

func (m *WithApplicationsAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type WithUserIDsAndDeviceRequest struct {
	UserIDs              *nap.UserIDs `protobuf:"bytes,10,opt,name=userIDs,proto3" json:"userIDs,omitempty"`
	Device               string       `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	ContextId            string       `protobuf:"bytes,30,opt,name=contextId,proto3" json:"contextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WithUserIDsAndDeviceRequest) Reset()         { *m = WithUserIDsAndDeviceRequest{} }
func (m *WithUserIDsAndDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*WithUserIDsAndDeviceRequest) ProtoMessage()    {}
func (*WithUserIDsAndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{14}
}

func (m *WithUserIDsAndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithUserIDsAndDeviceRequest.Unmarshal(m, b)
}
func (m *WithUserIDsAndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithUserIDsAndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *WithUserIDsAndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithUserIDsAndDeviceRequest.Merge(m, src)
}
func (m *WithUserIDsAndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_WithUserIDsAndDeviceRequest.Size(m)
}
func (m *WithUserIDsAndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithUserIDsAndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithUserIDsAndDeviceRequest proto.InternalMessageInfo

func (m *WithUserIDsAndDeviceRequest) GetUserIDs() *nap.UserIDs {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func (m *WithUserIDsAndDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *WithUserIDsAndDeviceRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

type ByDeviceAndPageRequest struct {
	Device               string   `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
	Page                 int32    `protobuf:"varint,20,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int32    `protobuf:"varint,30,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByDeviceAndPageRequest) Reset()         { *m = ByDeviceAndPageRequest{} }
func (m *ByDeviceAndPageRequest) String() string { return proto.CompactTextString(m) }
func (*ByDeviceAndPageRequest) ProtoMessage()    {}
func (*ByDeviceAndPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{15}
}

func (m *ByDeviceAndPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByDeviceAndPageRequest.Unmarshal(m, b)
}
func (m *ByDeviceAndPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByDeviceAndPageRequest.Marshal(b, m, deterministic)
}
func (m *ByDeviceAndPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByDeviceAndPageRequest.Merge(m, src)
}
func (m *ByDeviceAndPageRequest) XXX_Size() int {
	return xxx_messageInfo_ByDeviceAndPageRequest.Size(m)
}
func (m *ByDeviceAndPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByDeviceAndPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByDeviceAndPageRequest proto.InternalMessageInfo

func (m *ByDeviceAndPageRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ByDeviceAndPageRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ByDeviceAndPageRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PullDeviceConfigResponse struct {
	Result               nap.PullResult `protobuf:"varint,10,opt,name=result,proto3,enum=nap.PullResult" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PullDeviceConfigResponse) Reset()         { *m = PullDeviceConfigResponse{} }
func (m *PullDeviceConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PullDeviceConfigResponse) ProtoMessage()    {}
func (*PullDeviceConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{16}
}

func (m *PullDeviceConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDeviceConfigResponse.Unmarshal(m, b)
}
func (m *PullDeviceConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDeviceConfigResponse.Marshal(b, m, deterministic)
}
func (m *PullDeviceConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDeviceConfigResponse.Merge(m, src)
}
func (m *PullDeviceConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PullDeviceConfigResponse.Size(m)
}
func (m *PullDeviceConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDeviceConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullDeviceConfigResponse proto.InternalMessageInfo

func (m *PullDeviceConfigResponse) GetResult() nap.PullResult {
	if m != nil {
		return m.Result
	}
	return nap.PullResult_UPDATED
}

type ListRawConfigResponse struct {
	PageInfo             *common.PageInfo `protobuf:"bytes,10,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	Items                []*nap.RawConfig `protobuf:"bytes,20,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRawConfigResponse) Reset()         { *m = ListRawConfigResponse{} }
func (m *ListRawConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ListRawConfigResponse) ProtoMessage()    {}
func (*ListRawConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{17}
}

func (m *ListRawConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRawConfigResponse.Unmarshal(m, b)
}
func (m *ListRawConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRawConfigResponse.Marshal(b, m, deterministic)
}
func (m *ListRawConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRawConfigResponse.Merge(m, src)
}
func (m *ListRawConfigResponse) XXX_Size() int {
	return xxx_messageInfo_ListRawConfigResponse.Size(m)
}
func (m *ListRawConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRawConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRawConfigResponse proto.InternalMessageInfo

func (m *ListRawConfigResponse) GetPageInfo() *common.PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *ListRawConfigResponse) GetItems() []*nap.RawConfig {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetRawConfigResponse struct {
	Cfg                  *nap.RawConfig `protobuf:"bytes,10,opt,name=cfg,proto3" json:"cfg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRawConfigResponse) Reset()         { *m = GetRawConfigResponse{} }
func (m *GetRawConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetRawConfigResponse) ProtoMessage()    {}
func (*GetRawConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{18}
}

func (m *GetRawConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRawConfigResponse.Unmarshal(m, b)
}
func (m *GetRawConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRawConfigResponse.Marshal(b, m, deterministic)
}
func (m *GetRawConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRawConfigResponse.Merge(m, src)
}
func (m *GetRawConfigResponse) XXX_Size() int {
	return xxx_messageInfo_GetRawConfigResponse.Size(m)
}
func (m *GetRawConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRawConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRawConfigResponse proto.InternalMessageInfo

func (m *GetRawConfigResponse) GetCfg() *nap.RawConfig {
	if m != nil {
		return m.Cfg
	}
	return nil
}

type SendDeviceStateRequest struct {
	DeviceId             string   `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	TaskType             string   `protobuf:"bytes,20,opt,name=taskType,proto3" json:"taskType,omitempty"`
	DeviceState          string   `protobuf:"bytes,30,opt,name=deviceState,proto3" json:"deviceState,omitempty"`
	ContextId            string   `protobuf:"bytes,40,opt,name=contextId,proto3" json:"contextId,omitempty"`
	Message              string   `protobuf:"bytes,50,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendDeviceStateRequest) Reset()         { *m = SendDeviceStateRequest{} }
func (m *SendDeviceStateRequest) String() string { return proto.CompactTextString(m) }
func (*SendDeviceStateRequest) ProtoMessage()    {}
func (*SendDeviceStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{19}
}

func (m *SendDeviceStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendDeviceStateRequest.Unmarshal(m, b)
}
func (m *SendDeviceStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendDeviceStateRequest.Marshal(b, m, deterministic)
}
func (m *SendDeviceStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendDeviceStateRequest.Merge(m, src)
}
func (m *SendDeviceStateRequest) XXX_Size() int {
	return xxx_messageInfo_SendDeviceStateRequest.Size(m)
}
func (m *SendDeviceStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendDeviceStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendDeviceStateRequest proto.InternalMessageInfo

func (m *SendDeviceStateRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *SendDeviceStateRequest) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *SendDeviceStateRequest) GetDeviceState() string {
	if m != nil {
		return m.DeviceState
	}
	return ""
}

func (m *SendDeviceStateRequest) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *SendDeviceStateRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CleanRawConfigRequest struct {
	DeviceId             string   `protobuf:"bytes,10,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	MaxSize              int32    `protobuf:"varint,20,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	SizeEnable           bool     `protobuf:"varint,30,opt,name=sizeEnable,proto3" json:"sizeEnable,omitempty"`
	MaxDay               int32    `protobuf:"varint,40,opt,name=maxDay,proto3" json:"maxDay,omitempty"`
	DayEnable            bool     `protobuf:"varint,50,opt,name=dayEnable,proto3" json:"dayEnable,omitempty"`
	TimeType             TimeType `protobuf:"varint,60,opt,name=timeType,proto3,enum=rpc.TimeType" json:"timeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanRawConfigRequest) Reset()         { *m = CleanRawConfigRequest{} }
func (m *CleanRawConfigRequest) String() string { return proto.CompactTextString(m) }
func (*CleanRawConfigRequest) ProtoMessage()    {}
func (*CleanRawConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{20}
}

func (m *CleanRawConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanRawConfigRequest.Unmarshal(m, b)
}
func (m *CleanRawConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanRawConfigRequest.Marshal(b, m, deterministic)
}
func (m *CleanRawConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanRawConfigRequest.Merge(m, src)
}
func (m *CleanRawConfigRequest) XXX_Size() int {
	return xxx_messageInfo_CleanRawConfigRequest.Size(m)
}
func (m *CleanRawConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanRawConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CleanRawConfigRequest proto.InternalMessageInfo

func (m *CleanRawConfigRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CleanRawConfigRequest) GetMaxSize() int32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *CleanRawConfigRequest) GetSizeEnable() bool {
	if m != nil {
		return m.SizeEnable
	}
	return false
}

func (m *CleanRawConfigRequest) GetMaxDay() int32 {
	if m != nil {
		return m.MaxDay
	}
	return 0
}

func (m *CleanRawConfigRequest) GetDayEnable() bool {
	if m != nil {
		return m.DayEnable
	}
	return false
}

func (m *CleanRawConfigRequest) GetTimeType() TimeType {
	if m != nil {
		return m.TimeType
	}
	return TimeType_DAY
}

type CleanRawConfigResponse struct {
	Result               CleanResult `protobuf:"varint,10,opt,name=result,proto3,enum=rpc.CleanResult" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CleanRawConfigResponse) Reset()         { *m = CleanRawConfigResponse{} }
func (m *CleanRawConfigResponse) String() string { return proto.CompactTextString(m) }
func (*CleanRawConfigResponse) ProtoMessage()    {}
func (*CleanRawConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{21}
}

func (m *CleanRawConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanRawConfigResponse.Unmarshal(m, b)
}
func (m *CleanRawConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanRawConfigResponse.Marshal(b, m, deterministic)
}
func (m *CleanRawConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanRawConfigResponse.Merge(m, src)
}
func (m *CleanRawConfigResponse) XXX_Size() int {
	return xxx_messageInfo_CleanRawConfigResponse.Size(m)
}
func (m *CleanRawConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanRawConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CleanRawConfigResponse proto.InternalMessageInfo

func (m *CleanRawConfigResponse) GetResult() CleanResult {
	if m != nil {
		return m.Result
	}
	return CleanResult_SUCCEED
}

type ImportAddressesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportAddressesResponse) Reset()         { *m = ImportAddressesResponse{} }
func (m *ImportAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportAddressesResponse) ProtoMessage()    {}
func (*ImportAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{22}
}

func (m *ImportAddressesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportAddressesResponse.Unmarshal(m, b)
}
func (m *ImportAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportAddressesResponse.Marshal(b, m, deterministic)
}
func (m *ImportAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAddressesResponse.Merge(m, src)
}
func (m *ImportAddressesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportAddressesResponse.Size(m)
}
func (m *ImportAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAddressesResponse proto.InternalMessageInfo

type ImportInterfacesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportInterfacesResponse) Reset()         { *m = ImportInterfacesResponse{} }
func (m *ImportInterfacesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportInterfacesResponse) ProtoMessage()    {}
func (*ImportInterfacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{23}
}

func (m *ImportInterfacesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportInterfacesResponse.Unmarshal(m, b)
}
func (m *ImportInterfacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportInterfacesResponse.Marshal(b, m, deterministic)
}
func (m *ImportInterfacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportInterfacesResponse.Merge(m, src)
}
func (m *ImportInterfacesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportInterfacesResponse.Size(m)
}
func (m *ImportInterfacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportInterfacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportInterfacesResponse proto.InternalMessageInfo

type ImportZonesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportZonesResponse) Reset()         { *m = ImportZonesResponse{} }
func (m *ImportZonesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportZonesResponse) ProtoMessage()    {}
func (*ImportZonesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{24}
}

func (m *ImportZonesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportZonesResponse.Unmarshal(m, b)
}
func (m *ImportZonesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportZonesResponse.Marshal(b, m, deterministic)
}
func (m *ImportZonesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportZonesResponse.Merge(m, src)
}
func (m *ImportZonesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportZonesResponse.Size(m)
}
func (m *ImportZonesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportZonesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportZonesResponse proto.InternalMessageInfo

type ImportSchedulesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportSchedulesResponse) Reset()         { *m = ImportSchedulesResponse{} }
func (m *ImportSchedulesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportSchedulesResponse) ProtoMessage()    {}
func (*ImportSchedulesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{25}
}

func (m *ImportSchedulesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportSchedulesResponse.Unmarshal(m, b)
}
func (m *ImportSchedulesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportSchedulesResponse.Marshal(b, m, deterministic)
}
func (m *ImportSchedulesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportSchedulesResponse.Merge(m, src)
}
func (m *ImportSchedulesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportSchedulesResponse.Size(m)
}
func (m *ImportSchedulesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportSchedulesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportSchedulesResponse proto.InternalMessageInfo

type ImportServicesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportServicesResponse) Reset()         { *m = ImportServicesResponse{} }
func (m *ImportServicesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportServicesResponse) ProtoMessage()    {}
func (*ImportServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{26}
}

func (m *ImportServicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportServicesResponse.Unmarshal(m, b)
}
func (m *ImportServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportServicesResponse.Marshal(b, m, deterministic)
}
func (m *ImportServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportServicesResponse.Merge(m, src)
}
func (m *ImportServicesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportServicesResponse.Size(m)
}
func (m *ImportServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportServicesResponse proto.InternalMessageInfo

type ImportRoutesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportRoutesResponse) Reset()         { *m = ImportRoutesResponse{} }
func (m *ImportRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportRoutesResponse) ProtoMessage()    {}
func (*ImportRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{27}
}

func (m *ImportRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportRoutesResponse.Unmarshal(m, b)
}
func (m *ImportRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportRoutesResponse.Marshal(b, m, deterministic)
}
func (m *ImportRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportRoutesResponse.Merge(m, src)
}
func (m *ImportRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportRoutesResponse.Size(m)
}
func (m *ImportRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportRoutesResponse proto.InternalMessageInfo

type ImportPoliciesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportPoliciesResponse) Reset()         { *m = ImportPoliciesResponse{} }
func (m *ImportPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ImportPoliciesResponse) ProtoMessage()    {}
func (*ImportPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{28}
}

func (m *ImportPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportPoliciesResponse.Unmarshal(m, b)
}
func (m *ImportPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ImportPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPoliciesResponse.Merge(m, src)
}
func (m *ImportPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ImportPoliciesResponse.Size(m)
}
func (m *ImportPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPoliciesResponse proto.InternalMessageInfo

type ImportApplicationsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportApplicationsResponse) Reset()         { *m = ImportApplicationsResponse{} }
func (m *ImportApplicationsResponse) String() string { return proto.CompactTextString(m) }
func (*ImportApplicationsResponse) ProtoMessage()    {}
func (*ImportApplicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{29}
}

func (m *ImportApplicationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportApplicationsResponse.Unmarshal(m, b)
}
func (m *ImportApplicationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportApplicationsResponse.Marshal(b, m, deterministic)
}
func (m *ImportApplicationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportApplicationsResponse.Merge(m, src)
}
func (m *ImportApplicationsResponse) XXX_Size() int {
	return xxx_messageInfo_ImportApplicationsResponse.Size(m)
}
func (m *ImportApplicationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportApplicationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportApplicationsResponse proto.InternalMessageInfo

type ImportHitCountsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportHitCountsResponse) Reset()         { *m = ImportHitCountsResponse{} }
func (m *ImportHitCountsResponse) String() string { return proto.CompactTextString(m) }
func (*ImportHitCountsResponse) ProtoMessage()    {}
func (*ImportHitCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{30}
}

func (m *ImportHitCountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportHitCountsResponse.Unmarshal(m, b)
}
func (m *ImportHitCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportHitCountsResponse.Marshal(b, m, deterministic)
}
func (m *ImportHitCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportHitCountsResponse.Merge(m, src)
}
func (m *ImportHitCountsResponse) XXX_Size() int {
	return xxx_messageInfo_ImportHitCountsResponse.Size(m)
}
func (m *ImportHitCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportHitCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportHitCountsResponse proto.InternalMessageInfo

type ImportUserIDsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportUserIDsResponse) Reset()         { *m = ImportUserIDsResponse{} }
func (m *ImportUserIDsResponse) String() string { return proto.CompactTextString(m) }
func (*ImportUserIDsResponse) ProtoMessage()    {}
func (*ImportUserIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{31}
}

func (m *ImportUserIDsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportUserIDsResponse.Unmarshal(m, b)
}
func (m *ImportUserIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportUserIDsResponse.Marshal(b, m, deterministic)
}
func (m *ImportUserIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportUserIDsResponse.Merge(m, src)
}
func (m *ImportUserIDsResponse) XXX_Size() int {
	return xxx_messageInfo_ImportUserIDsResponse.Size(m)
}
func (m *ImportUserIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportUserIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportUserIDsResponse proto.InternalMessageInfo

type SendDeviceStateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendDeviceStateResponse) Reset()         { *m = SendDeviceStateResponse{} }
func (m *SendDeviceStateResponse) String() string { return proto.CompactTextString(m) }
func (*SendDeviceStateResponse) ProtoMessage()    {}
func (*SendDeviceStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c3cd0e8040154f4, []int{32}
}

func (m *SendDeviceStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendDeviceStateResponse.Unmarshal(m, b)
}
func (m *SendDeviceStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendDeviceStateResponse.Marshal(b, m, deterministic)
}
func (m *SendDeviceStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendDeviceStateResponse.Merge(m, src)
}
func (m *SendDeviceStateResponse) XXX_Size() int {
	return xxx_messageInfo_SendDeviceStateResponse.Size(m)
}
func (m *SendDeviceStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendDeviceStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendDeviceStateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("rpc.TimeType", TimeType_name, TimeType_value)
	proto.RegisterEnum("rpc.CleanResult", CleanResult_name, CleanResult_value)
	proto.RegisterType((*ByIdRequest)(nil), "rpc.ByIdRequest")
	proto.RegisterType((*ByDeviceAndTaskRequest)(nil), "rpc.ByDeviceAndTaskRequest")
	proto.RegisterType((*ByDeviceIdAndDeviceTypeAndKeyRequest)(nil), "rpc.ByDeviceIdAndDeviceTypeAndKeyRequest")
	proto.RegisterType((*GetTemplateDeviceResponse)(nil), "rpc.GetTemplateDeviceResponse")
	proto.RegisterType((*WithRawConfigRequest)(nil), "rpc.WithRawConfigRequest")
	proto.RegisterType((*WithAddressAndDeviceRequest)(nil), "rpc.WithAddressAndDeviceRequest")
	proto.RegisterType((*WithHitCountAndDeviceRequest)(nil), "rpc.WithHitCountAndDeviceRequest")
	proto.RegisterType((*WithInterfacesAndDeviceRequest)(nil), "rpc.WithInterfacesAndDeviceRequest")
	proto.RegisterType((*WithZonesAndDeviceRequest)(nil), "rpc.WithZonesAndDeviceRequest")
	proto.RegisterType((*WithSchedulesAndDeviceRequest)(nil), "rpc.WithSchedulesAndDeviceRequest")
	proto.RegisterType((*WithServicesAndDeviceRequest)(nil), "rpc.WithServicesAndDeviceRequest")
	proto.RegisterType((*WithRoutesAndDeviceRequest)(nil), "rpc.WithRoutesAndDeviceRequest")
	proto.RegisterType((*WithPoliciesAndDeviceRequest)(nil), "rpc.WithPoliciesAndDeviceRequest")
	proto.RegisterType((*WithApplicationsAndDeviceRequest)(nil), "rpc.WithApplicationsAndDeviceRequest")
	proto.RegisterType((*WithUserIDsAndDeviceRequest)(nil), "rpc.WithUserIDsAndDeviceRequest")
	proto.RegisterType((*ByDeviceAndPageRequest)(nil), "rpc.ByDeviceAndPageRequest")
	proto.RegisterType((*PullDeviceConfigResponse)(nil), "rpc.PullDeviceConfigResponse")
	proto.RegisterType((*ListRawConfigResponse)(nil), "rpc.ListRawConfigResponse")
	proto.RegisterType((*GetRawConfigResponse)(nil), "rpc.GetRawConfigResponse")
	proto.RegisterType((*SendDeviceStateRequest)(nil), "rpc.SendDeviceStateRequest")
	proto.RegisterType((*CleanRawConfigRequest)(nil), "rpc.CleanRawConfigRequest")
	proto.RegisterType((*CleanRawConfigResponse)(nil), "rpc.CleanRawConfigResponse")
	proto.RegisterType((*ImportAddressesResponse)(nil), "rpc.ImportAddressesResponse")
	proto.RegisterType((*ImportInterfacesResponse)(nil), "rpc.ImportInterfacesResponse")
	proto.RegisterType((*ImportZonesResponse)(nil), "rpc.ImportZonesResponse")
	proto.RegisterType((*ImportSchedulesResponse)(nil), "rpc.ImportSchedulesResponse")
	proto.RegisterType((*ImportServicesResponse)(nil), "rpc.ImportServicesResponse")
	proto.RegisterType((*ImportRoutesResponse)(nil), "rpc.ImportRoutesResponse")
	proto.RegisterType((*ImportPoliciesResponse)(nil), "rpc.ImportPoliciesResponse")
	proto.RegisterType((*ImportApplicationsResponse)(nil), "rpc.ImportApplicationsResponse")
	proto.RegisterType((*ImportHitCountsResponse)(nil), "rpc.ImportHitCountsResponse")
	proto.RegisterType((*ImportUserIDsResponse)(nil), "rpc.ImportUserIDsResponse")
	proto.RegisterType((*SendDeviceStateResponse)(nil), "rpc.SendDeviceStateResponse")
}

func init() { proto.RegisterFile("src/grpc/nap.proto", fileDescriptor_2c3cd0e8040154f4) }

var fileDescriptor_2c3cd0e8040154f4 = []byte{
	// 1612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x6f, 0xdb, 0xc6,
	0x12, 0xa6, 0x7c, 0x95, 0xc7, 0x37, 0x7a, 0x63, 0x3b, 0x32, 0xed, 0x38, 0x3e, 0xcc, 0xe5, 0x24,
	0xc1, 0x89, 0x84, 0xa3, 0x83, 0x03, 0x14, 0x68, 0x8b, 0x56, 0x96, 0xd4, 0x44, 0xb9, 0xc8, 0x06,
	0x25, 0xa3, 0x69, 0x0a, 0x34, 0xa5, 0xc9, 0xb5, 0xcc, 0x8a, 0x22, 0x59, 0x92, 0x72, 0xac, 0xf4,
	0xa1, 0x05, 0xfa, 0x50, 0xa0, 0x3f, 0xa5, 0x2f, 0x7d, 0xec, 0xbf, 0x28, 0xd0, 0xff, 0xd3, 0x87,
	0x62, 0x6f, 0xbc, 0x88, 0x94, 0xd3, 0xa8, 0x79, 0x13, 0xe7, 0xdb, 0x9d, 0xf9, 0x76, 0x67, 0x76,
	0xbe, 0x5d, 0x01, 0x0a, 0x7c, 0xa3, 0xd2, 0xf3, 0x3d, 0xa3, 0xe2, 0xe8, 0x5e, 0xd9, 0xf3, 0xdd,
	0xd0, 0x45, 0xb3, 0xbe, 0x67, 0x28, 0x5b, 0x04, 0x30, 0xdc, 0xc1, 0xc0, 0x75, 0x2a, 0x83, 0xa0,
	0x17, 0x30, 0x2c, 0x65, 0xf6, 0xf4, 0x1e, 0xe6, 0xe6, 0x0d, 0x62, 0x76, 0x74, 0x2f, 0xf6, 0xa2,
	0x7e, 0x08, 0xcb, 0x87, 0xa3, 0x96, 0xa9, 0xe1, 0x6f, 0x87, 0x38, 0x08, 0xd1, 0x1a, 0xcc, 0x58,
	0x66, 0x09, 0x0e, 0x0a, 0xf7, 0x96, 0xb4, 0x19, 0xcb, 0x44, 0x7b, 0xb0, 0x64, 0xb8, 0x4e, 0x88,
	0x2f, 0xc3, 0x96, 0x59, 0xda, 0xa4, 0xe6, 0xd8, 0xa0, 0xfe, 0x5c, 0x80, 0xed, 0xc3, 0x51, 0x03,
	0x5f, 0x58, 0x06, 0xae, 0x39, 0x66, 0x57, 0x0f, 0xfa, 0xc2, 0x91, 0x02, 0x45, 0x93, 0xda, 0x5b,
	0xc2, 0x5d, 0xf4, 0x8d, 0xb6, 0x61, 0x21, 0xd4, 0x83, 0x7e, 0xe4, 0x91, 0x7f, 0xa1, 0x7d, 0x00,
	0x36, 0xa6, 0x3b, 0xf2, 0x70, 0x69, 0x9f, 0x62, 0x09, 0x4b, 0x9a, 0xcc, 0xbd, 0x71, 0x32, 0x17,
	0x70, 0x5b, 0x70, 0x69, 0x99, 0x35, 0xc7, 0x6c, 0x44, 0x13, 0x6b, 0x8e, 0xf9, 0x14, 0x8f, 0x04,
	0xb3, 0x5d, 0x58, 0x62, 0x3e, 0x5f, 0x59, 0x59, 0x6a, 0x32, 0xcc, 0xf6, 0xf1, 0x88, 0xf3, 0x22,
	0x3f, 0xd1, 0x4d, 0x58, 0xe6, 0xc3, 0xc3, 0x5c, 0x56, 0x6a, 0x13, 0x76, 0x1e, 0xe1, 0xb0, 0x8b,
	0x07, 0x9e, 0xad, 0x87, 0x98, 0x45, 0xd5, 0x70, 0xe0, 0xb9, 0x4e, 0x80, 0x11, 0x82, 0x39, 0x47,
	0x1f, 0x60, 0x1e, 0x87, 0xfe, 0x46, 0x9b, 0x30, 0x7f, 0xa1, 0xdb, 0x43, 0xcc, 0xa3, 0xb0, 0x0f,
	0xf5, 0x03, 0xd8, 0xfc, 0xdc, 0x0a, 0xcf, 0x35, 0xfd, 0x75, 0xdd, 0x75, 0xce, 0xac, 0x9e, 0xa0,
	0x7b, 0x00, 0xb3, 0xc6, 0x59, 0x8f, 0x3a, 0x58, 0xae, 0xae, 0x95, 0x49, 0xe6, 0xe2, 0x31, 0x04,
	0x52, 0xbf, 0x83, 0x5d, 0x32, 0xb3, 0x66, 0x9a, 0x3e, 0x0e, 0x82, 0x68, 0xe5, 0xc2, 0xc1, 0x5d,
	0x58, 0xd4, 0x19, 0xc4, 0x9d, 0xac, 0x50, 0x27, 0x7c, 0xb8, 0x26, 0x40, 0x92, 0x15, 0xb6, 0x2a,
	0x91, 0x15, 0xf6, 0x95, 0xde, 0xf5, 0xfd, 0xf1, 0x5d, 0xff, 0xa1, 0x00, 0x7b, 0x24, 0xfa, 0x63,
	0x2b, 0xac, 0xbb, 0x43, 0x27, 0xcc, 0x84, 0x7f, 0x00, 0xc5, 0x73, 0x2b, 0x34, 0x08, 0x96, 0x5a,
	0x84, 0x98, 0x10, 0x68, 0x11, 0x3e, 0x25, 0x85, 0x9f, 0x0a, 0xb0, 0x4f, 0x28, 0xb4, 0x9c, 0x10,
	0xfb, 0x67, 0xba, 0x81, 0xb3, 0x7b, 0x50, 0x01, 0x88, 0x51, 0x4e, 0x63, 0x9d, 0xd2, 0x88, 0xcd,
	0x5a, 0x62, 0xc8, 0x94, 0x4c, 0x02, 0xd8, 0x21, 0x44, 0x5e, 0xba, 0x4e, 0x0e, 0x87, 0x03, 0x98,
	0x7f, 0x43, 0x00, 0x1e, 0x1e, 0x68, 0x78, 0x3a, 0x54, 0x63, 0xc0, 0x94, 0x41, 0x7f, 0x2c, 0xc0,
	0x0d, 0x12, 0xb5, 0x63, 0x9c, 0x63, 0x73, 0x68, 0xe7, 0x44, 0xfe, 0x0f, 0x2c, 0x05, 0x02, 0x4c,
	0xe5, 0x20, 0x9a, 0xa2, 0xc5, 0x03, 0xa6, 0x64, 0xf1, 0x3d, 0x2b, 0x83, 0x0e, 0xf6, 0xc9, 0xe0,
	0x2c, 0x87, 0xfb, 0x50, 0x0c, 0x38, 0xc6, 0x29, 0xac, 0x32, 0x0a, 0xdc, 0xa8, 0x45, 0xf0, 0x94,
	0x04, 0x5e, 0x83, 0x42, 0xcf, 0x8f, 0x3b, 0x0c, 0x73, 0xc2, 0xdf, 0x82, 0x05, 0x9f, 0x22, 0x3c,
	0xf8, 0x32, 0x3b, 0x48, 0xd4, 0xa4, 0x71, 0xe8, 0x9f, 0xad, 0xfc, 0xd8, 0xb5, 0x2d, 0xc3, 0xca,
	0x5f, 0xb9, 0xc7, 0xb1, 0xd4, 0xca, 0xc5, 0x04, 0x2d, 0x82, 0xa7, 0x24, 0xf0, 0x5b, 0x01, 0x0e,
	0x68, 0x03, 0xf0, 0x3c, 0xdb, 0x32, 0xf4, 0xd0, 0x72, 0x9d, 0x2c, 0x8b, 0xff, 0xc3, 0x8a, 0x9e,
	0xc0, 0x39, 0x93, 0x0d, 0xd6, 0x0a, 0x12, 0x80, 0x96, 0x1a, 0x36, 0x91, 0xd1, 0x5d, 0x58, 0xd3,
	0x3d, 0xaf, 0x61, 0xf9, 0xd8, 0x08, 0x5d, 0x7f, 0x14, 0xd1, 0x1a, 0xb3, 0xbe, 0xa5, 0x65, 0xf3,
	0xce, 0x75, 0x12, 0x60, 0xbf, 0xd5, 0xc8, 0xed, 0x5c, 0x43, 0x06, 0xa5, 0x3a, 0x17, 0x1f, 0xae,
	0x09, 0x70, 0xca, 0x6d, 0x7b, 0x91, 0xd2, 0xae, 0x63, 0xbd, 0x17, 0xc5, 0x8d, 0xfd, 0x41, 0xca,
	0x1f, 0x82, 0x39, 0x22, 0xa6, 0x34, 0xca, 0xbc, 0x46, 0x7f, 0x13, 0x5b, 0x60, 0xbd, 0x61, 0xba,
	0x30, 0xaf, 0xd1, 0xdf, 0x6a, 0x1d, 0x4a, 0xc7, 0x43, 0xdb, 0x66, 0xbe, 0x45, 0x37, 0xe7, 0x82,
	0xf0, 0x6f, 0x58, 0xf0, 0x71, 0x30, 0xb4, 0x59, 0x33, 0x5c, 0xe3, 0x5d, 0x88, 0x0c, 0xd7, 0xa8,
	0x59, 0xe3, 0xb0, 0x6a, 0xc3, 0xd6, 0x33, 0x2b, 0x08, 0x13, 0x7a, 0xc0, 0x3d, 0x3c, 0x84, 0x25,
	0x12, 0xf9, 0x95, 0xe5, 0x9c, 0xb9, 0x7c, 0x5f, 0xe4, 0x32, 0xd3, 0xfa, 0x32, 0x59, 0x45, 0xcb,
	0x39, 0x73, 0xb5, 0xa2, 0xc7, 0x7f, 0xa1, 0xdb, 0x30, 0x6f, 0x85, 0x78, 0x10, 0x94, 0x36, 0x0f,
	0x66, 0x73, 0x14, 0x84, 0x81, 0x44, 0x7d, 0x1e, 0xe1, 0x9c, 0x60, 0x6f, 0x57, 0x9f, 0x5f, 0x0a,
	0xb0, 0xdd, 0xc1, 0x22, 0x75, 0x9d, 0x50, 0x0f, 0xf1, 0xdf, 0xb9, 0x03, 0x28, 0x50, 0x24, 0xaa,
	0x4f, 0x95, 0x9e, 0x65, 0x2d, 0xfa, 0x46, 0x07, 0x42, 0x72, 0xa9, 0x37, 0x9e, 0xb9, 0xa4, 0xe9,
	0xea, 0xb2, 0x42, 0x25, 0x58, 0x1c, 0xe0, 0x20, 0x20, 0xa9, 0xaa, 0x52, 0x4c, 0x7c, 0xaa, 0xbf,
	0x17, 0x60, 0xab, 0x6e, 0x63, 0xdd, 0xc9, 0xc8, 0xec, 0x55, 0x5c, 0x89, 0x3f, 0xfd, 0xb2, 0x43,
	0xd2, 0xcc, 0x52, 0x2f, 0x3e, 0xc9, 0x8d, 0x85, 0x64, 0xbc, 0xe9, 0xe8, 0xa7, 0x36, 0x23, 0x5a,
	0xd4, 0x12, 0x16, 0x52, 0x49, 0x03, 0xfd, 0xb2, 0xa1, 0x8f, 0x28, 0xc9, 0x79, 0x8d, 0x7f, 0x11,
	0xfe, 0xa6, 0x3e, 0xe2, 0xd3, 0xaa, 0x74, 0x5a, 0x6c, 0x20, 0x1d, 0x23, 0xb4, 0x06, 0xec, 0x16,
	0xf4, 0x11, 0xad, 0x92, 0xd5, 0xb2, 0xef, 0x19, 0xe5, 0x2e, 0x37, 0x6a, 0x11, 0xac, 0x1e, 0xc2,
	0xf6, 0xf8, 0x7a, 0x78, 0xe6, 0xee, 0x8d, 0x15, 0x9a, 0x4c, 0x5d, 0xb0, 0xc1, 0xe9, 0x4a, 0xdb,
	0x81, 0xeb, 0xad, 0x81, 0xe7, 0xfa, 0x21, 0xbf, 0x12, 0xe0, 0x40, 0x38, 0x51, 0x15, 0x28, 0x31,
	0x28, 0x21, 0x93, 0x02, 0xdb, 0x82, 0x6b, 0x0c, 0x63, 0x1a, 0x26, 0xcc, 0x91, 0xb7, 0x58, 0x5c,
	0x04, 0x54, 0x82, 0x6d, 0x0e, 0x89, 0xa6, 0x2f, 0x90, 0x6d, 0xd8, 0x64, 0x08, 0xef, 0xc8, 0x99,
	0x19, 0x51, 0xb3, 0x14, 0xc8, 0x1e, 0x28, 0x9c, 0x74, 0xb2, 0x79, 0x65, 0x48, 0xc4, 0xb7, 0x0c,
	0x01, 0x5d, 0x87, 0x2d, 0x06, 0x89, 0x36, 0x92, 0x98, 0x93, 0xa9, 0x63, 0x06, 0x3d, 0xf8, 0x14,
	0x8a, 0x62, 0xef, 0xd1, 0x22, 0xcc, 0x36, 0x6a, 0x5f, 0xc8, 0x12, 0x2a, 0xc2, 0xdc, 0xe3, 0xa3,
	0x13, 0x4d, 0x2e, 0x20, 0x80, 0x85, 0xe7, 0xad, 0xf6, 0x49, 0xb7, 0x29, 0xcf, 0x90, 0xdf, 0x9d,
	0x66, 0xfd, 0xa8, 0xdd, 0x90, 0x67, 0xd1, 0x12, 0xcc, 0x3f, 0x3f, 0x6a, 0x77, 0x1f, 0xcb, 0x73,
	0x0f, 0xee, 0xc2, 0x72, 0x62, 0xeb, 0xd1, 0x32, 0x2c, 0x76, 0x4e, 0xea, 0xf5, 0x66, 0xb3, 0x21,
	0x4b, 0x64, 0xca, 0x67, 0xb5, 0xd6, 0xb3, 0x66, 0x43, 0x2e, 0x54, 0xff, 0x98, 0x03, 0xb9, 0xad,
	0x7b, 0x9c, 0x04, 0xdb, 0x26, 0x74, 0x0c, 0xf2, 0x78, 0x3f, 0x41, 0xbb, 0x34, 0x9d, 0xf9, 0x97,
	0x6f, 0xe5, 0x06, 0x05, 0x27, 0xf5, 0x20, 0x55, 0x42, 0x87, 0x20, 0xd7, 0xcf, 0xb1, 0xd1, 0x4f,
	0x2c, 0x16, 0xc9, 0xdc, 0x63, 0xf4, 0x18, 0x50, 0x14, 0xd1, 0x56, 0x3a, 0xd6, 0xc0, 0xb3, 0xf1,
	0x93, 0xc0, 0x75, 0x12, 0x3e, 0xbe, 0x86, 0x8d, 0xcc, 0xbd, 0x17, 0xdd, 0x4f, 0xd1, 0xba, 0xea,
	0x1e, 0xae, 0xec, 0xd3, 0xa1, 0x13, 0xaf, 0xce, 0xaa, 0x84, 0x8e, 0x60, 0x9d, 0x36, 0x46, 0x52,
	0x13, 0xef, 0x65, 0xd9, 0x1a, 0x20, 0x82, 0x8a, 0xa2, 0x78, 0x2f, 0x3e, 0x79, 0x72, 0x58, 0x35,
	0xbd, 0x17, 0x8f, 0x6d, 0x58, 0x1f, 0x2b, 0x44, 0xee, 0x30, 0xbf, 0xcd, 0x2a, 0x7b, 0xf9, 0xa0,
	0xf0, 0x57, 0xfd, 0x73, 0x06, 0xae, 0xb5, 0x75, 0x2f, 0x6a, 0x11, 0xa2, 0xac, 0x9e, 0xc0, 0x3a,
	0x3f, 0x74, 0x02, 0x41, 0x3b, 0xd4, 0x55, 0xde, 0x3b, 0xe4, 0x2d, 0xc5, 0x50, 0x83, 0xf5, 0x06,
	0xb6, 0x71, 0x88, 0x63, 0x5f, 0xef, 0x5a, 0x4f, 0x4f, 0x60, 0x35, 0x25, 0x78, 0xd9, 0x5d, 0x4c,
	0x68, 0xb4, 0xa2, 0x50, 0x30, 0x57, 0x21, 0x55, 0x09, 0x7d, 0x0c, 0x2b, 0x49, 0x39, 0xcb, 0xe1,
	0xb2, 0x23, 0xaa, 0x2f, 0x6f, 0xfa, 0x53, 0x58, 0x4b, 0x77, 0x55, 0xa4, 0x24, 0xba, 0xe7, 0xf8,
	0xce, 0xec, 0xe6, 0x62, 0xd1, 0xf6, 0xff, 0x5a, 0x80, 0x8d, 0xb6, 0xee, 0xf1, 0xe6, 0x2a, 0x36,
	0xbf, 0x23, 0x36, 0x3f, 0x6a, 0xba, 0xe8, 0x20, 0xda, 0xfc, 0x09, 0x4f, 0x39, 0x9e, 0xe9, 0x49,
	0xcd, 0x5a, 0x42, 0x4d, 0xb8, 0xe6, 0xe3, 0xd3, 0xa1, 0x65, 0x9b, 0x1c, 0x6d, 0x39, 0x26, 0xbe,
	0x7c, 0xd7, 0x4c, 0x54, 0x5d, 0x5a, 0x2f, 0x51, 0xcb, 0x17, 0x94, 0x5f, 0x80, 0x3c, 0x2e, 0x06,
	0xe8, 0x56, 0xc4, 0x79, 0xf2, 0xeb, 0x8b, 0x57, 0xfc, 0x44, 0x21, 0x91, 0xaa, 0x5f, 0xc2, 0x5a,
	0x5b, 0xf7, 0x88, 0x8e, 0x88, 0x58, 0x2d, 0x58, 0x4e, 0x88, 0x0b, 0xda, 0x8f, 0xc2, 0xe4, 0xbe,
	0xad, 0x94, 0x52, 0x22, 0x42, 0x5a, 0x8e, 0xa4, 0x6a, 0x1f, 0x50, 0x5b, 0xf7, 0x84, 0x1a, 0x89,
	0x00, 0x27, 0x62, 0xff, 0x23, 0x99, 0x42, 0x6a, 0x14, 0x64, 0xe2, 0x53, 0x2a, 0x95, 0x81, 0xac,
	0xc0, 0x49, 0x55, 0x03, 0x56, 0x49, 0xb0, 0x0b, 0x43, 0xc4, 0xd1, 0x60, 0x2d, 0xad, 0x79, 0xe8,
	0x5f, 0x71, 0x98, 0x09, 0x8f, 0x25, 0x5e, 0x51, 0x13, 0xb4, 0x52, 0xaa, 0xbe, 0x82, 0x75, 0x72,
	0x9e, 0x49, 0x5b, 0x14, 0x61, 0x9e, 0xc1, 0x4a, 0x52, 0x40, 0xd1, 0xcd, 0xf8, 0x20, 0xe7, 0x3e,
	0x88, 0x78, 0xfd, 0xe7, 0x8a, 0xae, 0x54, 0x3d, 0xa3, 0x22, 0x44, 0x35, 0x77, 0x94, 0x59, 0x88,
	0x90, 0xe2, 0xc4, 0x42, 0x26, 0xbd, 0x7d, 0x52, 0x0b, 0xc9, 0x48, 0xb8, 0x54, 0x7d, 0x0d, 0x5b,
	0xe4, 0x64, 0xc4, 0x0a, 0x2e, 0x82, 0x7d, 0x05, 0x28, 0xab, 0xee, 0xe8, 0x4e, 0x7c, 0x40, 0xae,
	0x78, 0xea, 0x28, 0x37, 0x93, 0xa7, 0x24, 0xef, 0x76, 0x20, 0x55, 0xbf, 0xa1, 0x35, 0x21, 0x74,
	0x40, 0x44, 0xed, 0x8a, 0x9a, 0x88, 0x6e, 0x0d, 0x89, 0x35, 0x4e, 0xfa, 0x83, 0x23, 0x55, 0x12,
	0xd9, 0xeb, 0x06, 0x29, 0x09, 0xb2, 0x99, 0x4c, 0x1f, 0x44, 0xa4, 0x23, 0x58, 0x4d, 0x5d, 0x42,
	0x12, 0x67, 0x7f, 0xc2, 0x63, 0x88, 0x37, 0xbc, 0xfc, 0xab, 0x8b, 0x74, 0xf8, 0x09, 0x6c, 0x3b,
	0x38, 0x2c, 0x07, 0xfd, 0x91, 0x61, 0xbb, 0x43, 0x93, 0xfd, 0xb9, 0x47, 0x66, 0xbc, 0xbc, 0xd3,
	0xb3, 0xc2, 0xf3, 0xe1, 0x29, 0x39, 0xf0, 0x95, 0xa0, 0x3f, 0x7a, 0x48, 0xf1, 0x87, 0x21, 0x36,
	0x2a, 0x74, 0x4c, 0xe5, 0xe2, 0xbf, 0x15, 0xdf, 0x33, 0x4e, 0x17, 0xe8, 0xd7, 0xff, 0xfe, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0xa9, 0x25, 0x93, 0x6a, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NapDeviceServiceClient is the client API for NapDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapDeviceServiceClient interface {
	PullDeviceConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	CheckDeviceState(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetTemplateDevice(ctx context.Context, in *ByDeviceIdAndDeviceTypeAndKeyRequest, opts ...grpc.CallOption) (*GetTemplateDeviceResponse, error)
	PullRouteConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	PullHitCountConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	PullUserIDConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error)
	SendDeviceState(ctx context.Context, in *SendDeviceStateRequest, opts ...grpc.CallOption) (*SendDeviceStateResponse, error)
}

type napDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapDeviceServiceClient(cc grpc.ClientConnInterface) NapDeviceServiceClient {
	return &napDeviceServiceClient{cc}
}

func (c *napDeviceServiceClient) PullDeviceConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) CheckDeviceState(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/CheckDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) GetTemplateDevice(ctx context.Context, in *ByDeviceIdAndDeviceTypeAndKeyRequest, opts ...grpc.CallOption) (*GetTemplateDeviceResponse, error) {
	out := new(GetTemplateDeviceResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/GetTemplateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullRouteConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullRouteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullHitCountConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullHitCountConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) PullUserIDConfig(ctx context.Context, in *ByDeviceAndTaskRequest, opts ...grpc.CallOption) (*PullDeviceConfigResponse, error) {
	out := new(PullDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/PullUserIDConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napDeviceServiceClient) SendDeviceState(ctx context.Context, in *SendDeviceStateRequest, opts ...grpc.CallOption) (*SendDeviceStateResponse, error) {
	out := new(SendDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapDeviceService/SendDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapDeviceServiceServer is the server API for NapDeviceService service.
type NapDeviceServiceServer interface {
	PullDeviceConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	CheckDeviceState(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
	GetTemplateDevice(context.Context, *ByDeviceIdAndDeviceTypeAndKeyRequest) (*GetTemplateDeviceResponse, error)
	PullRouteConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	PullHitCountConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	PullUserIDConfig(context.Context, *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error)
	SendDeviceState(context.Context, *SendDeviceStateRequest) (*SendDeviceStateResponse, error)
}

// UnimplementedNapDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapDeviceServiceServer struct {
}

func (*UnimplementedNapDeviceServiceServer) PullDeviceConfig(ctx context.Context, req *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDeviceConfig not implemented")
}
func (*UnimplementedNapDeviceServiceServer) CheckDeviceState(ctx context.Context, req *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceState not implemented")
}
func (*UnimplementedNapDeviceServiceServer) GetTemplateDevice(ctx context.Context, req *ByDeviceIdAndDeviceTypeAndKeyRequest) (*GetTemplateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateDevice not implemented")
}
func (*UnimplementedNapDeviceServiceServer) PullRouteConfig(ctx context.Context, req *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullRouteConfig not implemented")
}
func (*UnimplementedNapDeviceServiceServer) PullHitCountConfig(ctx context.Context, req *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullHitCountConfig not implemented")
}
func (*UnimplementedNapDeviceServiceServer) PullUserIDConfig(ctx context.Context, req *ByDeviceAndTaskRequest) (*PullDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserIDConfig not implemented")
}
func (*UnimplementedNapDeviceServiceServer) SendDeviceState(ctx context.Context, req *SendDeviceStateRequest) (*SendDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceState not implemented")
}

func RegisterNapDeviceServiceServer(s *grpc.Server, srv NapDeviceServiceServer) {
	s.RegisterService(&_NapDeviceService_serviceDesc, srv)
}

func _NapDeviceService_PullDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullDeviceConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_CheckDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).CheckDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/CheckDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).CheckDeviceState(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_GetTemplateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceIdAndDeviceTypeAndKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).GetTemplateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/GetTemplateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).GetTemplateDevice(ctx, req.(*ByDeviceIdAndDeviceTypeAndKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullRouteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullRouteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullRouteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullRouteConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullHitCountConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullHitCountConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullHitCountConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullHitCountConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_PullUserIDConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).PullUserIDConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/PullUserIDConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).PullUserIDConfig(ctx, req.(*ByDeviceAndTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapDeviceService_SendDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapDeviceServiceServer).SendDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapDeviceService/SendDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapDeviceServiceServer).SendDeviceState(ctx, req.(*SendDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapDeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapDeviceService",
	HandlerType: (*NapDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullDeviceConfig",
			Handler:    _NapDeviceService_PullDeviceConfig_Handler,
		},
		{
			MethodName: "CheckDeviceState",
			Handler:    _NapDeviceService_CheckDeviceState_Handler,
		},
		{
			MethodName: "GetTemplateDevice",
			Handler:    _NapDeviceService_GetTemplateDevice_Handler,
		},
		{
			MethodName: "PullRouteConfig",
			Handler:    _NapDeviceService_PullRouteConfig_Handler,
		},
		{
			MethodName: "PullHitCountConfig",
			Handler:    _NapDeviceService_PullHitCountConfig_Handler,
		},
		{
			MethodName: "PullUserIDConfig",
			Handler:    _NapDeviceService_PullUserIDConfig_Handler,
		},
		{
			MethodName: "SendDeviceState",
			Handler:    _NapDeviceService_SendDeviceState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapRawConfigServiceClient is the client API for NapRawConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapRawConfigServiceClient interface {
	ImportRawConfig(ctx context.Context, in *WithRawConfigRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DeleteRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	ListRawConfig(ctx context.Context, in *ByDeviceAndPageRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error)
	GetRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GetRawConfigResponse, error)
	CleanRawConfig(ctx context.Context, in *CleanRawConfigRequest, opts ...grpc.CallOption) (*CleanRawConfigResponse, error)
}

type napRawConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapRawConfigServiceClient(cc grpc.ClientConnInterface) NapRawConfigServiceClient {
	return &napRawConfigServiceClient{cc}
}

func (c *napRawConfigServiceClient) ImportRawConfig(ctx context.Context, in *WithRawConfigRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/ImportRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) DeleteRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/DeleteRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) ListRawConfig(ctx context.Context, in *ByDeviceAndPageRequest, opts ...grpc.CallOption) (*ListRawConfigResponse, error) {
	out := new(ListRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/ListRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) GetRawConfig(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GetRawConfigResponse, error) {
	out := new(GetRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/GetRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napRawConfigServiceClient) CleanRawConfig(ctx context.Context, in *CleanRawConfigRequest, opts ...grpc.CallOption) (*CleanRawConfigResponse, error) {
	out := new(CleanRawConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRawConfigService/CleanRawConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapRawConfigServiceServer is the server API for NapRawConfigService service.
type NapRawConfigServiceServer interface {
	ImportRawConfig(context.Context, *WithRawConfigRequest) (*common.SimpleJsonResponse, error)
	DeleteRawConfig(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
	ListRawConfig(context.Context, *ByDeviceAndPageRequest) (*ListRawConfigResponse, error)
	GetRawConfig(context.Context, *ByIdRequest) (*GetRawConfigResponse, error)
	CleanRawConfig(context.Context, *CleanRawConfigRequest) (*CleanRawConfigResponse, error)
}

// UnimplementedNapRawConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapRawConfigServiceServer struct {
}

func (*UnimplementedNapRawConfigServiceServer) ImportRawConfig(ctx context.Context, req *WithRawConfigRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRawConfig not implemented")
}
func (*UnimplementedNapRawConfigServiceServer) DeleteRawConfig(ctx context.Context, req *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRawConfig not implemented")
}
func (*UnimplementedNapRawConfigServiceServer) ListRawConfig(ctx context.Context, req *ByDeviceAndPageRequest) (*ListRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRawConfig not implemented")
}
func (*UnimplementedNapRawConfigServiceServer) GetRawConfig(ctx context.Context, req *ByIdRequest) (*GetRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawConfig not implemented")
}
func (*UnimplementedNapRawConfigServiceServer) CleanRawConfig(ctx context.Context, req *CleanRawConfigRequest) (*CleanRawConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanRawConfig not implemented")
}

func RegisterNapRawConfigServiceServer(s *grpc.Server, srv NapRawConfigServiceServer) {
	s.RegisterService(&_NapRawConfigService_serviceDesc, srv)
}

func _NapRawConfigService_ImportRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).ImportRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/ImportRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).ImportRawConfig(ctx, req.(*WithRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_DeleteRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).DeleteRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/DeleteRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).DeleteRawConfig(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_ListRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByDeviceAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).ListRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/ListRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).ListRawConfig(ctx, req.(*ByDeviceAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_GetRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).GetRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/GetRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).GetRawConfig(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapRawConfigService_CleanRawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanRawConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRawConfigServiceServer).CleanRawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRawConfigService/CleanRawConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRawConfigServiceServer).CleanRawConfig(ctx, req.(*CleanRawConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapRawConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapRawConfigService",
	HandlerType: (*NapRawConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportRawConfig",
			Handler:    _NapRawConfigService_ImportRawConfig_Handler,
		},
		{
			MethodName: "DeleteRawConfig",
			Handler:    _NapRawConfigService_DeleteRawConfig_Handler,
		},
		{
			MethodName: "ListRawConfig",
			Handler:    _NapRawConfigService_ListRawConfig_Handler,
		},
		{
			MethodName: "GetRawConfig",
			Handler:    _NapRawConfigService_GetRawConfig_Handler,
		},
		{
			MethodName: "CleanRawConfig",
			Handler:    _NapRawConfigService_CleanRawConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapAddressServiceClient is the client API for NapAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapAddressServiceClient interface {
	ImportAddresses(ctx context.Context, in *WithAddressAndDeviceRequest, opts ...grpc.CallOption) (*ImportAddressesResponse, error)
	RebuildAddressIndex(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type napAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapAddressServiceClient(cc grpc.ClientConnInterface) NapAddressServiceClient {
	return &napAddressServiceClient{cc}
}

func (c *napAddressServiceClient) ImportAddresses(ctx context.Context, in *WithAddressAndDeviceRequest, opts ...grpc.CallOption) (*ImportAddressesResponse, error) {
	out := new(ImportAddressesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapAddressService/ImportAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *napAddressServiceClient) RebuildAddressIndex(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapAddressService/rebuildAddressIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapAddressServiceServer is the server API for NapAddressService service.
type NapAddressServiceServer interface {
	ImportAddresses(context.Context, *WithAddressAndDeviceRequest) (*ImportAddressesResponse, error)
	RebuildAddressIndex(context.Context, *ByIdRequest) (*common.SimpleJsonResponse, error)
}

// UnimplementedNapAddressServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapAddressServiceServer struct {
}

func (*UnimplementedNapAddressServiceServer) ImportAddresses(ctx context.Context, req *WithAddressAndDeviceRequest) (*ImportAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAddresses not implemented")
}
func (*UnimplementedNapAddressServiceServer) RebuildAddressIndex(ctx context.Context, req *ByIdRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildAddressIndex not implemented")
}

func RegisterNapAddressServiceServer(s *grpc.Server, srv NapAddressServiceServer) {
	s.RegisterService(&_NapAddressService_serviceDesc, srv)
}

func _NapAddressService_ImportAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAddressAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapAddressServiceServer).ImportAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapAddressService/ImportAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapAddressServiceServer).ImportAddresses(ctx, req.(*WithAddressAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NapAddressService_RebuildAddressIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapAddressServiceServer).RebuildAddressIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapAddressService/RebuildAddressIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapAddressServiceServer).RebuildAddressIndex(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapAddressService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapAddressService",
	HandlerType: (*NapAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAddresses",
			Handler:    _NapAddressService_ImportAddresses_Handler,
		},
		{
			MethodName: "rebuildAddressIndex",
			Handler:    _NapAddressService_RebuildAddressIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapInterfaceServiceClient is the client API for NapInterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapInterfaceServiceClient interface {
	ImportInterfaces(ctx context.Context, in *WithInterfacesAndDeviceRequest, opts ...grpc.CallOption) (*ImportInterfacesResponse, error)
}

type napInterfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapInterfaceServiceClient(cc grpc.ClientConnInterface) NapInterfaceServiceClient {
	return &napInterfaceServiceClient{cc}
}

func (c *napInterfaceServiceClient) ImportInterfaces(ctx context.Context, in *WithInterfacesAndDeviceRequest, opts ...grpc.CallOption) (*ImportInterfacesResponse, error) {
	out := new(ImportInterfacesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapInterfaceService/ImportInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapInterfaceServiceServer is the server API for NapInterfaceService service.
type NapInterfaceServiceServer interface {
	ImportInterfaces(context.Context, *WithInterfacesAndDeviceRequest) (*ImportInterfacesResponse, error)
}

// UnimplementedNapInterfaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapInterfaceServiceServer struct {
}

func (*UnimplementedNapInterfaceServiceServer) ImportInterfaces(ctx context.Context, req *WithInterfacesAndDeviceRequest) (*ImportInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportInterfaces not implemented")
}

func RegisterNapInterfaceServiceServer(s *grpc.Server, srv NapInterfaceServiceServer) {
	s.RegisterService(&_NapInterfaceService_serviceDesc, srv)
}

func _NapInterfaceService_ImportInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithInterfacesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapInterfaceServiceServer).ImportInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapInterfaceService/ImportInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapInterfaceServiceServer).ImportInterfaces(ctx, req.(*WithInterfacesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapInterfaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapInterfaceService",
	HandlerType: (*NapInterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportInterfaces",
			Handler:    _NapInterfaceService_ImportInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapZoneServiceClient is the client API for NapZoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapZoneServiceClient interface {
	ImportZones(ctx context.Context, in *WithZonesAndDeviceRequest, opts ...grpc.CallOption) (*ImportZonesResponse, error)
}

type napZoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapZoneServiceClient(cc grpc.ClientConnInterface) NapZoneServiceClient {
	return &napZoneServiceClient{cc}
}

func (c *napZoneServiceClient) ImportZones(ctx context.Context, in *WithZonesAndDeviceRequest, opts ...grpc.CallOption) (*ImportZonesResponse, error) {
	out := new(ImportZonesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapZoneService/ImportZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapZoneServiceServer is the server API for NapZoneService service.
type NapZoneServiceServer interface {
	ImportZones(context.Context, *WithZonesAndDeviceRequest) (*ImportZonesResponse, error)
}

// UnimplementedNapZoneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapZoneServiceServer struct {
}

func (*UnimplementedNapZoneServiceServer) ImportZones(ctx context.Context, req *WithZonesAndDeviceRequest) (*ImportZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportZones not implemented")
}

func RegisterNapZoneServiceServer(s *grpc.Server, srv NapZoneServiceServer) {
	s.RegisterService(&_NapZoneService_serviceDesc, srv)
}

func _NapZoneService_ImportZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithZonesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapZoneServiceServer).ImportZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapZoneService/ImportZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapZoneServiceServer).ImportZones(ctx, req.(*WithZonesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapZoneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapZoneService",
	HandlerType: (*NapZoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportZones",
			Handler:    _NapZoneService_ImportZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapScheduleServiceClient is the client API for NapScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapScheduleServiceClient interface {
	ImportSchedules(ctx context.Context, in *WithSchedulesAndDeviceRequest, opts ...grpc.CallOption) (*ImportSchedulesResponse, error)
}

type napScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapScheduleServiceClient(cc grpc.ClientConnInterface) NapScheduleServiceClient {
	return &napScheduleServiceClient{cc}
}

func (c *napScheduleServiceClient) ImportSchedules(ctx context.Context, in *WithSchedulesAndDeviceRequest, opts ...grpc.CallOption) (*ImportSchedulesResponse, error) {
	out := new(ImportSchedulesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapScheduleService/ImportSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapScheduleServiceServer is the server API for NapScheduleService service.
type NapScheduleServiceServer interface {
	ImportSchedules(context.Context, *WithSchedulesAndDeviceRequest) (*ImportSchedulesResponse, error)
}

// UnimplementedNapScheduleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapScheduleServiceServer struct {
}

func (*UnimplementedNapScheduleServiceServer) ImportSchedules(ctx context.Context, req *WithSchedulesAndDeviceRequest) (*ImportSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSchedules not implemented")
}

func RegisterNapScheduleServiceServer(s *grpc.Server, srv NapScheduleServiceServer) {
	s.RegisterService(&_NapScheduleService_serviceDesc, srv)
}

func _NapScheduleService_ImportSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSchedulesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapScheduleServiceServer).ImportSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapScheduleService/ImportSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapScheduleServiceServer).ImportSchedules(ctx, req.(*WithSchedulesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapScheduleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapScheduleService",
	HandlerType: (*NapScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportSchedules",
			Handler:    _NapScheduleService_ImportSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapSvcServiceClient is the client API for NapSvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapSvcServiceClient interface {
	ImportServices(ctx context.Context, in *WithServicesAndDeviceRequest, opts ...grpc.CallOption) (*ImportServicesResponse, error)
}

type napSvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapSvcServiceClient(cc grpc.ClientConnInterface) NapSvcServiceClient {
	return &napSvcServiceClient{cc}
}

func (c *napSvcServiceClient) ImportServices(ctx context.Context, in *WithServicesAndDeviceRequest, opts ...grpc.CallOption) (*ImportServicesResponse, error) {
	out := new(ImportServicesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapSvcService/ImportServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapSvcServiceServer is the server API for NapSvcService service.
type NapSvcServiceServer interface {
	ImportServices(context.Context, *WithServicesAndDeviceRequest) (*ImportServicesResponse, error)
}

// UnimplementedNapSvcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapSvcServiceServer struct {
}

func (*UnimplementedNapSvcServiceServer) ImportServices(ctx context.Context, req *WithServicesAndDeviceRequest) (*ImportServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportServices not implemented")
}

func RegisterNapSvcServiceServer(s *grpc.Server, srv NapSvcServiceServer) {
	s.RegisterService(&_NapSvcService_serviceDesc, srv)
}

func _NapSvcService_ImportServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithServicesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapSvcServiceServer).ImportServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapSvcService/ImportServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapSvcServiceServer).ImportServices(ctx, req.(*WithServicesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapSvcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapSvcService",
	HandlerType: (*NapSvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportServices",
			Handler:    _NapSvcService_ImportServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapRouteServiceClient is the client API for NapRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapRouteServiceClient interface {
	ImportRoutes(ctx context.Context, in *WithRoutesAndDeviceRequest, opts ...grpc.CallOption) (*ImportRoutesResponse, error)
}

type napRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapRouteServiceClient(cc grpc.ClientConnInterface) NapRouteServiceClient {
	return &napRouteServiceClient{cc}
}

func (c *napRouteServiceClient) ImportRoutes(ctx context.Context, in *WithRoutesAndDeviceRequest, opts ...grpc.CallOption) (*ImportRoutesResponse, error) {
	out := new(ImportRoutesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapRouteService/ImportRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapRouteServiceServer is the server API for NapRouteService service.
type NapRouteServiceServer interface {
	ImportRoutes(context.Context, *WithRoutesAndDeviceRequest) (*ImportRoutesResponse, error)
}

// UnimplementedNapRouteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapRouteServiceServer struct {
}

func (*UnimplementedNapRouteServiceServer) ImportRoutes(ctx context.Context, req *WithRoutesAndDeviceRequest) (*ImportRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRoutes not implemented")
}

func RegisterNapRouteServiceServer(s *grpc.Server, srv NapRouteServiceServer) {
	s.RegisterService(&_NapRouteService_serviceDesc, srv)
}

func _NapRouteService_ImportRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRoutesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapRouteServiceServer).ImportRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapRouteService/ImportRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapRouteServiceServer).ImportRoutes(ctx, req.(*WithRoutesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapRouteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapRouteService",
	HandlerType: (*NapRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportRoutes",
			Handler:    _NapRouteService_ImportRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapPolicyServiceClient is the client API for NapPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapPolicyServiceClient interface {
	ImportPolicies(ctx context.Context, in *WithPoliciesAndDeviceRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error)
}

type napPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapPolicyServiceClient(cc grpc.ClientConnInterface) NapPolicyServiceClient {
	return &napPolicyServiceClient{cc}
}

func (c *napPolicyServiceClient) ImportPolicies(ctx context.Context, in *WithPoliciesAndDeviceRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error) {
	out := new(ImportPoliciesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapPolicyService/ImportPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapPolicyServiceServer is the server API for NapPolicyService service.
type NapPolicyServiceServer interface {
	ImportPolicies(context.Context, *WithPoliciesAndDeviceRequest) (*ImportPoliciesResponse, error)
}

// UnimplementedNapPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapPolicyServiceServer struct {
}

func (*UnimplementedNapPolicyServiceServer) ImportPolicies(ctx context.Context, req *WithPoliciesAndDeviceRequest) (*ImportPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPolicies not implemented")
}

func RegisterNapPolicyServiceServer(s *grpc.Server, srv NapPolicyServiceServer) {
	s.RegisterService(&_NapPolicyService_serviceDesc, srv)
}

func _NapPolicyService_ImportPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPoliciesAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapPolicyServiceServer).ImportPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapPolicyService/ImportPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapPolicyServiceServer).ImportPolicies(ctx, req.(*WithPoliciesAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapPolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapPolicyService",
	HandlerType: (*NapPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportPolicies",
			Handler:    _NapPolicyService_ImportPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapApplicationServiceClient is the client API for NapApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapApplicationServiceClient interface {
	ImportApplications(ctx context.Context, in *WithApplicationsAndDeviceRequest, opts ...grpc.CallOption) (*ImportApplicationsResponse, error)
}

type napApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapApplicationServiceClient(cc grpc.ClientConnInterface) NapApplicationServiceClient {
	return &napApplicationServiceClient{cc}
}

func (c *napApplicationServiceClient) ImportApplications(ctx context.Context, in *WithApplicationsAndDeviceRequest, opts ...grpc.CallOption) (*ImportApplicationsResponse, error) {
	out := new(ImportApplicationsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapApplicationService/ImportApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapApplicationServiceServer is the server API for NapApplicationService service.
type NapApplicationServiceServer interface {
	ImportApplications(context.Context, *WithApplicationsAndDeviceRequest) (*ImportApplicationsResponse, error)
}

// UnimplementedNapApplicationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapApplicationServiceServer struct {
}

func (*UnimplementedNapApplicationServiceServer) ImportApplications(ctx context.Context, req *WithApplicationsAndDeviceRequest) (*ImportApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportApplications not implemented")
}

func RegisterNapApplicationServiceServer(s *grpc.Server, srv NapApplicationServiceServer) {
	s.RegisterService(&_NapApplicationService_serviceDesc, srv)
}

func _NapApplicationService_ImportApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithApplicationsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapApplicationServiceServer).ImportApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapApplicationService/ImportApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapApplicationServiceServer).ImportApplications(ctx, req.(*WithApplicationsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapApplicationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapApplicationService",
	HandlerType: (*NapApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportApplications",
			Handler:    _NapApplicationService_ImportApplications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapHitCountServiceClient is the client API for NapHitCountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapHitCountServiceClient interface {
	ImportHitCounts(ctx context.Context, in *WithHitCountAndDeviceRequest, opts ...grpc.CallOption) (*ImportHitCountsResponse, error)
}

type napHitCountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapHitCountServiceClient(cc grpc.ClientConnInterface) NapHitCountServiceClient {
	return &napHitCountServiceClient{cc}
}

func (c *napHitCountServiceClient) ImportHitCounts(ctx context.Context, in *WithHitCountAndDeviceRequest, opts ...grpc.CallOption) (*ImportHitCountsResponse, error) {
	out := new(ImportHitCountsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapHitCountService/ImportHitCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapHitCountServiceServer is the server API for NapHitCountService service.
type NapHitCountServiceServer interface {
	ImportHitCounts(context.Context, *WithHitCountAndDeviceRequest) (*ImportHitCountsResponse, error)
}

// UnimplementedNapHitCountServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapHitCountServiceServer struct {
}

func (*UnimplementedNapHitCountServiceServer) ImportHitCounts(ctx context.Context, req *WithHitCountAndDeviceRequest) (*ImportHitCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportHitCounts not implemented")
}

func RegisterNapHitCountServiceServer(s *grpc.Server, srv NapHitCountServiceServer) {
	s.RegisterService(&_NapHitCountService_serviceDesc, srv)
}

func _NapHitCountService_ImportHitCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithHitCountAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapHitCountServiceServer).ImportHitCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapHitCountService/ImportHitCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapHitCountServiceServer).ImportHitCounts(ctx, req.(*WithHitCountAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapHitCountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapHitCountService",
	HandlerType: (*NapHitCountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportHitCounts",
			Handler:    _NapHitCountService_ImportHitCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}

// NapUserIDServiceClient is the client API for NapUserIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NapUserIDServiceClient interface {
	ImportUserIDs(ctx context.Context, in *WithUserIDsAndDeviceRequest, opts ...grpc.CallOption) (*ImportUserIDsResponse, error)
}

type napUserIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNapUserIDServiceClient(cc grpc.ClientConnInterface) NapUserIDServiceClient {
	return &napUserIDServiceClient{cc}
}

func (c *napUserIDServiceClient) ImportUserIDs(ctx context.Context, in *WithUserIDsAndDeviceRequest, opts ...grpc.CallOption) (*ImportUserIDsResponse, error) {
	out := new(ImportUserIDsResponse)
	err := c.cc.Invoke(ctx, "/rpc.NapUserIDService/ImportUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NapUserIDServiceServer is the server API for NapUserIDService service.
type NapUserIDServiceServer interface {
	ImportUserIDs(context.Context, *WithUserIDsAndDeviceRequest) (*ImportUserIDsResponse, error)
}

// UnimplementedNapUserIDServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNapUserIDServiceServer struct {
}

func (*UnimplementedNapUserIDServiceServer) ImportUserIDs(ctx context.Context, req *WithUserIDsAndDeviceRequest) (*ImportUserIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserIDs not implemented")
}

func RegisterNapUserIDServiceServer(s *grpc.Server, srv NapUserIDServiceServer) {
	s.RegisterService(&_NapUserIDService_serviceDesc, srv)
}

func _NapUserIDService_ImportUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithUserIDsAndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NapUserIDServiceServer).ImportUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NapUserIDService/ImportUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NapUserIDServiceServer).ImportUserIDs(ctx, req.(*WithUserIDsAndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NapUserIDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NapUserIDService",
	HandlerType: (*NapUserIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportUserIDs",
			Handler:    _NapUserIDService_ImportUserIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/nap.proto",
}
