// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDeviceMsg(ctx context.Context, in *ByIpRequest, opts ...grpc.CallOption) (*GetDeviceMsgResponse, error)
	ListDeviceMsg(ctx context.Context, opts ...grpc.CallOption) (DeviceService_ListDeviceMsgClient, error)
	GetDeviceSubnet(ctx context.Context, in *ByEmptyRequest, opts ...grpc.CallOption) (*GetDeviceSubnetResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDeviceMsg(ctx context.Context, in *ByIpRequest, opts ...grpc.CallOption) (*GetDeviceMsgResponse, error) {
	out := new(GetDeviceMsgResponse)
	err := c.cc.Invoke(ctx, "/rpc.DeviceService/GetDeviceMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListDeviceMsg(ctx context.Context, opts ...grpc.CallOption) (DeviceService_ListDeviceMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[0], "/rpc.DeviceService/ListDeviceMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceListDeviceMsgClient{stream}
	return x, nil
}

type DeviceService_ListDeviceMsgClient interface {
	Send(*ByIpRequest) error
	CloseAndRecv() (*ListDeviceMsgResponse, error)
	grpc.ClientStream
}

type deviceServiceListDeviceMsgClient struct {
	grpc.ClientStream
}

func (x *deviceServiceListDeviceMsgClient) Send(m *ByIpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceListDeviceMsgClient) CloseAndRecv() (*ListDeviceMsgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListDeviceMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetDeviceSubnet(ctx context.Context, in *ByEmptyRequest, opts ...grpc.CallOption) (*GetDeviceSubnetResponse, error) {
	out := new(GetDeviceSubnetResponse)
	err := c.cc.Invoke(ctx, "/rpc.DeviceService/GetDeviceSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	GetDeviceMsg(context.Context, *ByIpRequest) (*GetDeviceMsgResponse, error)
	ListDeviceMsg(DeviceService_ListDeviceMsgServer) error
	GetDeviceSubnet(context.Context, *ByEmptyRequest) (*GetDeviceSubnetResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetDeviceMsg(context.Context, *ByIpRequest) (*GetDeviceMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMsg not implemented")
}
func (UnimplementedDeviceServiceServer) ListDeviceMsg(DeviceService_ListDeviceMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeviceMsg not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceSubnet(context.Context, *ByEmptyRequest) (*GetDeviceSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSubnet not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDeviceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DeviceService/GetDeviceMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceMsg(ctx, req.(*ByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListDeviceMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).ListDeviceMsg(&deviceServiceListDeviceMsgServer{stream})
}

type DeviceService_ListDeviceMsgServer interface {
	SendAndClose(*ListDeviceMsgResponse) error
	Recv() (*ByIpRequest, error)
	grpc.ServerStream
}

type deviceServiceListDeviceMsgServer struct {
	grpc.ServerStream
}

func (x *deviceServiceListDeviceMsgServer) SendAndClose(m *ListDeviceMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceListDeviceMsgServer) Recv() (*ByIpRequest, error) {
	m := new(ByIpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_GetDeviceSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DeviceService/GetDeviceSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceSubnet(ctx, req.(*ByEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceMsg",
			Handler:    _DeviceService_GetDeviceMsg_Handler,
		},
		{
			MethodName: "GetDeviceSubnet",
			Handler:    _DeviceService_GetDeviceSubnet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDeviceMsg",
			Handler:       _DeviceService_ListDeviceMsg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/grpc/ipam.proto",
}
