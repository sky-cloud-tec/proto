// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpdServiceClient is the client API for HttpdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpdServiceClient interface {
	// use SimpleJsonRequest and SimpleJsonResponse
	Delegate(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error)
}

type httpdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpdServiceClient(cc grpc.ClientConnInterface) HttpdServiceClient {
	return &httpdServiceClient{cc}
}

func (c *httpdServiceClient) Delegate(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error) {
	out := new(IResponse)
	err := c.cc.Invoke(ctx, "/rpc.HttpdService/delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpdServiceServer is the server API for HttpdService service.
// All implementations must embed UnimplementedHttpdServiceServer
// for forward compatibility
type HttpdServiceServer interface {
	// use SimpleJsonRequest and SimpleJsonResponse
	Delegate(context.Context, *IRequest) (*IResponse, error)
	mustEmbedUnimplementedHttpdServiceServer()
}

// UnimplementedHttpdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpdServiceServer struct {
}

func (UnimplementedHttpdServiceServer) Delegate(context.Context, *IRequest) (*IResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}
func (UnimplementedHttpdServiceServer) mustEmbedUnimplementedHttpdServiceServer() {}

// UnsafeHttpdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpdServiceServer will
// result in compilation errors.
type UnsafeHttpdServiceServer interface {
	mustEmbedUnimplementedHttpdServiceServer()
}

func RegisterHttpdServiceServer(s grpc.ServiceRegistrar, srv HttpdServiceServer) {
	s.RegisterService(&HttpdService_ServiceDesc, srv)
}

func _HttpdService_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpdServiceServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.HttpdService/delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpdServiceServer).Delegate(ctx, req.(*IRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpdService_ServiceDesc is the grpc.ServiceDesc for HttpdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.HttpdService",
	HandlerType: (*HttpdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "delegate",
			Handler:    _HttpdService_Delegate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/httpd.proto",
}
