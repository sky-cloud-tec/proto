// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	common "github.com/sky-cloud-tec/proto/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	SearchNode(ctx context.Context, in *ByJqlAndUsernameRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	SearchNodeByCql(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	SearchNodeBySql(ctx context.Context, in *BySqlRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	SearchNodeAndCountByCql(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*SearchNodeAndCountByCqlResponse, error)
	SearchNodeAutoComplete(ctx context.Context, in *ByJqlRequest, opts ...grpc.CallOption) (*SearchNodeAutoCompleteResponse, error)
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	CreateNeo4JNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	CreateNodes(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error)
	CreateNodesAndRelation(ctx context.Context, in *WithNodesAndUsernameAndRelationRequest, opts ...grpc.CallOption) (*CreateNodesAndRelationResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	UpdateNeo4JNode(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	UpdateNodes(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*UpdateNodesResponse, error)
	DeleteNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	DeleteNodeAndRelation(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	DeleteNeo4JNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	DeleteNodes(ctx context.Context, in *ByNodeIdsAndLabelRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error)
	ListNode(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	GetNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	GetNodeByName(ctx context.Context, in *ByNodeNameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	ExistsNode(ctx context.Context, in *ByModelKeyAndPropertiesRequest, opts ...grpc.CallOption) (*ExistsNodeResponse, error)
	GetNeo4JNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	GetNodeCount(ctx context.Context, in *ByLabelNameAndPropertiesRequest, opts ...grpc.CallOption) (*GetNodeCountResponse, error)
	GetTreeStructNodes(ctx context.Context, in *TreeStructRequest, opts ...grpc.CallOption) (*TreeStructResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) SearchNode(ctx context.Context, in *ByJqlAndUsernameRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/SearchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SearchNodeByCql(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/SearchNodeByCql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SearchNodeBySql(ctx context.Context, in *BySqlRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/SearchNodeBySql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SearchNodeAndCountByCql(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*SearchNodeAndCountByCqlResponse, error) {
	out := new(SearchNodeAndCountByCqlResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/SearchNodeAndCountByCql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SearchNodeAutoComplete(ctx context.Context, in *ByJqlRequest, opts ...grpc.CallOption) (*SearchNodeAutoCompleteResponse, error) {
	out := new(SearchNodeAutoCompleteResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/SearchNodeAutoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CreateNeo4JNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/CreateNeo4jNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CreateNodes(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error) {
	out := new(CreateNodesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CreateNodesAndRelation(ctx context.Context, in *WithNodesAndUsernameAndRelationRequest, opts ...grpc.CallOption) (*CreateNodesAndRelationResponse, error) {
	out := new(CreateNodesAndRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/CreateNodesAndRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) UpdateNeo4JNode(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/UpdateNeo4jNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) UpdateNodes(ctx context.Context, in *WithNodesAndUsernameRequest, opts ...grpc.CallOption) (*UpdateNodesResponse, error) {
	out := new(UpdateNodesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/UpdateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteNodeAndRelation(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/DeleteNodeAndRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteNeo4JNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/DeleteNeo4jNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteNodes(ctx context.Context, in *ByNodeIdsAndLabelRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error) {
	out := new(DeleteNodesResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/DeleteNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ListNode(ctx context.Context, in *WithSearchParamRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNodeByName(ctx context.Context, in *ByNodeNameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/GetNodeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ExistsNode(ctx context.Context, in *ByModelKeyAndPropertiesRequest, opts ...grpc.CallOption) (*ExistsNodeResponse, error) {
	out := new(ExistsNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/ExistsNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNeo4JNode(ctx context.Context, in *ByNodeIdAndUsernameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/GetNeo4jNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNodeCount(ctx context.Context, in *ByLabelNameAndPropertiesRequest, opts ...grpc.CallOption) (*GetNodeCountResponse, error) {
	out := new(GetNodeCountResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/GetNodeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetTreeStructNodes(ctx context.Context, in *TreeStructRequest, opts ...grpc.CallOption) (*TreeStructResponse, error) {
	out := new(TreeStructResponse)
	err := c.cc.Invoke(ctx, "/rpc.NodeService/GetTreeStructNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	SearchNode(context.Context, *ByJqlAndUsernameRequest) (*common.SimpleJsonResponse, error)
	SearchNodeByCql(context.Context, *WithSearchParamRequest) (*common.SimpleJsonResponse, error)
	SearchNodeBySql(context.Context, *BySqlRequest) (*common.SimpleJsonResponse, error)
	SearchNodeAndCountByCql(context.Context, *WithSearchParamRequest) (*SearchNodeAndCountByCqlResponse, error)
	SearchNodeAutoComplete(context.Context, *ByJqlRequest) (*SearchNodeAutoCompleteResponse, error)
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	CreateNeo4JNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	CreateNodes(context.Context, *WithNodesAndUsernameRequest) (*CreateNodesResponse, error)
	CreateNodesAndRelation(context.Context, *WithNodesAndUsernameAndRelationRequest) (*CreateNodesAndRelationResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	UpdateNeo4JNode(context.Context, *WithNodesAndUsernameRequest) (*UpdateNodeResponse, error)
	UpdateNodes(context.Context, *WithNodesAndUsernameRequest) (*UpdateNodesResponse, error)
	DeleteNode(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error)
	DeleteNodeAndRelation(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error)
	DeleteNeo4JNode(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error)
	DeleteNodes(context.Context, *ByNodeIdsAndLabelRequest) (*DeleteNodesResponse, error)
	ListNode(context.Context, *WithSearchParamRequest) (*ListNodeResponse, error)
	GetNode(context.Context, *ByNodeIdAndUsernameRequest) (*GetNodeResponse, error)
	GetNodeByName(context.Context, *ByNodeNameRequest) (*GetNodeResponse, error)
	ExistsNode(context.Context, *ByModelKeyAndPropertiesRequest) (*ExistsNodeResponse, error)
	GetNeo4JNode(context.Context, *ByNodeIdAndUsernameRequest) (*GetNodeResponse, error)
	GetNodeCount(context.Context, *ByLabelNameAndPropertiesRequest) (*GetNodeCountResponse, error)
	GetTreeStructNodes(context.Context, *TreeStructRequest) (*TreeStructResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) SearchNode(context.Context, *ByJqlAndUsernameRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNode not implemented")
}
func (UnimplementedNodeServiceServer) SearchNodeByCql(context.Context, *WithSearchParamRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeByCql not implemented")
}
func (UnimplementedNodeServiceServer) SearchNodeBySql(context.Context, *BySqlRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeBySql not implemented")
}
func (UnimplementedNodeServiceServer) SearchNodeAndCountByCql(context.Context, *WithSearchParamRequest) (*SearchNodeAndCountByCqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeAndCountByCql not implemented")
}
func (UnimplementedNodeServiceServer) SearchNodeAutoComplete(context.Context, *ByJqlRequest) (*SearchNodeAutoCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeAutoComplete not implemented")
}
func (UnimplementedNodeServiceServer) CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedNodeServiceServer) CreateNeo4JNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeo4JNode not implemented")
}
func (UnimplementedNodeServiceServer) CreateNodes(context.Context, *WithNodesAndUsernameRequest) (*CreateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (UnimplementedNodeServiceServer) CreateNodesAndRelation(context.Context, *WithNodesAndUsernameAndRelationRequest) (*CreateNodesAndRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodesAndRelation not implemented")
}
func (UnimplementedNodeServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNodeServiceServer) UpdateNeo4JNode(context.Context, *WithNodesAndUsernameRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNeo4JNode not implemented")
}
func (UnimplementedNodeServiceServer) UpdateNodes(context.Context, *WithNodesAndUsernameRequest) (*UpdateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodes not implemented")
}
func (UnimplementedNodeServiceServer) DeleteNode(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedNodeServiceServer) DeleteNodeAndRelation(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeAndRelation not implemented")
}
func (UnimplementedNodeServiceServer) DeleteNeo4JNode(context.Context, *ByNodeIdAndUsernameRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeo4JNode not implemented")
}
func (UnimplementedNodeServiceServer) DeleteNodes(context.Context, *ByNodeIdsAndLabelRequest) (*DeleteNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}
func (UnimplementedNodeServiceServer) ListNode(context.Context, *WithSearchParamRequest) (*ListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedNodeServiceServer) GetNode(context.Context, *ByNodeIdAndUsernameRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedNodeServiceServer) GetNodeByName(context.Context, *ByNodeNameRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeByName not implemented")
}
func (UnimplementedNodeServiceServer) ExistsNode(context.Context, *ByModelKeyAndPropertiesRequest) (*ExistsNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsNode not implemented")
}
func (UnimplementedNodeServiceServer) GetNeo4JNode(context.Context, *ByNodeIdAndUsernameRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeo4JNode not implemented")
}
func (UnimplementedNodeServiceServer) GetNodeCount(context.Context, *ByLabelNameAndPropertiesRequest) (*GetNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeCount not implemented")
}
func (UnimplementedNodeServiceServer) GetTreeStructNodes(context.Context, *TreeStructRequest) (*TreeStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeStructNodes not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_SearchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByJqlAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/SearchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNode(ctx, req.(*ByJqlAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SearchNodeByCql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSearchParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNodeByCql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/SearchNodeByCql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNodeByCql(ctx, req.(*WithSearchParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SearchNodeBySql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BySqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNodeBySql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/SearchNodeBySql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNodeBySql(ctx, req.(*BySqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SearchNodeAndCountByCql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSearchParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNodeAndCountByCql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/SearchNodeAndCountByCql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNodeAndCountByCql(ctx, req.(*WithSearchParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SearchNodeAutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByJqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNodeAutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/SearchNodeAutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNodeAutoComplete(ctx, req.(*ByJqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CreateNeo4JNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateNeo4JNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/CreateNeo4jNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateNeo4JNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNodesAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateNodes(ctx, req.(*WithNodesAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CreateNodesAndRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNodesAndUsernameAndRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateNodesAndRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/CreateNodesAndRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateNodesAndRelation(ctx, req.(*WithNodesAndUsernameAndRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_UpdateNeo4JNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNodesAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UpdateNeo4JNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/UpdateNeo4jNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UpdateNeo4JNode(ctx, req.(*WithNodesAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_UpdateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNodesAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UpdateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/UpdateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UpdateNodes(ctx, req.(*WithNodesAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteNode(ctx, req.(*ByNodeIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteNodeAndRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteNodeAndRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/DeleteNodeAndRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteNodeAndRelation(ctx, req.(*ByNodeIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteNeo4JNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteNeo4JNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/DeleteNeo4jNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteNeo4JNode(ctx, req.(*ByNodeIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdsAndLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteNodes(ctx, req.(*ByNodeIdsAndLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSearchParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ListNode(ctx, req.(*WithSearchParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNode(ctx, req.(*ByNodeIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNodeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNodeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/GetNodeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNodeByName(ctx, req.(*ByNodeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ExistsNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByModelKeyAndPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ExistsNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/ExistsNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ExistsNode(ctx, req.(*ByModelKeyAndPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNeo4JNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNeo4JNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/GetNeo4jNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNeo4JNode(ctx, req.(*ByNodeIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByLabelNameAndPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/GetNodeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNodeCount(ctx, req.(*ByLabelNameAndPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetTreeStructNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetTreeStructNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/GetTreeStructNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetTreeStructNodes(ctx, req.(*TreeStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchNode",
			Handler:    _NodeService_SearchNode_Handler,
		},
		{
			MethodName: "SearchNodeByCql",
			Handler:    _NodeService_SearchNodeByCql_Handler,
		},
		{
			MethodName: "SearchNodeBySql",
			Handler:    _NodeService_SearchNodeBySql_Handler,
		},
		{
			MethodName: "SearchNodeAndCountByCql",
			Handler:    _NodeService_SearchNodeAndCountByCql_Handler,
		},
		{
			MethodName: "SearchNodeAutoComplete",
			Handler:    _NodeService_SearchNodeAutoComplete_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _NodeService_CreateNode_Handler,
		},
		{
			MethodName: "CreateNeo4jNode",
			Handler:    _NodeService_CreateNeo4JNode_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _NodeService_CreateNodes_Handler,
		},
		{
			MethodName: "CreateNodesAndRelation",
			Handler:    _NodeService_CreateNodesAndRelation_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _NodeService_UpdateNode_Handler,
		},
		{
			MethodName: "UpdateNeo4jNode",
			Handler:    _NodeService_UpdateNeo4JNode_Handler,
		},
		{
			MethodName: "UpdateNodes",
			Handler:    _NodeService_UpdateNodes_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeService_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteNodeAndRelation",
			Handler:    _NodeService_DeleteNodeAndRelation_Handler,
		},
		{
			MethodName: "DeleteNeo4jNode",
			Handler:    _NodeService_DeleteNeo4JNode_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _NodeService_DeleteNodes_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _NodeService_ListNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _NodeService_GetNode_Handler,
		},
		{
			MethodName: "GetNodeByName",
			Handler:    _NodeService_GetNodeByName_Handler,
		},
		{
			MethodName: "ExistsNode",
			Handler:    _NodeService_ExistsNode_Handler,
		},
		{
			MethodName: "GetNeo4jNode",
			Handler:    _NodeService_GetNeo4JNode_Handler,
		},
		{
			MethodName: "GetNodeCount",
			Handler:    _NodeService_GetNodeCount_Handler,
		},
		{
			MethodName: "GetTreeStructNodes",
			Handler:    _NodeService_GetTreeStructNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/cmdb.proto",
}

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	SearchNodeRelation(ctx context.Context, in *ByNodeIdsRequest, opts ...grpc.CallOption) (*SearchRelationResponse, error)
	CountNodeRelations(ctx context.Context, in *ByNodeIdAndRelationNameRequest, opts ...grpc.CallOption) (*CountNodeRelationsResponse, error)
	GetNodeRelation(ctx context.Context, in *ByJqlRequest, opts ...grpc.CallOption) (*GetNodeRelationResponse, error)
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error)
	ClearRelation(ctx context.Context, in *ClearRelationRequest, opts ...grpc.CallOption) (*ClearRelationResponse, error)
	ClearAllRelation(ctx context.Context, in *ClearAllRelationRequest, opts ...grpc.CallOption) (*ClearAllRelationResponse, error)
	GetNodeRelationTreeDetail(ctx context.Context, in *GetNodeRelationTreeDetailRequest, opts ...grpc.CallOption) (*GetNodeRelationTreeDetailResponse, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) SearchNodeRelation(ctx context.Context, in *ByNodeIdsRequest, opts ...grpc.CallOption) (*SearchRelationResponse, error) {
	out := new(SearchRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/SearchNodeRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) CountNodeRelations(ctx context.Context, in *ByNodeIdAndRelationNameRequest, opts ...grpc.CallOption) (*CountNodeRelationsResponse, error) {
	out := new(CountNodeRelationsResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/CountNodeRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetNodeRelation(ctx context.Context, in *ByJqlRequest, opts ...grpc.CallOption) (*GetNodeRelationResponse, error) {
	out := new(GetNodeRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/GetNodeRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error) {
	out := new(CreateRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/CreateRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ClearRelation(ctx context.Context, in *ClearRelationRequest, opts ...grpc.CallOption) (*ClearRelationResponse, error) {
	out := new(ClearRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/ClearRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ClearAllRelation(ctx context.Context, in *ClearAllRelationRequest, opts ...grpc.CallOption) (*ClearAllRelationResponse, error) {
	out := new(ClearAllRelationResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/ClearAllRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetNodeRelationTreeDetail(ctx context.Context, in *GetNodeRelationTreeDetailRequest, opts ...grpc.CallOption) (*GetNodeRelationTreeDetailResponse, error) {
	out := new(GetNodeRelationTreeDetailResponse)
	err := c.cc.Invoke(ctx, "/rpc.RelationService/GetNodeRelationTreeDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	SearchNodeRelation(context.Context, *ByNodeIdsRequest) (*SearchRelationResponse, error)
	CountNodeRelations(context.Context, *ByNodeIdAndRelationNameRequest) (*CountNodeRelationsResponse, error)
	GetNodeRelation(context.Context, *ByJqlRequest) (*GetNodeRelationResponse, error)
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error)
	ClearRelation(context.Context, *ClearRelationRequest) (*ClearRelationResponse, error)
	ClearAllRelation(context.Context, *ClearAllRelationRequest) (*ClearAllRelationResponse, error)
	GetNodeRelationTreeDetail(context.Context, *GetNodeRelationTreeDetailRequest) (*GetNodeRelationTreeDetailResponse, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) SearchNodeRelation(context.Context, *ByNodeIdsRequest) (*SearchRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeRelation not implemented")
}
func (UnimplementedRelationServiceServer) CountNodeRelations(context.Context, *ByNodeIdAndRelationNameRequest) (*CountNodeRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNodeRelations not implemented")
}
func (UnimplementedRelationServiceServer) GetNodeRelation(context.Context, *ByJqlRequest) (*GetNodeRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRelation not implemented")
}
func (UnimplementedRelationServiceServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedRelationServiceServer) ClearRelation(context.Context, *ClearRelationRequest) (*ClearRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearRelation not implemented")
}
func (UnimplementedRelationServiceServer) ClearAllRelation(context.Context, *ClearAllRelationRequest) (*ClearAllRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllRelation not implemented")
}
func (UnimplementedRelationServiceServer) GetNodeRelationTreeDetail(context.Context, *GetNodeRelationTreeDetailRequest) (*GetNodeRelationTreeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRelationTreeDetail not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_SearchNodeRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).SearchNodeRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/SearchNodeRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).SearchNodeRelation(ctx, req.(*ByNodeIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_CountNodeRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdAndRelationNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).CountNodeRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/CountNodeRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).CountNodeRelations(ctx, req.(*ByNodeIdAndRelationNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetNodeRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByJqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetNodeRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/GetNodeRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetNodeRelation(ctx, req.(*ByJqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/CreateRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ClearRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ClearRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/ClearRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ClearRelation(ctx, req.(*ClearRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ClearAllRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ClearAllRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/ClearAllRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ClearAllRelation(ctx, req.(*ClearAllRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetNodeRelationTreeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRelationTreeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetNodeRelationTreeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RelationService/GetNodeRelationTreeDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetNodeRelationTreeDetail(ctx, req.(*GetNodeRelationTreeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchNodeRelation",
			Handler:    _RelationService_SearchNodeRelation_Handler,
		},
		{
			MethodName: "CountNodeRelations",
			Handler:    _RelationService_CountNodeRelations_Handler,
		},
		{
			MethodName: "GetNodeRelation",
			Handler:    _RelationService_GetNodeRelation_Handler,
		},
		{
			MethodName: "CreateRelation",
			Handler:    _RelationService_CreateRelation_Handler,
		},
		{
			MethodName: "ClearRelation",
			Handler:    _RelationService_ClearRelation_Handler,
		},
		{
			MethodName: "ClearAllRelation",
			Handler:    _RelationService_ClearAllRelation_Handler,
		},
		{
			MethodName: "GetNodeRelationTreeDetail",
			Handler:    _RelationService_GetNodeRelationTreeDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/cmdb.proto",
}

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	ListModel(ctx context.Context, in *ByPageAndKeywordRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	CreateModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	UpdateModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DeleteModel(ctx context.Context, in *ByModelIdAndUsernameRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetModelByLabel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	BindingProperty(ctx context.Context, in *ByModelIdAndRelationPropertyRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DeleteBindingProperty(ctx context.Context, in *ByModelIdAndRelationPropertyRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetBindingProperties(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) ListModel(ctx context.Context, in *ByPageAndKeywordRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/ListModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CreateModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteModel(ctx context.Context, in *ByModelIdAndUsernameRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelByLabel(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/GetModelByLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) BindingProperty(ctx context.Context, in *ByModelIdAndRelationPropertyRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/BindingProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBindingProperty(ctx context.Context, in *ByModelIdAndRelationPropertyRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/DeleteBindingProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBindingProperties(ctx context.Context, in *common.SimpleJsonRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ModelService/GetBindingProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	ListModel(context.Context, *ByPageAndKeywordRequest) (*common.SimpleJsonResponse, error)
	CreateModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error)
	UpdateModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error)
	DeleteModel(context.Context, *ByModelIdAndUsernameRequest) (*common.SimpleJsonResponse, error)
	GetModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error)
	GetModelByLabel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error)
	BindingProperty(context.Context, *ByModelIdAndRelationPropertyRequest) (*common.SimpleJsonResponse, error)
	DeleteBindingProperty(context.Context, *ByModelIdAndRelationPropertyRequest) (*common.SimpleJsonResponse, error)
	GetBindingProperties(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error)
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) ListModel(context.Context, *ByPageAndKeywordRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModel not implemented")
}
func (UnimplementedModelServiceServer) CreateModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelServiceServer) UpdateModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServiceServer) DeleteModel(context.Context, *ByModelIdAndUsernameRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelServiceServer) GetModel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelServiceServer) GetModelByLabel(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelByLabel not implemented")
}
func (UnimplementedModelServiceServer) BindingProperty(context.Context, *ByModelIdAndRelationPropertyRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingProperty not implemented")
}
func (UnimplementedModelServiceServer) DeleteBindingProperty(context.Context, *ByModelIdAndRelationPropertyRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBindingProperty not implemented")
}
func (UnimplementedModelServiceServer) GetBindingProperties(context.Context, *common.SimpleJsonRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindingProperties not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_ListModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByPageAndKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ListModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/ListModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ListModel(ctx, req.(*ByPageAndKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SimpleJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CreateModel(ctx, req.(*common.SimpleJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SimpleJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModel(ctx, req.(*common.SimpleJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByModelIdAndUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteModel(ctx, req.(*ByModelIdAndUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SimpleJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModel(ctx, req.(*common.SimpleJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelByLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SimpleJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelByLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/GetModelByLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelByLabel(ctx, req.(*common.SimpleJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_BindingProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByModelIdAndRelationPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).BindingProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/BindingProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).BindingProperty(ctx, req.(*ByModelIdAndRelationPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBindingProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByModelIdAndRelationPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBindingProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/DeleteBindingProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBindingProperty(ctx, req.(*ByModelIdAndRelationPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBindingProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SimpleJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBindingProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ModelService/GetBindingProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBindingProperties(ctx, req.(*common.SimpleJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModel",
			Handler:    _ModelService_ListModel_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _ModelService_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelService_DeleteModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelService_GetModel_Handler,
		},
		{
			MethodName: "GetModelByLabel",
			Handler:    _ModelService_GetModelByLabel_Handler,
		},
		{
			MethodName: "BindingProperty",
			Handler:    _ModelService_BindingProperty_Handler,
		},
		{
			MethodName: "DeleteBindingProperty",
			Handler:    _ModelService_DeleteBindingProperty_Handler,
		},
		{
			MethodName: "GetBindingProperties",
			Handler:    _ModelService_GetBindingProperties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/cmdb.proto",
}

// ExcelServiceClient is the client API for ExcelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelServiceClient interface {
	UploadExcel(ctx context.Context, in *WithFileInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	DownloadExcel(ctx context.Context, in *ByNodeIdsRequest, opts ...grpc.CallOption) (*DownloadExcelResponse, error)
}

type excelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelServiceClient(cc grpc.ClientConnInterface) ExcelServiceClient {
	return &excelServiceClient{cc}
}

func (c *excelServiceClient) UploadExcel(ctx context.Context, in *WithFileInfoRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.ExcelService/UploadExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelServiceClient) DownloadExcel(ctx context.Context, in *ByNodeIdsRequest, opts ...grpc.CallOption) (*DownloadExcelResponse, error) {
	out := new(DownloadExcelResponse)
	err := c.cc.Invoke(ctx, "/rpc.ExcelService/DownloadExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelServiceServer is the server API for ExcelService service.
// All implementations must embed UnimplementedExcelServiceServer
// for forward compatibility
type ExcelServiceServer interface {
	UploadExcel(context.Context, *WithFileInfoRequest) (*common.SimpleJsonResponse, error)
	DownloadExcel(context.Context, *ByNodeIdsRequest) (*DownloadExcelResponse, error)
	mustEmbedUnimplementedExcelServiceServer()
}

// UnimplementedExcelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExcelServiceServer struct {
}

func (UnimplementedExcelServiceServer) UploadExcel(context.Context, *WithFileInfoRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadExcel not implemented")
}
func (UnimplementedExcelServiceServer) DownloadExcel(context.Context, *ByNodeIdsRequest) (*DownloadExcelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadExcel not implemented")
}
func (UnimplementedExcelServiceServer) mustEmbedUnimplementedExcelServiceServer() {}

// UnsafeExcelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelServiceServer will
// result in compilation errors.
type UnsafeExcelServiceServer interface {
	mustEmbedUnimplementedExcelServiceServer()
}

func RegisterExcelServiceServer(s grpc.ServiceRegistrar, srv ExcelServiceServer) {
	s.RegisterService(&ExcelService_ServiceDesc, srv)
}

func _ExcelService_UploadExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).UploadExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ExcelService/UploadExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).UploadExcel(ctx, req.(*WithFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelService_DownloadExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNodeIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServiceServer).DownloadExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ExcelService/DownloadExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServiceServer).DownloadExcel(ctx, req.(*ByNodeIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExcelService_ServiceDesc is the grpc.ServiceDesc for ExcelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ExcelService",
	HandlerType: (*ExcelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadExcel",
			Handler:    _ExcelService_UploadExcel_Handler,
		},
		{
			MethodName: "DownloadExcel",
			Handler:    _ExcelService_DownloadExcel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/cmdb.proto",
}

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	CreateTable(ctx context.Context, in *WithTableRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	CreateTableGroup(ctx context.Context, in *WithTableGroupRequest, opts ...grpc.CallOption) (*CreateTableGroupResponse, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) CreateTable(ctx context.Context, in *WithTableRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.TableService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) CreateTableGroup(ctx context.Context, in *WithTableGroupRequest, opts ...grpc.CallOption) (*CreateTableGroupResponse, error) {
	out := new(CreateTableGroupResponse)
	err := c.cc.Invoke(ctx, "/rpc.TableService/CreateTableGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
	CreateTable(context.Context, *WithTableRequest) (*common.SimpleJsonResponse, error)
	CreateTableGroup(context.Context, *WithTableGroupRequest) (*CreateTableGroupResponse, error)
	mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) CreateTable(context.Context, *WithTableRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedTableServiceServer) CreateTableGroup(context.Context, *WithTableGroupRequest) (*CreateTableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableGroup not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TableService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).CreateTable(ctx, req.(*WithTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_CreateTableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithTableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).CreateTableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TableService/CreateTableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).CreateTableGroup(ctx, req.(*WithTableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _TableService_CreateTable_Handler,
		},
		{
			MethodName: "CreateTableGroup",
			Handler:    _TableService_CreateTableGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/cmdb.proto",
}
