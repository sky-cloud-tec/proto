// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.4
// source: src/grpc/ipam.proto

package rpc

import (
	context "context"
	ipam "github.com/sky-cloud-tec/proto/v1/ipam"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ByIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *ByIpRequest) Reset() {
	*x = ByIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_ipam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByIpRequest) ProtoMessage() {}

func (x *ByIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_ipam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByIpRequest.ProtoReflect.Descriptor instead.
func (*ByIpRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_ipam_proto_rawDescGZIP(), []int{0}
}

func (x *ByIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ByEmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ByEmptyRequest) Reset() {
	*x = ByEmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_ipam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByEmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByEmptyRequest) ProtoMessage() {}

func (x *ByEmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_ipam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByEmptyRequest.ProtoReflect.Descriptor instead.
func (*ByEmptyRequest) Descriptor() ([]byte, []int) {
	return file_src_grpc_ipam_proto_rawDescGZIP(), []int{1}
}

type GetDeviceMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpamItem *ipam.IpamItem `protobuf:"bytes,10,opt,name=ipam_item,json=ipamItem,proto3" json:"ipam_item,omitempty"`
}

func (x *GetDeviceMsgResponse) Reset() {
	*x = GetDeviceMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_ipam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceMsgResponse) ProtoMessage() {}

func (x *GetDeviceMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_ipam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceMsgResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceMsgResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_ipam_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeviceMsgResponse) GetIpamItem() *ipam.IpamItem {
	if x != nil {
		return x.IpamItem
	}
	return nil
}

type ListDeviceMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Up        string           `protobuf:"bytes,10,opt,name=up,proto3" json:"up,omitempty"`
	Down      string           `protobuf:"bytes,20,opt,name=down,proto3" json:"down,omitempty"`
	Total     string           `protobuf:"bytes,30,opt,name=total,proto3" json:"total,omitempty"`
	IpamItems []*ipam.IpamItem `protobuf:"bytes,40,rep,name=ipam_items,json=ipamItems,proto3" json:"ipam_items,omitempty"`
}

func (x *ListDeviceMsgResponse) Reset() {
	*x = ListDeviceMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_ipam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceMsgResponse) ProtoMessage() {}

func (x *ListDeviceMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_ipam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceMsgResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceMsgResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_ipam_proto_rawDescGZIP(), []int{3}
}

func (x *ListDeviceMsgResponse) GetUp() string {
	if x != nil {
		return x.Up
	}
	return ""
}

func (x *ListDeviceMsgResponse) GetDown() string {
	if x != nil {
		return x.Down
	}
	return ""
}

func (x *ListDeviceMsgResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *ListDeviceMsgResponse) GetIpamItems() []*ipam.IpamItem {
	if x != nil {
		return x.IpamItems
	}
	return nil
}

type GetDeviceSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets []string `protobuf:"bytes,10,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *GetDeviceSubnetResponse) Reset() {
	*x = GetDeviceSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_grpc_ipam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSubnetResponse) ProtoMessage() {}

func (x *GetDeviceSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_grpc_ipam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSubnetResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceSubnetResponse) Descriptor() ([]byte, []int) {
	return file_src_grpc_ipam_proto_rawDescGZIP(), []int{4}
}

func (x *GetDeviceSubnetResponse) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

var File_src_grpc_ipam_proto protoreflect.FileDescriptor

var file_src_grpc_ipam_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x13, 0x73, 0x72, 0x63, 0x2f,
	0x69, 0x70, 0x61, 0x6d, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1d, 0x0a, 0x0b, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x10,
	0x0a, 0x0e, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x6d,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x70,
	0x61, 0x6d, 0x2e, 0x49, 0x70, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x70, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x69, 0x70, 0x61,
	0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x69, 0x70, 0x61, 0x6d, 0x2e, 0x49, 0x70, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x69,
	0x70, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x32, 0xd9, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x79, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x0a, 0x16, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6b, 0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x70, 0x63, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6b, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x74, 0x65, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_src_grpc_ipam_proto_rawDescOnce sync.Once
	file_src_grpc_ipam_proto_rawDescData = file_src_grpc_ipam_proto_rawDesc
)

func file_src_grpc_ipam_proto_rawDescGZIP() []byte {
	file_src_grpc_ipam_proto_rawDescOnce.Do(func() {
		file_src_grpc_ipam_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_grpc_ipam_proto_rawDescData)
	})
	return file_src_grpc_ipam_proto_rawDescData
}

var file_src_grpc_ipam_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_src_grpc_ipam_proto_goTypes = []interface{}{
	(*ByIpRequest)(nil),             // 0: rpc.ByIpRequest
	(*ByEmptyRequest)(nil),          // 1: rpc.ByEmptyRequest
	(*GetDeviceMsgResponse)(nil),    // 2: rpc.GetDeviceMsgResponse
	(*ListDeviceMsgResponse)(nil),   // 3: rpc.ListDeviceMsgResponse
	(*GetDeviceSubnetResponse)(nil), // 4: rpc.GetDeviceSubnetResponse
	(*ipam.IpamItem)(nil),           // 5: ipam.IpamItem
}
var file_src_grpc_ipam_proto_depIdxs = []int32{
	5, // 0: rpc.GetDeviceMsgResponse.ipam_item:type_name -> ipam.IpamItem
	5, // 1: rpc.ListDeviceMsgResponse.ipam_items:type_name -> ipam.IpamItem
	0, // 2: rpc.DeviceService.GetDeviceMsg:input_type -> rpc.ByIpRequest
	0, // 3: rpc.DeviceService.ListDeviceMsg:input_type -> rpc.ByIpRequest
	1, // 4: rpc.DeviceService.GetDeviceSubnet:input_type -> rpc.ByEmptyRequest
	2, // 5: rpc.DeviceService.GetDeviceMsg:output_type -> rpc.GetDeviceMsgResponse
	3, // 6: rpc.DeviceService.ListDeviceMsg:output_type -> rpc.ListDeviceMsgResponse
	4, // 7: rpc.DeviceService.GetDeviceSubnet:output_type -> rpc.GetDeviceSubnetResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_src_grpc_ipam_proto_init() }
func file_src_grpc_ipam_proto_init() {
	if File_src_grpc_ipam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_grpc_ipam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_ipam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByEmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_ipam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_ipam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_grpc_ipam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_grpc_ipam_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_grpc_ipam_proto_goTypes,
		DependencyIndexes: file_src_grpc_ipam_proto_depIdxs,
		MessageInfos:      file_src_grpc_ipam_proto_msgTypes,
	}.Build()
	File_src_grpc_ipam_proto = out.File
	file_src_grpc_ipam_proto_rawDesc = nil
	file_src_grpc_ipam_proto_goTypes = nil
	file_src_grpc_ipam_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDeviceMsg(ctx context.Context, in *ByIpRequest, opts ...grpc.CallOption) (*GetDeviceMsgResponse, error)
	ListDeviceMsg(ctx context.Context, opts ...grpc.CallOption) (DeviceService_ListDeviceMsgClient, error)
	GetDeviceSubnet(ctx context.Context, in *ByEmptyRequest, opts ...grpc.CallOption) (*GetDeviceSubnetResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDeviceMsg(ctx context.Context, in *ByIpRequest, opts ...grpc.CallOption) (*GetDeviceMsgResponse, error) {
	out := new(GetDeviceMsgResponse)
	err := c.cc.Invoke(ctx, "/rpc.DeviceService/GetDeviceMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListDeviceMsg(ctx context.Context, opts ...grpc.CallOption) (DeviceService_ListDeviceMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[0], "/rpc.DeviceService/ListDeviceMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceListDeviceMsgClient{stream}
	return x, nil
}

type DeviceService_ListDeviceMsgClient interface {
	Send(*ByIpRequest) error
	CloseAndRecv() (*ListDeviceMsgResponse, error)
	grpc.ClientStream
}

type deviceServiceListDeviceMsgClient struct {
	grpc.ClientStream
}

func (x *deviceServiceListDeviceMsgClient) Send(m *ByIpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceListDeviceMsgClient) CloseAndRecv() (*ListDeviceMsgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListDeviceMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetDeviceSubnet(ctx context.Context, in *ByEmptyRequest, opts ...grpc.CallOption) (*GetDeviceSubnetResponse, error) {
	out := new(GetDeviceSubnetResponse)
	err := c.cc.Invoke(ctx, "/rpc.DeviceService/GetDeviceSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	GetDeviceMsg(context.Context, *ByIpRequest) (*GetDeviceMsgResponse, error)
	ListDeviceMsg(DeviceService_ListDeviceMsgServer) error
	GetDeviceSubnet(context.Context, *ByEmptyRequest) (*GetDeviceSubnetResponse, error)
}

// UnimplementedDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (*UnimplementedDeviceServiceServer) GetDeviceMsg(context.Context, *ByIpRequest) (*GetDeviceMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMsg not implemented")
}
func (*UnimplementedDeviceServiceServer) ListDeviceMsg(DeviceService_ListDeviceMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeviceMsg not implemented")
}
func (*UnimplementedDeviceServiceServer) GetDeviceSubnet(context.Context, *ByEmptyRequest) (*GetDeviceSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSubnet not implemented")
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_GetDeviceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DeviceService/GetDeviceMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceMsg(ctx, req.(*ByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListDeviceMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).ListDeviceMsg(&deviceServiceListDeviceMsgServer{stream})
}

type DeviceService_ListDeviceMsgServer interface {
	SendAndClose(*ListDeviceMsgResponse) error
	Recv() (*ByIpRequest, error)
	grpc.ServerStream
}

type deviceServiceListDeviceMsgServer struct {
	grpc.ServerStream
}

func (x *deviceServiceListDeviceMsgServer) SendAndClose(m *ListDeviceMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceListDeviceMsgServer) Recv() (*ByIpRequest, error) {
	m := new(ByIpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_GetDeviceSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DeviceService/GetDeviceSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceSubnet(ctx, req.(*ByEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceMsg",
			Handler:    _DeviceService_GetDeviceMsg_Handler,
		},
		{
			MethodName: "GetDeviceSubnet",
			Handler:    _DeviceService_GetDeviceSubnet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDeviceMsg",
			Handler:       _DeviceService_ListDeviceMsg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/grpc/ipam.proto",
}
