// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/grpc/workflow.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/sky-cloud-tec/proto/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ByIdAndPageRequest struct {
	Id                   string   `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Page                 int32    `protobuf:"varint,20,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int32    `protobuf:"varint,30,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByIdAndPageRequest) Reset()         { *m = ByIdAndPageRequest{} }
func (m *ByIdAndPageRequest) String() string { return proto.CompactTextString(m) }
func (*ByIdAndPageRequest) ProtoMessage()    {}
func (*ByIdAndPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4070408761cedc, []int{0}
}

func (m *ByIdAndPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByIdAndPageRequest.Unmarshal(m, b)
}
func (m *ByIdAndPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByIdAndPageRequest.Marshal(b, m, deterministic)
}
func (m *ByIdAndPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByIdAndPageRequest.Merge(m, src)
}
func (m *ByIdAndPageRequest) XXX_Size() int {
	return xxx_messageInfo_ByIdAndPageRequest.Size(m)
}
func (m *ByIdAndPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByIdAndPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByIdAndPageRequest proto.InternalMessageInfo

func (m *ByIdAndPageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ByIdAndPageRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ByIdAndPageRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*ByIdAndPageRequest)(nil), "rpc.ByIdAndPageRequest")
}

func init() { proto.RegisterFile("src/grpc/workflow.proto", fileDescriptor_7b4070408761cedc) }

var fileDescriptor_7b4070408761cedc = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0xc7, 0xed, 0xfc, 0x00, 0xa3, 0x38, 0x08, 0xea, 0x4a, 0x2f, 0x64, 0x0c, 0x84, 0xdd, 0x2c,
	0xc1, 0xf9, 0x00, 0xe2, 0x50, 0x86, 0xb2, 0x8b, 0xd1, 0x0a, 0x82, 0x77, 0x5d, 0x72, 0xac, 0xa1,
	0x1f, 0x89, 0x39, 0xe9, 0x46, 0x7d, 0x18, 0xdf, 0xce, 0xf7, 0x90, 0xb6, 0xee, 0x42, 0xbc, 0x73,
	0xbb, 0x3b, 0xf9, 0xfd, 0x93, 0xdf, 0xc9, 0xe1, 0x90, 0x1e, 0x5a, 0xc1, 0x13, 0x6b, 0x04, 0x5f,
	0x69, 0x9b, 0xbe, 0x66, 0x7a, 0xc5, 0x8c, 0xd5, 0x4e, 0xd3, 0x5d, 0x6b, 0x44, 0x70, 0x56, 0xa7,
	0x42, 0xe7, 0xb9, 0x2e, 0x78, 0x8e, 0x09, 0xb6, 0xd9, 0x60, 0x46, 0xe8, 0xa4, 0x7a, 0x90, 0xb7,
	0x85, 0x9c, 0xc7, 0x09, 0x84, 0xf0, 0x5e, 0x02, 0x3a, 0x7a, 0x42, 0x3a, 0x4a, 0xfa, 0xa4, 0xef,
	0x0d, 0x0f, 0xc3, 0x8e, 0x92, 0x94, 0x92, 0x3d, 0x13, 0x27, 0xe0, 0x9f, 0xf6, 0xbd, 0xe1, 0x7e,
	0xd8, 0xd4, 0x35, 0x43, 0xf5, 0x01, 0xfe, 0x45, 0xcb, 0xea, 0x7a, 0xfc, 0xe5, 0x91, 0xee, 0xf3,
	0x4f, 0xf3, 0x08, 0xec, 0x52, 0x09, 0xa0, 0x77, 0xe4, 0x68, 0x0a, 0x6e, 0x4d, 0x69, 0x8f, 0x59,
	0x23, 0xd8, 0xdf, 0x9e, 0x41, 0xc0, 0xda, 0xdf, 0xb1, 0x48, 0xe5, 0x26, 0x83, 0x47, 0xd4, 0x45,
	0x08, 0x68, 0x74, 0x81, 0x30, 0xd8, 0xa1, 0xf7, 0xe4, 0x78, 0xa6, 0x70, 0x1b, 0x9a, 0x29, 0xb8,
	0xb9, 0x96, 0x91, 0x8b, 0x5d, 0x89, 0xff, 0xd4, 0x8c, 0x3f, 0x3d, 0xd2, 0x7d, 0x82, 0xdc, 0x64,
	0xb1, 0x83, 0xdf, 0x73, 0xae, 0xe9, 0x86, 0x73, 0x6e, 0xa8, 0x99, 0xdc, 0x90, 0xf3, 0x02, 0x1c,
	0xc3, 0xb4, 0x12, 0x99, 0x2e, 0x65, 0xbb, 0xec, 0x5a, 0xf5, 0x72, 0x99, 0x28, 0xf7, 0x56, 0x2e,
	0xea, 0xd7, 0x1c, 0xd3, 0x6a, 0xd4, 0xe4, 0x23, 0x07, 0x82, 0x37, 0x77, 0xf8, 0xf2, 0x8a, 0x5b,
	0x23, 0x16, 0x07, 0xcd, 0xe9, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xc6, 0x04, 0xbb, 0x55,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	GetWorkflow(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	ListWorkflow(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	GetPodStatus(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.WorkflowService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflow(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.WorkflowService/ListWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetPodStatus(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.WorkflowService/GetPodStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
type WorkflowServiceServer interface {
	GetWorkflow(context.Context, *ByIdAndPageRequest) (*common.SimpleJsonResponse, error)
	ListWorkflow(context.Context, *ByIdAndPageRequest) (*common.SimpleJsonResponse, error)
	GetPodStatus(context.Context, *ByIdAndPageRequest) (*common.SimpleJsonResponse, error)
}

// UnimplementedWorkflowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (*UnimplementedWorkflowServiceServer) GetWorkflow(ctx context.Context, req *ByIdAndPageRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) ListWorkflow(ctx context.Context, req *ByIdAndPageRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) GetPodStatus(ctx context.Context, req *ByIdAndPageRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodStatus not implemented")
}

func RegisterWorkflowServiceServer(s *grpc.Server, srv WorkflowServiceServer) {
	s.RegisterService(&_WorkflowService_serviceDesc, srv)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.WorkflowService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*ByIdAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.WorkflowService/ListWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflow(ctx, req.(*ByIdAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetPodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetPodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.WorkflowService/GetPodStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetPodStatus(ctx, req.(*ByIdAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflow",
			Handler:    _WorkflowService_ListWorkflow_Handler,
		},
		{
			MethodName: "GetPodStatus",
			Handler:    _WorkflowService_GetPodStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/workflow.proto",
}

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplateServiceClient interface {
	GetTemplate(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
	ListTemplate(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error)
}

type templateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServiceClient(cc grpc.ClientConnInterface) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) GetTemplate(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.TemplateService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplate(ctx context.Context, in *ByIdAndPageRequest, opts ...grpc.CallOption) (*common.SimpleJsonResponse, error) {
	out := new(common.SimpleJsonResponse)
	err := c.cc.Invoke(ctx, "/rpc.TemplateService/ListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
type TemplateServiceServer interface {
	GetTemplate(context.Context, *ByIdAndPageRequest) (*common.SimpleJsonResponse, error)
	ListTemplate(context.Context, *ByIdAndPageRequest) (*common.SimpleJsonResponse, error)
}

// UnimplementedTemplateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTemplateServiceServer struct {
}

func (*UnimplementedTemplateServiceServer) GetTemplate(ctx context.Context, req *ByIdAndPageRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplateServiceServer) ListTemplate(ctx context.Context, req *ByIdAndPageRequest) (*common.SimpleJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}

func RegisterTemplateServiceServer(s *grpc.Server, srv TemplateServiceServer) {
	s.RegisterService(&_TemplateService_serviceDesc, srv)
}

func _TemplateService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TemplateService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).GetTemplate(ctx, req.(*ByIdAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TemplateService/ListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplate(ctx, req.(*ByIdAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemplate",
			Handler:    _TemplateService_GetTemplate_Handler,
		},
		{
			MethodName: "ListTemplate",
			Handler:    _TemplateService_ListTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/workflow.proto",
}
