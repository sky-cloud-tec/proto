// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: src/eventti/eventti.proto

package eventti

import (
	baas "github.com/sky-cloud-tec/proto/v1/baas"
	dom "github.com/sky-cloud-tec/proto/v1/dom"
	nap "github.com/sky-cloud-tec/proto/v1/nap"
	workflow "github.com/sky-cloud-tec/proto/v1/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_HEART_BEAT                    EventType = 0
	EventType_DEVICE_CONFIG_UPDATED         EventType = 1
	EventType_DEVICE_RAW_CONFIG_SYNCING     EventType = 2
	EventType_DEVICE_RAW_CONFIG_SYNCED      EventType = 3
	EventType_DEVICE_OBJECT_CONFIG_ANALYSED EventType = 4
	EventType_DEVICE_STATE_CHANGED          EventType = 5
	EventType_DEVICE_CANDIDATE_CREATED      EventType = 6
	EventType_DEVICE_DELETE                 EventType = 7
	EventType_TICKET_CREATED                EventType = 8
	EventType_TICKET_STATE_CHANGED          EventType = 9
	EventType_TICKET_WILL_EXPIRED           EventType = 10
	EventType_ACTIVITY_FAIL                 EventType = 11
	EventType_WORKFLOW_STATE_CHANGED        EventType = 12
	EventType_WORKFLOW_STAGE_STATE_CHANGED  EventType = 13
	EventType_BAAS_TEST                     EventType = 14
	EventType_BAAS_BACKUP_DOMAIN            EventType = 15
	EventType_BAAS_BACKUP_POLICY            EventType = 16
	EventType_BAAS_BACKUP_POLICY_EXECUTE    EventType = 17
	EventType_USER_LOGIN                    EventType = 18
	EventType_WORKFLOW_TICKET_CREATED       EventType = 19
	EventType_WORKFLOW_TICKET_DELETE        EventType = 20
	EventType_WORKFLOW_TEMPLATE_CREATED     EventType = 21
	EventType_WORKFLOW_TEMPLATE_UPDATE      EventType = 22
	EventType_WORKFLOW_TEMPLATE_DELETE      EventType = 23
	EventType_AUTH_ROLE_CHANGE              EventType = 24
	EventType_WORKFLOW_TICKET_SUBMITED      EventType = 25
	EventType_WORKFLOW_TICKET_RUNNING       EventType = 26
	EventType_CMDB_NODE_CREATED             EventType = 27
	EventType_CMDB_NODE_UPDATE              EventType = 28
	EventType_CMDB_NODE_DELETE              EventType = 29
	EventType_WORKFLOW_TICKET_UPDATED       EventType = 30
	EventType_VM_CREATE                     EventType = 31
	EventType_VM_UPDATE                     EventType = 32
	EventType_VM_DELETE                     EventType = 33
	EventType_NETAI_BKT_RECORD              EventType = 34
	EventType_NETAI_BKT_DAU                 EventType = 35
	EventType_DEVICE_OBJECT_SHOW            EventType = 36
	EventType_DEVICE_OBJECT_CREATE_FAIL     EventType = 37
	EventType_IPSCAN_MSG_SHOW               EventType = 38
	EventType_EXCEL_IP_IMPORT               EventType = 39
	EventType_TASK_TICKET_CREATED           EventType = 40
	EventType_PIPELINE_STATE_UPDATE         EventType = 41
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "HEART_BEAT",
		1:  "DEVICE_CONFIG_UPDATED",
		2:  "DEVICE_RAW_CONFIG_SYNCING",
		3:  "DEVICE_RAW_CONFIG_SYNCED",
		4:  "DEVICE_OBJECT_CONFIG_ANALYSED",
		5:  "DEVICE_STATE_CHANGED",
		6:  "DEVICE_CANDIDATE_CREATED",
		7:  "DEVICE_DELETE",
		8:  "TICKET_CREATED",
		9:  "TICKET_STATE_CHANGED",
		10: "TICKET_WILL_EXPIRED",
		11: "ACTIVITY_FAIL",
		12: "WORKFLOW_STATE_CHANGED",
		13: "WORKFLOW_STAGE_STATE_CHANGED",
		14: "BAAS_TEST",
		15: "BAAS_BACKUP_DOMAIN",
		16: "BAAS_BACKUP_POLICY",
		17: "BAAS_BACKUP_POLICY_EXECUTE",
		18: "USER_LOGIN",
		19: "WORKFLOW_TICKET_CREATED",
		20: "WORKFLOW_TICKET_DELETE",
		21: "WORKFLOW_TEMPLATE_CREATED",
		22: "WORKFLOW_TEMPLATE_UPDATE",
		23: "WORKFLOW_TEMPLATE_DELETE",
		24: "AUTH_ROLE_CHANGE",
		25: "WORKFLOW_TICKET_SUBMITED",
		26: "WORKFLOW_TICKET_RUNNING",
		27: "CMDB_NODE_CREATED",
		28: "CMDB_NODE_UPDATE",
		29: "CMDB_NODE_DELETE",
		30: "WORKFLOW_TICKET_UPDATED",
		31: "VM_CREATE",
		32: "VM_UPDATE",
		33: "VM_DELETE",
		34: "NETAI_BKT_RECORD",
		35: "NETAI_BKT_DAU",
		36: "DEVICE_OBJECT_SHOW",
		37: "DEVICE_OBJECT_CREATE_FAIL",
		38: "IPSCAN_MSG_SHOW",
		39: "EXCEL_IP_IMPORT",
		40: "TASK_TICKET_CREATED",
		41: "PIPELINE_STATE_UPDATE",
	}
	EventType_value = map[string]int32{
		"HEART_BEAT":                    0,
		"DEVICE_CONFIG_UPDATED":         1,
		"DEVICE_RAW_CONFIG_SYNCING":     2,
		"DEVICE_RAW_CONFIG_SYNCED":      3,
		"DEVICE_OBJECT_CONFIG_ANALYSED": 4,
		"DEVICE_STATE_CHANGED":          5,
		"DEVICE_CANDIDATE_CREATED":      6,
		"DEVICE_DELETE":                 7,
		"TICKET_CREATED":                8,
		"TICKET_STATE_CHANGED":          9,
		"TICKET_WILL_EXPIRED":           10,
		"ACTIVITY_FAIL":                 11,
		"WORKFLOW_STATE_CHANGED":        12,
		"WORKFLOW_STAGE_STATE_CHANGED":  13,
		"BAAS_TEST":                     14,
		"BAAS_BACKUP_DOMAIN":            15,
		"BAAS_BACKUP_POLICY":            16,
		"BAAS_BACKUP_POLICY_EXECUTE":    17,
		"USER_LOGIN":                    18,
		"WORKFLOW_TICKET_CREATED":       19,
		"WORKFLOW_TICKET_DELETE":        20,
		"WORKFLOW_TEMPLATE_CREATED":     21,
		"WORKFLOW_TEMPLATE_UPDATE":      22,
		"WORKFLOW_TEMPLATE_DELETE":      23,
		"AUTH_ROLE_CHANGE":              24,
		"WORKFLOW_TICKET_SUBMITED":      25,
		"WORKFLOW_TICKET_RUNNING":       26,
		"CMDB_NODE_CREATED":             27,
		"CMDB_NODE_UPDATE":              28,
		"CMDB_NODE_DELETE":              29,
		"WORKFLOW_TICKET_UPDATED":       30,
		"VM_CREATE":                     31,
		"VM_UPDATE":                     32,
		"VM_DELETE":                     33,
		"NETAI_BKT_RECORD":              34,
		"NETAI_BKT_DAU":                 35,
		"DEVICE_OBJECT_SHOW":            36,
		"DEVICE_OBJECT_CREATE_FAIL":     37,
		"IPSCAN_MSG_SHOW":               38,
		"EXCEL_IP_IMPORT":               39,
		"TASK_TICKET_CREATED":           40,
		"PIPELINE_STATE_UPDATE":         41,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_eventti_eventti_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_src_eventti_eventti_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{0}
}

type NotificationChannelType int32

const (
	NotificationChannelType_UNKNOWN_NOTIFICATION_CHANNEL_TYPE NotificationChannelType = 0
	NotificationChannelType_EMAIL                             NotificationChannelType = 10
	NotificationChannelType_PHONE                             NotificationChannelType = 20
	NotificationChannelType_WEBSOCKET                         NotificationChannelType = 30
	NotificationChannelType_GUOSEN_PUSH_OVER                  NotificationChannelType = 40
)

// Enum value maps for NotificationChannelType.
var (
	NotificationChannelType_name = map[int32]string{
		0:  "UNKNOWN_NOTIFICATION_CHANNEL_TYPE",
		10: "EMAIL",
		20: "PHONE",
		30: "WEBSOCKET",
		40: "GUOSEN_PUSH_OVER",
	}
	NotificationChannelType_value = map[string]int32{
		"UNKNOWN_NOTIFICATION_CHANNEL_TYPE": 0,
		"EMAIL":                             10,
		"PHONE":                             20,
		"WEBSOCKET":                         30,
		"GUOSEN_PUSH_OVER":                  40,
	}
)

func (x NotificationChannelType) Enum() *NotificationChannelType {
	p := new(NotificationChannelType)
	*p = x
	return p
}

func (x NotificationChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_eventti_eventti_proto_enumTypes[1].Descriptor()
}

func (NotificationChannelType) Type() protoreflect.EnumType {
	return &file_src_eventti_eventti_proto_enumTypes[1]
}

func (x NotificationChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationChannelType.Descriptor instead.
func (NotificationChannelType) EnumDescriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{1}
}

type EmailProtocol int32

const (
	EmailProtocol_UNKNOWN_PROTOCOL EmailProtocol = 0
	EmailProtocol_SMTP             EmailProtocol = 10
	EmailProtocol_SECURE_SMTP      EmailProtocol = 20
)

// Enum value maps for EmailProtocol.
var (
	EmailProtocol_name = map[int32]string{
		0:  "UNKNOWN_PROTOCOL",
		10: "SMTP",
		20: "SECURE_SMTP",
	}
	EmailProtocol_value = map[string]int32{
		"UNKNOWN_PROTOCOL": 0,
		"SMTP":             10,
		"SECURE_SMTP":      20,
	}
)

func (x EmailProtocol) Enum() *EmailProtocol {
	p := new(EmailProtocol)
	*p = x
	return p
}

func (x EmailProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_src_eventti_eventti_proto_enumTypes[2].Descriptor()
}

func (EmailProtocol) Type() protoreflect.EnumType {
	return &file_src_eventti_eventti_proto_enumTypes[2]
}

func (x EmailProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailProtocol.Descriptor instead.
func (EmailProtocol) EnumDescriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{2}
}

type IpScanState int32

const (
	IpScanState_UNKNOWN_STATE IpScanState = 0
	IpScanState_RUNNING       IpScanState = 1 // 运行中
	IpScanState_SUCCEEDED     IpScanState = 2 // 成功
	IpScanState_FAILED        IpScanState = 3 // 失败
)

// Enum value maps for IpScanState.
var (
	IpScanState_name = map[int32]string{
		0: "UNKNOWN_STATE",
		1: "RUNNING",
		2: "SUCCEEDED",
		3: "FAILED",
	}
	IpScanState_value = map[string]int32{
		"UNKNOWN_STATE": 0,
		"RUNNING":       1,
		"SUCCEEDED":     2,
		"FAILED":        3,
	}
)

func (x IpScanState) Enum() *IpScanState {
	p := new(IpScanState)
	*p = x
	return p
}

func (x IpScanState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpScanState) Descriptor() protoreflect.EnumDescriptor {
	return file_src_eventti_eventti_proto_enumTypes[3].Descriptor()
}

func (IpScanState) Type() protoreflect.EnumType {
	return &file_src_eventti_eventti_proto_enumTypes[3]
}

func (x IpScanState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpScanState.Descriptor instead.
func (IpScanState) EnumDescriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{3}
}

type From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   string `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	Module string `protobuf:"bytes,20,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *From) Reset() {
	*x = From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*From) ProtoMessage() {}

func (x *From) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use From.ProtoReflect.Descriptor instead.
func (*From) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{0}
}

func (x *From) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *From) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type DeviceConfigUpdatedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string `protobuf:"bytes,10,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceName string `protobuf:"bytes,20,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Message    string `protobuf:"bytes,30,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeviceConfigUpdatedMsg) Reset() {
	*x = DeviceConfigUpdatedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigUpdatedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigUpdatedMsg) ProtoMessage() {}

func (x *DeviceConfigUpdatedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigUpdatedMsg.ProtoReflect.Descriptor instead.
func (*DeviceConfigUpdatedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceConfigUpdatedMsg) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceConfigUpdatedMsg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceConfigUpdatedMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	From      *From     `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	Type      EventType `protobuf:"varint,20,opt,name=type,proto3,enum=eventti.EventType" json:"type,omitempty"`
	Timestamp int64     `protobuf:"varint,30,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata  *Metadata `protobuf:"bytes,40,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Target    *Target   `protobuf:"bytes,50,opt,name=target,proto3" json:"target,omitempty"` // additional targets
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Event) GetFrom() *From {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_HEART_BEAT
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Event) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 命名时注意,
	WorkflowStateChangedMsg    *WorkflowStateChangedMsg      `protobuf:"bytes,210,opt,name=workflow_state_changed_msg,json=workflowStateChangedMsg,proto3" json:"workflow_state_changed_msg,omitempty"`
	DeviceConfigUpdatedMsg     *DeviceConfigUpdatedMsg       `protobuf:"bytes,220,opt,name=device_config_updated_msg,json=deviceConfigUpdatedMsg,proto3" json:"device_config_updated_msg,omitempty"`
	WorkflowStageChangedMsg    *WorkflowStageStateChangedMsg `protobuf:"bytes,230,opt,name=workflow_stage_changed_msg,json=workflowStageChangedMsg,proto3" json:"workflow_stage_changed_msg,omitempty"`
	BassTestMsg                *BaasTestMsg                  `protobuf:"bytes,240,opt,name=bass_test_msg,json=bassTestMsg,proto3" json:"bass_test_msg,omitempty"`
	WorkflowTicketMsg          *WorkflowTicketMsg            `protobuf:"bytes,250,opt,name=workflow_ticket_msg,json=workflowTicketMsg,proto3" json:"workflow_ticket_msg,omitempty"`
	UserLoginMsg               *UserLoginMsg                 `protobuf:"bytes,260,opt,name=user_login_msg,json=userLoginMsg,proto3" json:"user_login_msg,omitempty"`
	BassBackupPolicyExecuteMsg *BaasBackupPolicyExecuteMsg   `protobuf:"bytes,270,opt,name=bass_backup_policy_execute_msg,json=bassBackupPolicyExecuteMsg,proto3" json:"bass_backup_policy_execute_msg,omitempty"`
	BaasBackupDomainMsg        *BaasBackupDomainMsg          `protobuf:"bytes,280,opt,name=baas_backup_domain_msg,json=baasBackupDomainMsg,proto3" json:"baas_backup_domain_msg,omitempty"`
	BaasBackupPolicyMsg        *BaasBackupPolicyMsg          `protobuf:"bytes,290,opt,name=baas_backup_policy_msg,json=baasBackupPolicyMsg,proto3" json:"baas_backup_policy_msg,omitempty"`
	WorkflowTemplateMsg        *WorkflowTemplateMsg          `protobuf:"bytes,300,opt,name=workflow_template_msg,json=workflowTemplateMsg,proto3" json:"workflow_template_msg,omitempty"`
	AuthRoleChangedMsg         *AuthRoleChangedMsg           `protobuf:"bytes,310,opt,name=auth_role_changed_msg,json=authRoleChangedMsg,proto3" json:"auth_role_changed_msg,omitempty"`
	WorkflowTicketSubmitedMsg  *WorkflowTicketSubmitedMsg    `protobuf:"bytes,320,opt,name=workflow_ticket_submited_msg,json=workflowTicketSubmitedMsg,proto3" json:"workflow_ticket_submited_msg,omitempty"`
	WorkflowTicketRunningMsg   *WorkflowTicketRunningMsg     `protobuf:"bytes,330,opt,name=workflow_ticket_running_msg,json=workflowTicketRunningMsg,proto3" json:"workflow_ticket_running_msg,omitempty"`
	CmdbNodeChangedMsg         *CmdbNodeChangedMsg           `protobuf:"bytes,340,opt,name=cmdb_node_changed_msg,json=cmdbNodeChangedMsg,proto3" json:"cmdb_node_changed_msg,omitempty"`
	VmInfo                     *VMInfo                       `protobuf:"bytes,350,opt,name=vm_info,json=vmInfo,proto3" json:"vm_info,omitempty"`
	// netai
	BktRecordMsg         *BktRecordMsg         `protobuf:"bytes,360,opt,name=bkt_record_msg,json=bktRecordMsg,proto3" json:"bkt_record_msg,omitempty"`
	DeviceObjectMsg      *DeviceObjectMsg      `protobuf:"bytes,370,opt,name=device_object_msg,json=deviceObjectMsg,proto3" json:"device_object_msg,omitempty"`
	IpScanMsg            *IpScanMsg            `protobuf:"bytes,380,opt,name=ip_scan_msg,json=ipScanMsg,proto3" json:"ip_scan_msg,omitempty"`
	ExcelImportIpMsg     *ExcelImportIpMsg     `protobuf:"bytes,390,opt,name=excel_import_ip_msg,json=excelImportIpMsg,proto3" json:"excel_import_ip_msg,omitempty"`
	TaskTicketMsg        *TaskTicketMsg        `protobuf:"bytes,400,opt,name=task_ticket_msg,json=taskTicketMsg,proto3" json:"task_ticket_msg,omitempty"`
	DeviceStateChangeMsg *DeviceStateChangeMsg `protobuf:"bytes,410,opt,name=device_state_change_msg,json=deviceStateChangeMsg,proto3" json:"device_state_change_msg,omitempty"`
	// pipeline
	PipelineStateChangeMsg *PipelineStateChangeMsg `protobuf:"bytes,420,opt,name=pipeline_state_change_msg,json=pipelineStateChangeMsg,proto3" json:"pipeline_state_change_msg,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetWorkflowStateChangedMsg() *WorkflowStateChangedMsg {
	if x != nil {
		return x.WorkflowStateChangedMsg
	}
	return nil
}

func (x *Metadata) GetDeviceConfigUpdatedMsg() *DeviceConfigUpdatedMsg {
	if x != nil {
		return x.DeviceConfigUpdatedMsg
	}
	return nil
}

func (x *Metadata) GetWorkflowStageChangedMsg() *WorkflowStageStateChangedMsg {
	if x != nil {
		return x.WorkflowStageChangedMsg
	}
	return nil
}

func (x *Metadata) GetBassTestMsg() *BaasTestMsg {
	if x != nil {
		return x.BassTestMsg
	}
	return nil
}

func (x *Metadata) GetWorkflowTicketMsg() *WorkflowTicketMsg {
	if x != nil {
		return x.WorkflowTicketMsg
	}
	return nil
}

func (x *Metadata) GetUserLoginMsg() *UserLoginMsg {
	if x != nil {
		return x.UserLoginMsg
	}
	return nil
}

func (x *Metadata) GetBassBackupPolicyExecuteMsg() *BaasBackupPolicyExecuteMsg {
	if x != nil {
		return x.BassBackupPolicyExecuteMsg
	}
	return nil
}

func (x *Metadata) GetBaasBackupDomainMsg() *BaasBackupDomainMsg {
	if x != nil {
		return x.BaasBackupDomainMsg
	}
	return nil
}

func (x *Metadata) GetBaasBackupPolicyMsg() *BaasBackupPolicyMsg {
	if x != nil {
		return x.BaasBackupPolicyMsg
	}
	return nil
}

func (x *Metadata) GetWorkflowTemplateMsg() *WorkflowTemplateMsg {
	if x != nil {
		return x.WorkflowTemplateMsg
	}
	return nil
}

func (x *Metadata) GetAuthRoleChangedMsg() *AuthRoleChangedMsg {
	if x != nil {
		return x.AuthRoleChangedMsg
	}
	return nil
}

func (x *Metadata) GetWorkflowTicketSubmitedMsg() *WorkflowTicketSubmitedMsg {
	if x != nil {
		return x.WorkflowTicketSubmitedMsg
	}
	return nil
}

func (x *Metadata) GetWorkflowTicketRunningMsg() *WorkflowTicketRunningMsg {
	if x != nil {
		return x.WorkflowTicketRunningMsg
	}
	return nil
}

func (x *Metadata) GetCmdbNodeChangedMsg() *CmdbNodeChangedMsg {
	if x != nil {
		return x.CmdbNodeChangedMsg
	}
	return nil
}

func (x *Metadata) GetVmInfo() *VMInfo {
	if x != nil {
		return x.VmInfo
	}
	return nil
}

func (x *Metadata) GetBktRecordMsg() *BktRecordMsg {
	if x != nil {
		return x.BktRecordMsg
	}
	return nil
}

func (x *Metadata) GetDeviceObjectMsg() *DeviceObjectMsg {
	if x != nil {
		return x.DeviceObjectMsg
	}
	return nil
}

func (x *Metadata) GetIpScanMsg() *IpScanMsg {
	if x != nil {
		return x.IpScanMsg
	}
	return nil
}

func (x *Metadata) GetExcelImportIpMsg() *ExcelImportIpMsg {
	if x != nil {
		return x.ExcelImportIpMsg
	}
	return nil
}

func (x *Metadata) GetTaskTicketMsg() *TaskTicketMsg {
	if x != nil {
		return x.TaskTicketMsg
	}
	return nil
}

func (x *Metadata) GetDeviceStateChangeMsg() *DeviceStateChangeMsg {
	if x != nil {
		return x.DeviceStateChangeMsg
	}
	return nil
}

func (x *Metadata) GetPipelineStateChangeMsg() *PipelineStateChangeMsg {
	if x != nil {
		return x.PipelineStateChangeMsg
	}
	return nil
}

type EmailServerCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string        `protobuf:"bytes,10,opt,name=account,proto3" json:"account,omitempty"`
	Password string        `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	Host     string        `protobuf:"bytes,30,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32         `protobuf:"varint,40,opt,name=port,proto3" json:"port,omitempty"`
	Protocol EmailProtocol `protobuf:"varint,50,opt,name=protocol,proto3,enum=eventti.EmailProtocol" json:"protocol,omitempty"`
	Timeout  int32         `protobuf:"varint,60,opt,name=timeout,proto3" json:"timeout,omitempty"` // milliseconds
}

func (x *EmailServerCfg) Reset() {
	*x = EmailServerCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailServerCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailServerCfg) ProtoMessage() {}

func (x *EmailServerCfg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailServerCfg.ProtoReflect.Descriptor instead.
func (*EmailServerCfg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{4}
}

func (x *EmailServerCfg) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *EmailServerCfg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EmailServerCfg) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *EmailServerCfg) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EmailServerCfg) GetProtocol() EmailProtocol {
	if x != nil {
		return x.Protocol
	}
	return EmailProtocol_UNKNOWN_PROTOCOL
}

func (x *EmailServerCfg) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SmsCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmsCfg) Reset() {
	*x = SmsCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsCfg) ProtoMessage() {}

func (x *SmsCfg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsCfg.ProtoReflect.Descriptor instead.
func (*SmsCfg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{5}
}

type GuosenPushOverCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	LoginUrl  string `protobuf:"bytes,30,opt,name=login_url,json=loginUrl,proto3" json:"login_url,omitempty"`
	IssuedUrl string `protobuf:"bytes,40,opt,name=issued_url,json=issuedUrl,proto3" json:"issued_url,omitempty"`
}

func (x *GuosenPushOverCfg) Reset() {
	*x = GuosenPushOverCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuosenPushOverCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuosenPushOverCfg) ProtoMessage() {}

func (x *GuosenPushOverCfg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuosenPushOverCfg.ProtoReflect.Descriptor instead.
func (*GuosenPushOverCfg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{6}
}

func (x *GuosenPushOverCfg) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GuosenPushOverCfg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GuosenPushOverCfg) GetLoginUrl() string {
	if x != nil {
		return x.LoginUrl
	}
	return ""
}

func (x *GuosenPushOverCfg) GetIssuedUrl() string {
	if x != nil {
		return x.IssuedUrl
	}
	return ""
}

type WSServerCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,10,opt,name=port,proto3" json:"port,omitempty"`
	Path string `protobuf:"bytes,20,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *WSServerCfg) Reset() {
	*x = WSServerCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSServerCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSServerCfg) ProtoMessage() {}

func (x *WSServerCfg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSServerCfg.ProtoReflect.Descriptor instead.
func (*WSServerCfg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{7}
}

func (x *WSServerCfg) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *WSServerCfg) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []string `protobuf:"bytes,10,rep,name=users,proto3" json:"users,omitempty"`
	Roles []string `protobuf:"bytes,20,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{8}
}

func (x *Target) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Target) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type CreateNotificationChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nc *NotificationChannel `protobuf:"bytes,10,opt,name=nc,proto3" json:"nc,omitempty"`
}

func (x *CreateNotificationChannelReq) Reset() {
	*x = CreateNotificationChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationChannelReq) ProtoMessage() {}

func (x *CreateNotificationChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationChannelReq.ProtoReflect.Descriptor instead.
func (*CreateNotificationChannelReq) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNotificationChannelReq) GetNc() *NotificationChannel {
	if x != nil {
		return x.Nc
	}
	return nil
}

type NotificationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Etypes        []EventType             `protobuf:"varint,15,rep,packed,name=etypes,proto3,enum=eventti.EventType" json:"etypes,omitempty"`
	Type          NotificationChannelType `protobuf:"varint,20,opt,name=type,proto3,enum=eventti.NotificationChannelType" json:"type,omitempty"`
	Description   string                  `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	Target        *Target                 `protobuf:"bytes,30,opt,name=target,proto3" json:"target,omitempty"`
	ChannelConfig *ChannelConfig          `protobuf:"bytes,40,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
}

func (x *NotificationChannel) Reset() {
	*x = NotificationChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannel) ProtoMessage() {}

func (x *NotificationChannel) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannel.ProtoReflect.Descriptor instead.
func (*NotificationChannel) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{10}
}

func (x *NotificationChannel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotificationChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationChannel) GetEtypes() []EventType {
	if x != nil {
		return x.Etypes
	}
	return nil
}

func (x *NotificationChannel) GetType() NotificationChannelType {
	if x != nil {
		return x.Type
	}
	return NotificationChannelType_UNKNOWN_NOTIFICATION_CHANNEL_TYPE
}

func (x *NotificationChannel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NotificationChannel) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *NotificationChannel) GetChannelConfig() *ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailServerCfg    *EmailServerCfg    `protobuf:"bytes,40,opt,name=email_server_cfg,json=emailServerCfg,proto3" json:"email_server_cfg,omitempty"`
	SmsCfg            *SmsCfg            `protobuf:"bytes,50,opt,name=sms_cfg,json=smsCfg,proto3" json:"sms_cfg,omitempty"`
	GuosenPushOverCfg *GuosenPushOverCfg `protobuf:"bytes,60,opt,name=guosen_push_over_cfg,json=guosenPushOverCfg,proto3" json:"guosen_push_over_cfg,omitempty"`
	WsServerCfg       *WSServerCfg       `protobuf:"bytes,70,opt,name=ws_server_cfg,json=wsServerCfg,proto3" json:"ws_server_cfg,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelConfig) GetEmailServerCfg() *EmailServerCfg {
	if x != nil {
		return x.EmailServerCfg
	}
	return nil
}

func (x *ChannelConfig) GetSmsCfg() *SmsCfg {
	if x != nil {
		return x.SmsCfg
	}
	return nil
}

func (x *ChannelConfig) GetGuosenPushOverCfg() *GuosenPushOverCfg {
	if x != nil {
		return x.GuosenPushOverCfg
	}
	return nil
}

func (x *ChannelConfig) GetWsServerCfg() *WSServerCfg {
	if x != nil {
		return x.WsServerCfg
	}
	return nil
}

type CandidateCreatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device    string `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
	Candidate string `protobuf:"bytes,20,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *CandidateCreatedValue) Reset() {
	*x = CandidateCreatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateCreatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateCreatedValue) ProtoMessage() {}

func (x *CandidateCreatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateCreatedValue.ProtoReflect.Descriptor instead.
func (*CandidateCreatedValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{12}
}

func (x *CandidateCreatedValue) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CandidateCreatedValue) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

type StateChangedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string          `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
	State  nap.DeviceState `protobuf:"varint,20,opt,name=state,proto3,enum=nap.DeviceState" json:"state,omitempty"`
}

func (x *StateChangedValue) Reset() {
	*x = StateChangedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangedValue) ProtoMessage() {}

func (x *StateChangedValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangedValue.ProtoReflect.Descriptor instead.
func (*StateChangedValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{13}
}

func (x *StateChangedValue) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *StateChangedValue) GetState() nap.DeviceState {
	if x != nil {
		return x.State
	}
	return nap.DeviceState(0)
}

type TicketCreatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string `protobuf:"bytes,10,opt,name=ticket,proto3" json:"ticket,omitempty"` // ticket id
	Owner  string `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty"`   // creator
	Cap    string `protobuf:"bytes,30,opt,name=cap,proto3" json:"cap,omitempty"`       //用于区分工单类型
}

func (x *TicketCreatedValue) Reset() {
	*x = TicketCreatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCreatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCreatedValue) ProtoMessage() {}

func (x *TicketCreatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCreatedValue.ProtoReflect.Descriptor instead.
func (*TicketCreatedValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{14}
}

func (x *TicketCreatedValue) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *TicketCreatedValue) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TicketCreatedValue) GetCap() string {
	if x != nil {
		return x.Cap
	}
	return ""
}

type TicketExpireNotifyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string `protobuf:"bytes,10,opt,name=ticket,proto3" json:"ticket,omitempty"` // ticket id
	Owner  string `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty"`   // creator
	Expire int64  `protobuf:"varint,30,opt,name=expire,proto3" json:"expire,omitempty"`
	Cap    string `protobuf:"bytes,40,opt,name=cap,proto3" json:"cap,omitempty"` //用于区分工单类型
}

func (x *TicketExpireNotifyValue) Reset() {
	*x = TicketExpireNotifyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketExpireNotifyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketExpireNotifyValue) ProtoMessage() {}

func (x *TicketExpireNotifyValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketExpireNotifyValue.ProtoReflect.Descriptor instead.
func (*TicketExpireNotifyValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{15}
}

func (x *TicketExpireNotifyValue) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *TicketExpireNotifyValue) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TicketExpireNotifyValue) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *TicketExpireNotifyValue) GetCap() string {
	if x != nil {
		return x.Cap
	}
	return ""
}

type TicketStateChangedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket  string                `protobuf:"bytes,10,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Before  nap.PolicyTicketStage `protobuf:"varint,20,opt,name=before,proto3,enum=nap.PolicyTicketStage" json:"before,omitempty"`
	Current nap.PolicyTicketStage `protobuf:"varint,30,opt,name=current,proto3,enum=nap.PolicyTicketStage" json:"current,omitempty"`
	Cap     string                `protobuf:"bytes,40,opt,name=cap,proto3" json:"cap,omitempty"` //用于区分工单类型
}

func (x *TicketStateChangedValue) Reset() {
	*x = TicketStateChangedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketStateChangedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketStateChangedValue) ProtoMessage() {}

func (x *TicketStateChangedValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketStateChangedValue.ProtoReflect.Descriptor instead.
func (*TicketStateChangedValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{16}
}

func (x *TicketStateChangedValue) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *TicketStateChangedValue) GetBefore() nap.PolicyTicketStage {
	if x != nil {
		return x.Before
	}
	return nap.PolicyTicketStage(0)
}

func (x *TicketStateChangedValue) GetCurrent() nap.PolicyTicketStage {
	if x != nil {
		return x.Current
	}
	return nap.PolicyTicketStage(0)
}

func (x *TicketStateChangedValue) GetCap() string {
	if x != nil {
		return x.Cap
	}
	return ""
}

type WorkflowStateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`                                //流程名
	Username string                 `protobuf:"bytes,20,opt,name=username,proto3" json:"username,omitempty"`                        //审核人
	State    workflow.WorkflowState `protobuf:"varint,30,opt,name=state,proto3,enum=workflow.WorkflowState" json:"state,omitempty"` //流程状态
	StartAt  int64                  `protobuf:"varint,40,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`          //执行时间
	EndAt    int64                  `protobuf:"varint,50,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`                //结束时间
}

func (x *WorkflowStateValue) Reset() {
	*x = WorkflowStateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStateValue) ProtoMessage() {}

func (x *WorkflowStateValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStateValue.ProtoReflect.Descriptor instead.
func (*WorkflowStateValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{17}
}

func (x *WorkflowStateValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowStateValue) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WorkflowStateValue) GetState() workflow.WorkflowState {
	if x != nil {
		return x.State
	}
	return workflow.WorkflowState(0)
}

func (x *WorkflowStateValue) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *WorkflowStateValue) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

type WorkflowStateChangedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowStateValues []*WorkflowStateValue `protobuf:"bytes,20,rep,name=workflow_state_values,json=workflowStateValues,proto3" json:"workflow_state_values,omitempty"`
}

func (x *WorkflowStateChangedMsg) Reset() {
	*x = WorkflowStateChangedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStateChangedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStateChangedMsg) ProtoMessage() {}

func (x *WorkflowStateChangedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStateChangedMsg.ProtoReflect.Descriptor instead.
func (*WorkflowStateChangedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{18}
}

func (x *WorkflowStateChangedMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowStateChangedMsg) GetWorkflowStateValues() []*WorkflowStateValue {
	if x != nil {
		return x.WorkflowStateValues
	}
	return nil
}

type WorkflowPodStateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	State               workflow.WorkflowState `protobuf:"varint,20,opt,name=state,proto3,enum=workflow.WorkflowState" json:"state,omitempty"`
	StagePodStateValues []*StagePodStateValue  `protobuf:"bytes,30,rep,name=stage_pod_state_values,json=stagePodStateValues,proto3" json:"stage_pod_state_values,omitempty"`
	StartAt             int64                  `protobuf:"varint,40,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`       // 执行时间
	EndAt               int64                  `protobuf:"varint,50,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`             // 结束时间
	TotalTime           int64                  `protobuf:"varint,60,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"` // 总耗时
	Message             string                 `protobuf:"bytes,70,opt,name=message,proto3" json:"message,omitempty"`                       // 失败信息
}

func (x *WorkflowPodStateValue) Reset() {
	*x = WorkflowPodStateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowPodStateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowPodStateValue) ProtoMessage() {}

func (x *WorkflowPodStateValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowPodStateValue.ProtoReflect.Descriptor instead.
func (*WorkflowPodStateValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{19}
}

func (x *WorkflowPodStateValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowPodStateValue) GetState() workflow.WorkflowState {
	if x != nil {
		return x.State
	}
	return workflow.WorkflowState(0)
}

func (x *WorkflowPodStateValue) GetStagePodStateValues() []*StagePodStateValue {
	if x != nil {
		return x.StagePodStateValues
	}
	return nil
}

func (x *WorkflowPodStateValue) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *WorkflowPodStateValue) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *WorkflowPodStateValue) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *WorkflowPodStateValue) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StagePodStateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StagesName         string                 `protobuf:"bytes,10,opt,name=stages_name,json=stagesName,proto3" json:"stages_name,omitempty"`
	WorkflowState      workflow.WorkflowState `protobuf:"varint,20,opt,name=workflow_state,json=workflowState,proto3,enum=workflow.WorkflowState" json:"workflow_state,omitempty"`
	Name               string                 `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`
	Log                string                 `protobuf:"bytes,40,opt,name=log,proto3" json:"log,omitempty"`
	StagePodParameters []*StagePodParameter   `protobuf:"bytes,50,rep,name=stage_pod_parameters,json=stagePodParameters,proto3" json:"stage_pod_parameters,omitempty"`
}

func (x *StagePodStateValue) Reset() {
	*x = StagePodStateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StagePodStateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePodStateValue) ProtoMessage() {}

func (x *StagePodStateValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePodStateValue.ProtoReflect.Descriptor instead.
func (*StagePodStateValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{20}
}

func (x *StagePodStateValue) GetStagesName() string {
	if x != nil {
		return x.StagesName
	}
	return ""
}

func (x *StagePodStateValue) GetWorkflowState() workflow.WorkflowState {
	if x != nil {
		return x.WorkflowState
	}
	return workflow.WorkflowState(0)
}

func (x *StagePodStateValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StagePodStateValue) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *StagePodStateValue) GetStagePodParameters() []*StagePodParameter {
	if x != nil {
		return x.StagePodParameters
	}
	return nil
}

type WorkflowStageStateChangedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                   `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                   `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowPodStateValues []*WorkflowPodStateValue `protobuf:"bytes,30,rep,name=workflow_pod_state_values,json=workflowPodStateValues,proto3" json:"workflow_pod_state_values,omitempty"`
}

func (x *WorkflowStageStateChangedMsg) Reset() {
	*x = WorkflowStageStateChangedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStageStateChangedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStageStateChangedMsg) ProtoMessage() {}

func (x *WorkflowStageStateChangedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStageStateChangedMsg.ProtoReflect.Descriptor instead.
func (*WorkflowStageStateChangedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{21}
}

func (x *WorkflowStageStateChangedMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowStageStateChangedMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowStageStateChangedMsg) GetWorkflowPodStateValues() []*WorkflowPodStateValue {
	if x != nil {
		return x.WorkflowPodStateValues
	}
	return nil
}

type BaasTestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BaasTestMsg) Reset() {
	*x = BaasTestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaasTestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaasTestMsg) ProtoMessage() {}

func (x *BaasTestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaasTestMsg.ProtoReflect.Descriptor instead.
func (*BaasTestMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{22}
}

func (x *BaasTestMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BaasBackupDomainMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Before  baas.UnitState `protobuf:"varint,20,opt,name=before,proto3,enum=baas.UnitState" json:"before,omitempty"`
	Current baas.UnitState `protobuf:"varint,30,opt,name=current,proto3,enum=baas.UnitState" json:"current,omitempty"`
	Name    string         `protobuf:"bytes,40,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BaasBackupDomainMsg) Reset() {
	*x = BaasBackupDomainMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaasBackupDomainMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaasBackupDomainMsg) ProtoMessage() {}

func (x *BaasBackupDomainMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaasBackupDomainMsg.ProtoReflect.Descriptor instead.
func (*BaasBackupDomainMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{23}
}

func (x *BaasBackupDomainMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaasBackupDomainMsg) GetBefore() baas.UnitState {
	if x != nil {
		return x.Before
	}
	return baas.UnitState(0)
}

func (x *BaasBackupDomainMsg) GetCurrent() baas.UnitState {
	if x != nil {
		return x.Current
	}
	return baas.UnitState(0)
}

func (x *BaasBackupDomainMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BaasBackupPolicyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Before  baas.UnitState `protobuf:"varint,20,opt,name=before,proto3,enum=baas.UnitState" json:"before,omitempty"`
	Current baas.UnitState `protobuf:"varint,30,opt,name=current,proto3,enum=baas.UnitState" json:"current,omitempty"`
	Name    string         `protobuf:"bytes,40,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BaasBackupPolicyMsg) Reset() {
	*x = BaasBackupPolicyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaasBackupPolicyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaasBackupPolicyMsg) ProtoMessage() {}

func (x *BaasBackupPolicyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaasBackupPolicyMsg.ProtoReflect.Descriptor instead.
func (*BaasBackupPolicyMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{24}
}

func (x *BaasBackupPolicyMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaasBackupPolicyMsg) GetBefore() baas.UnitState {
	if x != nil {
		return x.Before
	}
	return baas.UnitState(0)
}

func (x *BaasBackupPolicyMsg) GetCurrent() baas.UnitState {
	if x != nil {
		return x.Current
	}
	return baas.UnitState(0)
}

func (x *BaasBackupPolicyMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BaasBackupPolicyExecuteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                 `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	State workflow.WorkflowState `protobuf:"varint,20,opt,name=state,proto3,enum=workflow.WorkflowState" json:"state,omitempty"`
	Name  string                 `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BaasBackupPolicyExecuteMsg) Reset() {
	*x = BaasBackupPolicyExecuteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaasBackupPolicyExecuteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaasBackupPolicyExecuteMsg) ProtoMessage() {}

func (x *BaasBackupPolicyExecuteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaasBackupPolicyExecuteMsg.ProtoReflect.Descriptor instead.
func (*BaasBackupPolicyExecuteMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{25}
}

func (x *BaasBackupPolicyExecuteMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaasBackupPolicyExecuteMsg) GetState() workflow.WorkflowState {
	if x != nil {
		return x.State
	}
	return workflow.WorkflowState(0)
}

func (x *BaasBackupPolicyExecuteMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserLoginMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserLoginMsg) Reset() {
	*x = UserLoginMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginMsg) ProtoMessage() {}

func (x *UserLoginMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginMsg.ProtoReflect.Descriptor instead.
func (*UserLoginMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{26}
}

func (x *UserLoginMsg) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type WorkflowTicketMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,10,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (x *WorkflowTicketMsg) Reset() {
	*x = WorkflowTicketMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTicketMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTicketMsg) ProtoMessage() {}

func (x *WorkflowTicketMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTicketMsg.ProtoReflect.Descriptor instead.
func (*WorkflowTicketMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{27}
}

func (x *WorkflowTicketMsg) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

type WorkflowTemplateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string `protobuf:"bytes,10,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *WorkflowTemplateMsg) Reset() {
	*x = WorkflowTemplateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplateMsg) ProtoMessage() {}

func (x *WorkflowTemplateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplateMsg.ProtoReflect.Descriptor instead.
func (*WorkflowTemplateMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{28}
}

func (x *WorkflowTemplateMsg) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type AuthRoleChangedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string          `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	App         string          `protobuf:"bytes,20,opt,name=app,proto3" json:"app,omitempty"`
	Perm        map[string]bool `protobuf:"bytes,30,rep,name=perm,proto3" json:"perm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // {"read": true, "write": false, "admin": true, "xxx": true}
	Implementer string          `protobuf:"bytes,40,opt,name=implementer,proto3" json:"implementer,omitempty"`
}

func (x *AuthRoleChangedMsg) Reset() {
	*x = AuthRoleChangedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleChangedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleChangedMsg) ProtoMessage() {}

func (x *AuthRoleChangedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleChangedMsg.ProtoReflect.Descriptor instead.
func (*AuthRoleChangedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{29}
}

func (x *AuthRoleChangedMsg) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AuthRoleChangedMsg) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AuthRoleChangedMsg) GetPerm() map[string]bool {
	if x != nil {
		return x.Perm
	}
	return nil
}

func (x *AuthRoleChangedMsg) GetImplementer() string {
	if x != nil {
		return x.Implementer
	}
	return ""
}

type WorkflowTicketSubmitedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowPodStateValue *WorkflowPodStateValue `protobuf:"bytes,30,opt,name=workflow_pod_state_value,json=workflowPodStateValue,proto3" json:"workflow_pod_state_value,omitempty"`
}

func (x *WorkflowTicketSubmitedMsg) Reset() {
	*x = WorkflowTicketSubmitedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTicketSubmitedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTicketSubmitedMsg) ProtoMessage() {}

func (x *WorkflowTicketSubmitedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTicketSubmitedMsg.ProtoReflect.Descriptor instead.
func (*WorkflowTicketSubmitedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{30}
}

func (x *WorkflowTicketSubmitedMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowTicketSubmitedMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowTicketSubmitedMsg) GetWorkflowPodStateValue() *WorkflowPodStateValue {
	if x != nil {
		return x.WorkflowPodStateValue
	}
	return nil
}

type WorkflowTicketRunningMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`       // workflow id
	Param string `protobuf:"bytes,20,opt,name=param,proto3" json:"param,omitempty"` // workflow submit param
}

func (x *WorkflowTicketRunningMsg) Reset() {
	*x = WorkflowTicketRunningMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTicketRunningMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTicketRunningMsg) ProtoMessage() {}

func (x *WorkflowTicketRunningMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTicketRunningMsg.ProtoReflect.Descriptor instead.
func (*WorkflowTicketRunningMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{31}
}

func (x *WorkflowTicketRunningMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowTicketRunningMsg) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type CmdbNodeChangedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	NodeId string `protobuf:"bytes,20,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CmdbNodeChangedMsg) Reset() {
	*x = CmdbNodeChangedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdbNodeChangedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdbNodeChangedMsg) ProtoMessage() {}

func (x *CmdbNodeChangedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdbNodeChangedMsg.ProtoReflect.Descriptor instead.
func (*CmdbNodeChangedMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{32}
}

func (x *CmdbNodeChangedMsg) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CmdbNodeChangedMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type StagePodParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,30,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StagePodParameter) Reset() {
	*x = StagePodParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StagePodParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePodParameter) ProtoMessage() {}

func (x *StagePodParameter) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePodParameter.ProtoReflect.Descriptor instead.
func (*StagePodParameter) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{33}
}

func (x *StagePodParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StagePodParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StagePodParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	Properties string `protobuf:"bytes,20,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *VMInfo) Reset() {
	*x = VMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMInfo) ProtoMessage() {}

func (x *VMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMInfo.ProtoReflect.Descriptor instead.
func (*VMInfo) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{34}
}

func (x *VMInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *VMInfo) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type BktRecordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowNo   string  `protobuf:"bytes,20,opt,name=flow_no,json=flowNo,proto3" json:"flow_no,omitempty"`
	Channel  string  `protobuf:"bytes,30,opt,name=channel,proto3" json:"channel,omitempty"`
	Trade    string  `protobuf:"bytes,40,opt,name=trade,proto3" json:"trade,omitempty"`
	Cnt      float32 `protobuf:"fixed32,50,opt,name=cnt,proto3" json:"cnt,omitempty"`
	ClientId int32   `protobuf:"varint,60,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Branch   string  `protobuf:"bytes,70,opt,name=branch,proto3" json:"branch,omitempty"`
	CreateAt int64   `protobuf:"varint,80,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	In       int64   `protobuf:"varint,90,opt,name=in,proto3" json:"in,omitempty"`        // unix nano
	Out      int64   `protobuf:"varint,100,opt,name=out,proto3" json:"out,omitempty"`     // unix nano
	Lapse    int64   `protobuf:"varint,110,opt,name=lapse,proto3" json:"lapse,omitempty"` // nano secs
}

func (x *BktRecordMsg) Reset() {
	*x = BktRecordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BktRecordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BktRecordMsg) ProtoMessage() {}

func (x *BktRecordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BktRecordMsg.ProtoReflect.Descriptor instead.
func (*BktRecordMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{35}
}

func (x *BktRecordMsg) GetFlowNo() string {
	if x != nil {
		return x.FlowNo
	}
	return ""
}

func (x *BktRecordMsg) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *BktRecordMsg) GetTrade() string {
	if x != nil {
		return x.Trade
	}
	return ""
}

func (x *BktRecordMsg) GetCnt() float32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *BktRecordMsg) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *BktRecordMsg) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *BktRecordMsg) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *BktRecordMsg) GetIn() int64 {
	if x != nil {
		return x.In
	}
	return 0
}

func (x *BktRecordMsg) GetOut() int64 {
	if x != nil {
		return x.Out
	}
	return 0
}

func (x *BktRecordMsg) GetLapse() int64 {
	if x != nil {
		return x.Lapse
	}
	return 0
}

type DeviceObjectMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oids    []string `protobuf:"bytes,10,rep,name=oids,proto3" json:"oids,omitempty"`
	Objects []string `protobuf:"bytes,20,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *DeviceObjectMsg) Reset() {
	*x = DeviceObjectMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceObjectMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceObjectMsg) ProtoMessage() {}

func (x *DeviceObjectMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceObjectMsg.ProtoReflect.Descriptor instead.
func (*DeviceObjectMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceObjectMsg) GetOids() []string {
	if x != nil {
		return x.Oids
	}
	return nil
}

func (x *DeviceObjectMsg) GetObjects() []string {
	if x != nil {
		return x.Objects
	}
	return nil
}

type ExcelImportIpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oids             []string            `protobuf:"bytes,10,rep,name=oids,proto3" json:"oids,omitempty"`
	Objects          []string            `protobuf:"bytes,20,rep,name=objects,proto3" json:"objects,omitempty"`
	ExcelImportState dom.ExcelImortState `protobuf:"varint,30,opt,name=excel_import_state,json=excelImportState,proto3,enum=dom.ExcelImortState" json:"excel_import_state,omitempty"`
}

func (x *ExcelImportIpMsg) Reset() {
	*x = ExcelImportIpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelImportIpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelImportIpMsg) ProtoMessage() {}

func (x *ExcelImportIpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelImportIpMsg.ProtoReflect.Descriptor instead.
func (*ExcelImportIpMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{37}
}

func (x *ExcelImportIpMsg) GetOids() []string {
	if x != nil {
		return x.Oids
	}
	return nil
}

func (x *ExcelImportIpMsg) GetObjects() []string {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ExcelImportIpMsg) GetExcelImportState() dom.ExcelImortState {
	if x != nil {
		return x.ExcelImportState
	}
	return dom.ExcelImortState(0)
}

type IpScanValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
	Status string `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	Os     string `protobuf:"bytes,30,opt,name=os,proto3" json:"os,omitempty"`
	Mac    string `protobuf:"bytes,40,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *IpScanValue) Reset() {
	*x = IpScanValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpScanValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpScanValue) ProtoMessage() {}

func (x *IpScanValue) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpScanValue.ProtoReflect.Descriptor instead.
func (*IpScanValue) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{38}
}

func (x *IpScanValue) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpScanValue) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IpScanValue) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IpScanValue) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type IpScanMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Up           string         `protobuf:"bytes,10,opt,name=up,proto3" json:"up,omitempty"`
	Down         string         `protobuf:"bytes,20,opt,name=down,proto3" json:"down,omitempty"`
	Total        string         `protobuf:"bytes,30,opt,name=total,proto3" json:"total,omitempty"`
	IpScanState  IpScanState    `protobuf:"varint,40,opt,name=ip_scan_state,json=ipScanState,proto3,enum=eventti.IpScanState" json:"ip_scan_state,omitempty"`
	IpScanValues []*IpScanValue `protobuf:"bytes,50,rep,name=ip_scan_values,json=ipScanValues,proto3" json:"ip_scan_values,omitempty"`
}

func (x *IpScanMsg) Reset() {
	*x = IpScanMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpScanMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpScanMsg) ProtoMessage() {}

func (x *IpScanMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpScanMsg.ProtoReflect.Descriptor instead.
func (*IpScanMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{39}
}

func (x *IpScanMsg) GetUp() string {
	if x != nil {
		return x.Up
	}
	return ""
}

func (x *IpScanMsg) GetDown() string {
	if x != nil {
		return x.Down
	}
	return ""
}

func (x *IpScanMsg) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *IpScanMsg) GetIpScanState() IpScanState {
	if x != nil {
		return x.IpScanState
	}
	return IpScanState_UNKNOWN_STATE
}

func (x *IpScanMsg) GetIpScanValues() []*IpScanValue {
	if x != nil {
		return x.IpScanValues
	}
	return nil
}

type TaskTicketMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Action     string              `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	StartAt    int64               `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt      int64               `protobuf:"varint,5,opt,name=endAt,proto3" json:"endAt,omitempty"`
	Time       int32               `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	State      string              `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Obj        *nap.ResourceObject `protobuf:"bytes,8,opt,name=obj,proto3" json:"obj,omitempty"`
	SubTaskMsg []*SubTaskMsg       `protobuf:"bytes,9,rep,name=sub_task_msg,json=subTaskMsg,proto3" json:"sub_task_msg,omitempty"`
	Operator   string              `protobuf:"bytes,10,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *TaskTicketMsg) Reset() {
	*x = TaskTicketMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTicketMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTicketMsg) ProtoMessage() {}

func (x *TaskTicketMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTicketMsg.ProtoReflect.Descriptor instead.
func (*TaskTicketMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{40}
}

func (x *TaskTicketMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskTicketMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskTicketMsg) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TaskTicketMsg) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *TaskTicketMsg) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *TaskTicketMsg) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskTicketMsg) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TaskTicketMsg) GetObj() *nap.ResourceObject {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *TaskTicketMsg) GetSubTaskMsg() []*SubTaskMsg {
	if x != nil {
		return x.SubTaskMsg
	}
	return nil
}

func (x *TaskTicketMsg) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type SubTaskMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	State    string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Operator string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *SubTaskMsg) Reset() {
	*x = SubTaskMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTaskMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTaskMsg) ProtoMessage() {}

func (x *SubTaskMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTaskMsg.ProtoReflect.Descriptor instead.
func (*SubTaskMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{41}
}

func (x *SubTaskMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubTaskMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubTaskMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubTaskMsg) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SubTaskMsg) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DeviceStateChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Device   string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	State    string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Type     string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeviceStateChangeMsg) Reset() {
	*x = DeviceStateChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateChangeMsg) ProtoMessage() {}

func (x *DeviceStateChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateChangeMsg.ProtoReflect.Descriptor instead.
func (*DeviceStateChangeMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{42}
}

func (x *DeviceStateChangeMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceStateChangeMsg) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DeviceStateChangeMsg) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeviceStateChangeMsg) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DeviceStateChangeMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PipelineStateChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineStateChangeMsg) Reset() {
	*x = PipelineStateChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_eventti_eventti_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStateChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStateChangeMsg) ProtoMessage() {}

func (x *PipelineStateChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_eventti_eventti_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStateChangeMsg.ProtoReflect.Descriptor instead.
func (*PipelineStateChangeMsg) Descriptor() ([]byte, []int) {
	return file_src_eventti_eventti_proto_rawDescGZIP(), []int{43}
}

func (x *PipelineStateChangeMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineStateChangeMsg) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PipelineStateChangeMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_src_eventti_eventti_proto protoreflect.FileDescriptor

var file_src_eventti_eventti_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x72, 0x63, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x69, 0x1a, 0x13, 0x73, 0x72, 0x63, 0x2f, 0x62, 0x61, 0x61, 0x73, 0x2f, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x72, 0x63, 0x2f, 0x6e,
	0x61, 0x70, 0x2f, 0x6e, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x72,
	0x63, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x72, 0x63, 0x2f, 0x64,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x70, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xe7, 0x0d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x5b, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x74, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x63, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x73, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x42, 0x61, 0x61, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x4b, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3c,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x68, 0x0a, 0x1e,
	0x62, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x8e,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e,
	0x42, 0x61, 0x61, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x1a, 0x62, 0x61, 0x73, 0x73,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x52, 0x0a, 0x16, 0x62, 0x61, 0x61, 0x73, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74,
	0x69, 0x2e, 0x42, 0x61, 0x61, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x62, 0x61, 0x61, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x52, 0x0a, 0x16, 0x62, 0x61,
	0x61, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x42, 0x61, 0x61, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x62, 0x61, 0x61, 0x73, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x51,
	0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x64, 0x0a, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x19, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x61, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73,
	0x67, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x15, 0x63,
	0x6d, 0x64, 0x62, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x43, 0x6d, 0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x63, 0x6d, 0x64, 0x62, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07,
	0x76, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x56, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x6b, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x42, 0x6b, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x62, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0b,
	0x69, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0xfc, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x49, 0x70, 0x53,
	0x63, 0x61, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x49, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65,
	0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x0f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x55, 0x0a,
	0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x14,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x5b, 0x0a, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x74, 0x69, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73,
	0x67, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x66, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x08, 0x0a, 0x06, 0x53, 0x6d, 0x73, 0x43, 0x66, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x47,
	0x75, 0x6f, 0x73, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x22, 0x35, 0x0a, 0x0b, 0x57, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x66, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x02, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x02, 0x6e, 0x63, 0x22,
	0xa5, 0x02, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67, 0x52, 0x0e, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a, 0x07,
	0x73, 0x6d, 0x73, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x66, 0x67, 0x52, 0x06,
	0x73, 0x6d, 0x73, 0x43, 0x66, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x67, 0x75, 0x6f, 0x73, 0x65, 0x6e,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x47,
	0x75, 0x6f, 0x73, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x52, 0x11, 0x67, 0x75, 0x6f, 0x73, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72,
	0x43, 0x66, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x66, 0x67, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x52, 0x0b, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x66, 0x67, 0x22, 0x4d, 0x0a,
	0x15, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x54, 0x0a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x70, 0x22, 0x71, 0x0a, 0x17, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x61, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x7a, 0x0a, 0x17, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe9, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x4c,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x12, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x1c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0b,
	0x42, 0x61, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x61, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x61, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x42, 0x61, 0x61, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x11, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x13,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x37,
	0x0a, 0x09, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x43, 0x0a, 0x12, 0x43, 0x6d, 0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x06,
	0x56, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a,
	0x0c, 0x42, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x6d, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x49, 0x70,
	0x53, 0x63, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x49, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0d, 0x69,
	0x70, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x49, 0x70, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x2e, 0x49, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x62, 0x6a,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x6f, 0x62, 0x6a,
	0x12, 0x35, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69,
	0x2e, 0x53, 0x75, 0x62, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x73,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x2a, 0x98, 0x08, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x57,
	0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0b,
	0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c,
	0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x41, 0x41, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x41, 0x41, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x41, 0x53, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x10, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x41, 0x41, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x12, 0x12, 0x1b, 0x0a,
	0x17, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1c, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x21, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x41, 0x49, 0x5f, 0x42, 0x4b, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x41, 0x49, 0x5f, 0x42,
	0x4b, 0x54, 0x5f, 0x44, 0x41, 0x55, 0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x24,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x25, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x50, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x5f, 0x49, 0x50,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x28, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x29, 0x2a, 0x7b, 0x0a,
	0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x55, 0x4f, 0x53, 0x45, 0x4e, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x28, 0x2a, 0x40, 0x0a, 0x0d, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4d, 0x54, 0x50, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x4d, 0x54, 0x50, 0x10, 0x14, 0x2a, 0x48, 0x0a, 0x0b,
	0x49, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x47, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6b,
	0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x69, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x74, 0x65, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_eventti_eventti_proto_rawDescOnce sync.Once
	file_src_eventti_eventti_proto_rawDescData = file_src_eventti_eventti_proto_rawDesc
)

func file_src_eventti_eventti_proto_rawDescGZIP() []byte {
	file_src_eventti_eventti_proto_rawDescOnce.Do(func() {
		file_src_eventti_eventti_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_eventti_eventti_proto_rawDescData)
	})
	return file_src_eventti_eventti_proto_rawDescData
}

var file_src_eventti_eventti_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_src_eventti_eventti_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_src_eventti_eventti_proto_goTypes = []interface{}{
	(EventType)(0),                       // 0: eventti.EventType
	(NotificationChannelType)(0),         // 1: eventti.NotificationChannelType
	(EmailProtocol)(0),                   // 2: eventti.EmailProtocol
	(IpScanState)(0),                     // 3: eventti.IpScanState
	(*From)(nil),                         // 4: eventti.From
	(*DeviceConfigUpdatedMsg)(nil),       // 5: eventti.DeviceConfigUpdatedMsg
	(*Event)(nil),                        // 6: eventti.Event
	(*Metadata)(nil),                     // 7: eventti.Metadata
	(*EmailServerCfg)(nil),               // 8: eventti.EmailServerCfg
	(*SmsCfg)(nil),                       // 9: eventti.SmsCfg
	(*GuosenPushOverCfg)(nil),            // 10: eventti.GuosenPushOverCfg
	(*WSServerCfg)(nil),                  // 11: eventti.WSServerCfg
	(*Target)(nil),                       // 12: eventti.Target
	(*CreateNotificationChannelReq)(nil), // 13: eventti.CreateNotificationChannelReq
	(*NotificationChannel)(nil),          // 14: eventti.NotificationChannel
	(*ChannelConfig)(nil),                // 15: eventti.ChannelConfig
	(*CandidateCreatedValue)(nil),        // 16: eventti.CandidateCreatedValue
	(*StateChangedValue)(nil),            // 17: eventti.StateChangedValue
	(*TicketCreatedValue)(nil),           // 18: eventti.TicketCreatedValue
	(*TicketExpireNotifyValue)(nil),      // 19: eventti.TicketExpireNotifyValue
	(*TicketStateChangedValue)(nil),      // 20: eventti.TicketStateChangedValue
	(*WorkflowStateValue)(nil),           // 21: eventti.WorkflowStateValue
	(*WorkflowStateChangedMsg)(nil),      // 22: eventti.WorkflowStateChangedMsg
	(*WorkflowPodStateValue)(nil),        // 23: eventti.WorkflowPodStateValue
	(*StagePodStateValue)(nil),           // 24: eventti.StagePodStateValue
	(*WorkflowStageStateChangedMsg)(nil), // 25: eventti.WorkflowStageStateChangedMsg
	(*BaasTestMsg)(nil),                  // 26: eventti.BaasTestMsg
	(*BaasBackupDomainMsg)(nil),          // 27: eventti.BaasBackupDomainMsg
	(*BaasBackupPolicyMsg)(nil),          // 28: eventti.BaasBackupPolicyMsg
	(*BaasBackupPolicyExecuteMsg)(nil),   // 29: eventti.BaasBackupPolicyExecuteMsg
	(*UserLoginMsg)(nil),                 // 30: eventti.UserLoginMsg
	(*WorkflowTicketMsg)(nil),            // 31: eventti.WorkflowTicketMsg
	(*WorkflowTemplateMsg)(nil),          // 32: eventti.WorkflowTemplateMsg
	(*AuthRoleChangedMsg)(nil),           // 33: eventti.AuthRoleChangedMsg
	(*WorkflowTicketSubmitedMsg)(nil),    // 34: eventti.WorkflowTicketSubmitedMsg
	(*WorkflowTicketRunningMsg)(nil),     // 35: eventti.WorkflowTicketRunningMsg
	(*CmdbNodeChangedMsg)(nil),           // 36: eventti.CmdbNodeChangedMsg
	(*StagePodParameter)(nil),            // 37: eventti.StagePodParameter
	(*VMInfo)(nil),                       // 38: eventti.VMInfo
	(*BktRecordMsg)(nil),                 // 39: eventti.BktRecordMsg
	(*DeviceObjectMsg)(nil),              // 40: eventti.DeviceObjectMsg
	(*ExcelImportIpMsg)(nil),             // 41: eventti.ExcelImportIpMsg
	(*IpScanValue)(nil),                  // 42: eventti.IpScanValue
	(*IpScanMsg)(nil),                    // 43: eventti.IpScanMsg
	(*TaskTicketMsg)(nil),                // 44: eventti.TaskTicketMsg
	(*SubTaskMsg)(nil),                   // 45: eventti.SubTaskMsg
	(*DeviceStateChangeMsg)(nil),         // 46: eventti.DeviceStateChangeMsg
	(*PipelineStateChangeMsg)(nil),       // 47: eventti.PipelineStateChangeMsg
	nil,                                  // 48: eventti.AuthRoleChangedMsg.PermEntry
	(nap.DeviceState)(0),                 // 49: nap.DeviceState
	(nap.PolicyTicketStage)(0),           // 50: nap.PolicyTicketStage
	(workflow.WorkflowState)(0),          // 51: workflow.WorkflowState
	(baas.UnitState)(0),                  // 52: baas.UnitState
	(dom.ExcelImortState)(0),             // 53: dom.ExcelImortState
	(*nap.ResourceObject)(nil),           // 54: nap.ResourceObject
}
var file_src_eventti_eventti_proto_depIdxs = []int32{
	4,  // 0: eventti.Event.from:type_name -> eventti.From
	0,  // 1: eventti.Event.type:type_name -> eventti.EventType
	7,  // 2: eventti.Event.metadata:type_name -> eventti.Metadata
	12, // 3: eventti.Event.target:type_name -> eventti.Target
	22, // 4: eventti.Metadata.workflow_state_changed_msg:type_name -> eventti.WorkflowStateChangedMsg
	5,  // 5: eventti.Metadata.device_config_updated_msg:type_name -> eventti.DeviceConfigUpdatedMsg
	25, // 6: eventti.Metadata.workflow_stage_changed_msg:type_name -> eventti.WorkflowStageStateChangedMsg
	26, // 7: eventti.Metadata.bass_test_msg:type_name -> eventti.BaasTestMsg
	31, // 8: eventti.Metadata.workflow_ticket_msg:type_name -> eventti.WorkflowTicketMsg
	30, // 9: eventti.Metadata.user_login_msg:type_name -> eventti.UserLoginMsg
	29, // 10: eventti.Metadata.bass_backup_policy_execute_msg:type_name -> eventti.BaasBackupPolicyExecuteMsg
	27, // 11: eventti.Metadata.baas_backup_domain_msg:type_name -> eventti.BaasBackupDomainMsg
	28, // 12: eventti.Metadata.baas_backup_policy_msg:type_name -> eventti.BaasBackupPolicyMsg
	32, // 13: eventti.Metadata.workflow_template_msg:type_name -> eventti.WorkflowTemplateMsg
	33, // 14: eventti.Metadata.auth_role_changed_msg:type_name -> eventti.AuthRoleChangedMsg
	34, // 15: eventti.Metadata.workflow_ticket_submited_msg:type_name -> eventti.WorkflowTicketSubmitedMsg
	35, // 16: eventti.Metadata.workflow_ticket_running_msg:type_name -> eventti.WorkflowTicketRunningMsg
	36, // 17: eventti.Metadata.cmdb_node_changed_msg:type_name -> eventti.CmdbNodeChangedMsg
	38, // 18: eventti.Metadata.vm_info:type_name -> eventti.VMInfo
	39, // 19: eventti.Metadata.bkt_record_msg:type_name -> eventti.BktRecordMsg
	40, // 20: eventti.Metadata.device_object_msg:type_name -> eventti.DeviceObjectMsg
	43, // 21: eventti.Metadata.ip_scan_msg:type_name -> eventti.IpScanMsg
	41, // 22: eventti.Metadata.excel_import_ip_msg:type_name -> eventti.ExcelImportIpMsg
	44, // 23: eventti.Metadata.task_ticket_msg:type_name -> eventti.TaskTicketMsg
	46, // 24: eventti.Metadata.device_state_change_msg:type_name -> eventti.DeviceStateChangeMsg
	47, // 25: eventti.Metadata.pipeline_state_change_msg:type_name -> eventti.PipelineStateChangeMsg
	2,  // 26: eventti.EmailServerCfg.protocol:type_name -> eventti.EmailProtocol
	14, // 27: eventti.CreateNotificationChannelReq.nc:type_name -> eventti.NotificationChannel
	0,  // 28: eventti.NotificationChannel.etypes:type_name -> eventti.EventType
	1,  // 29: eventti.NotificationChannel.type:type_name -> eventti.NotificationChannelType
	12, // 30: eventti.NotificationChannel.target:type_name -> eventti.Target
	15, // 31: eventti.NotificationChannel.channel_config:type_name -> eventti.ChannelConfig
	8,  // 32: eventti.ChannelConfig.email_server_cfg:type_name -> eventti.EmailServerCfg
	9,  // 33: eventti.ChannelConfig.sms_cfg:type_name -> eventti.SmsCfg
	10, // 34: eventti.ChannelConfig.guosen_push_over_cfg:type_name -> eventti.GuosenPushOverCfg
	11, // 35: eventti.ChannelConfig.ws_server_cfg:type_name -> eventti.WSServerCfg
	49, // 36: eventti.StateChangedValue.state:type_name -> nap.DeviceState
	50, // 37: eventti.TicketStateChangedValue.before:type_name -> nap.PolicyTicketStage
	50, // 38: eventti.TicketStateChangedValue.current:type_name -> nap.PolicyTicketStage
	51, // 39: eventti.WorkflowStateValue.state:type_name -> workflow.WorkflowState
	21, // 40: eventti.WorkflowStateChangedMsg.workflow_state_values:type_name -> eventti.WorkflowStateValue
	51, // 41: eventti.WorkflowPodStateValue.state:type_name -> workflow.WorkflowState
	24, // 42: eventti.WorkflowPodStateValue.stage_pod_state_values:type_name -> eventti.StagePodStateValue
	51, // 43: eventti.StagePodStateValue.workflow_state:type_name -> workflow.WorkflowState
	37, // 44: eventti.StagePodStateValue.stage_pod_parameters:type_name -> eventti.StagePodParameter
	23, // 45: eventti.WorkflowStageStateChangedMsg.workflow_pod_state_values:type_name -> eventti.WorkflowPodStateValue
	52, // 46: eventti.BaasBackupDomainMsg.before:type_name -> baas.UnitState
	52, // 47: eventti.BaasBackupDomainMsg.current:type_name -> baas.UnitState
	52, // 48: eventti.BaasBackupPolicyMsg.before:type_name -> baas.UnitState
	52, // 49: eventti.BaasBackupPolicyMsg.current:type_name -> baas.UnitState
	51, // 50: eventti.BaasBackupPolicyExecuteMsg.state:type_name -> workflow.WorkflowState
	48, // 51: eventti.AuthRoleChangedMsg.perm:type_name -> eventti.AuthRoleChangedMsg.PermEntry
	23, // 52: eventti.WorkflowTicketSubmitedMsg.workflow_pod_state_value:type_name -> eventti.WorkflowPodStateValue
	53, // 53: eventti.ExcelImportIpMsg.excel_import_state:type_name -> dom.ExcelImortState
	3,  // 54: eventti.IpScanMsg.ip_scan_state:type_name -> eventti.IpScanState
	42, // 55: eventti.IpScanMsg.ip_scan_values:type_name -> eventti.IpScanValue
	54, // 56: eventti.TaskTicketMsg.obj:type_name -> nap.ResourceObject
	45, // 57: eventti.TaskTicketMsg.sub_task_msg:type_name -> eventti.SubTaskMsg
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_src_eventti_eventti_proto_init() }
func file_src_eventti_eventti_proto_init() {
	if File_src_eventti_eventti_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_eventti_eventti_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigUpdatedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailServerCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuosenPushOverCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSServerCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateCreatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCreatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketExpireNotifyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketStateChangedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowStateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowStateChangedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowPodStateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StagePodStateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowStageStateChangedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaasTestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaasBackupDomainMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaasBackupPolicyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaasBackupPolicyExecuteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTicketMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleChangedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTicketSubmitedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTicketRunningMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdbNodeChangedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StagePodParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BktRecordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceObjectMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelImportIpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpScanValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpScanMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTicketMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTaskMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_eventti_eventti_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStateChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_eventti_eventti_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_eventti_eventti_proto_goTypes,
		DependencyIndexes: file_src_eventti_eventti_proto_depIdxs,
		EnumInfos:         file_src_eventti_eventti_proto_enumTypes,
		MessageInfos:      file_src_eventti_eventti_proto_msgTypes,
	}.Build()
	File_src_eventti_eventti_proto = out.File
	file_src_eventti_eventti_proto_rawDesc = nil
	file_src_eventti_eventti_proto_goTypes = nil
	file_src_eventti_eventti_proto_depIdxs = nil
}
