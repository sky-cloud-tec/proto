// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmdb/cmdb.proto

package cmdb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/sky-cloud-tec/proto/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Properties           string   `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1f4eaffd389ae, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Node) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

type SearchNodeRequest struct {
	Jql                  string   `protobuf:"bytes,1,opt,name=jql,proto3" json:"jql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchNodeRequest) Reset()         { *m = SearchNodeRequest{} }
func (m *SearchNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SearchNodeRequest) ProtoMessage()    {}
func (*SearchNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1f4eaffd389ae, []int{1}
}

func (m *SearchNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchNodeRequest.Unmarshal(m, b)
}
func (m *SearchNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchNodeRequest.Marshal(b, m, deterministic)
}
func (m *SearchNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchNodeRequest.Merge(m, src)
}
func (m *SearchNodeRequest) XXX_Size() int {
	return xxx_messageInfo_SearchNodeRequest.Size(m)
}
func (m *SearchNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchNodeRequest proto.InternalMessageInfo

func (m *SearchNodeRequest) GetJql() string {
	if m != nil {
		return m.Jql
	}
	return ""
}

type SearchNodeResponse struct {
	Code                 common.Retcode `protobuf:"varint,10,opt,name=code,proto3,enum=common.Retcode" json:"code,omitempty"`
	Msg                  string         `protobuf:"bytes,20,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 []*Node        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SearchNodeResponse) Reset()         { *m = SearchNodeResponse{} }
func (m *SearchNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SearchNodeResponse) ProtoMessage()    {}
func (*SearchNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1f4eaffd389ae, []int{2}
}

func (m *SearchNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchNodeResponse.Unmarshal(m, b)
}
func (m *SearchNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchNodeResponse.Marshal(b, m, deterministic)
}
func (m *SearchNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchNodeResponse.Merge(m, src)
}
func (m *SearchNodeResponse) XXX_Size() int {
	return xxx_messageInfo_SearchNodeResponse.Size(m)
}
func (m *SearchNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchNodeResponse proto.InternalMessageInfo

func (m *SearchNodeResponse) GetCode() common.Retcode {
	if m != nil {
		return m.Code
	}
	return common.Retcode_UNKNOWN_RETCODE
}

func (m *SearchNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SearchNodeResponse) GetData() []*Node {
	if m != nil {
		return m.Data
	}
	return nil
}

type SearchParam struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Properties           string   `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int32    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchParam) Reset()         { *m = SearchParam{} }
func (m *SearchParam) String() string { return proto.CompactTextString(m) }
func (*SearchParam) ProtoMessage()    {}
func (*SearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1f4eaffd389ae, []int{3}
}

func (m *SearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParam.Unmarshal(m, b)
}
func (m *SearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParam.Marshal(b, m, deterministic)
}
func (m *SearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParam.Merge(m, src)
}
func (m *SearchParam) XXX_Size() int {
	return xxx_messageInfo_SearchParam.Size(m)
}
func (m *SearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParam proto.InternalMessageInfo

func (m *SearchParam) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *SearchParam) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func (m *SearchParam) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchParam) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "cmdb.Node")
	proto.RegisterType((*SearchNodeRequest)(nil), "cmdb.SearchNodeRequest")
	proto.RegisterType((*SearchNodeResponse)(nil), "cmdb.SearchNodeResponse")
	proto.RegisterType((*SearchParam)(nil), "cmdb.SearchParam")
}

func init() {
	proto.RegisterFile("cmdb/cmdb.proto", fileDescriptor_02e1f4eaffd389ae)
}

var fileDescriptor_02e1f4eaffd389ae = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0x7d, 0x79, 0xc9, 0x8b, 0x78, 0x1f, 0xbc, 0x67, 0xaf, 0x85, 0x0e, 0x59, 0x94, 0x90, 0xa2,
	0x04, 0xa5, 0x09, 0xd6, 0xad, 0x2e, 0xb4, 0x82, 0x1b, 0x11, 0x49, 0x71, 0xe3, 0x6e, 0x92, 0x5c,
	0xd2, 0x98, 0x8f, 0x49, 0x33, 0x53, 0xa1, 0xfe, 0x08, 0x7f, 0xb3, 0xcc, 0x8c, 0x85, 0x68, 0xc5,
	0x85, 0x9b, 0xe4, 0xdc, 0x73, 0xcf, 0x9c, 0xfb, 0xc1, 0x85, 0xfb, 0xa2, 0x2b, 0xf3, 0x54, 0x7f,
	0x92, 0x61, 0x14, 0x4a, 0xa0, 0xa7, 0x71, 0xf0, 0xb8, 0x10, 0x5d, 0x27, 0xfa, 0xd4, 0xfe, 0x6c,
	0x2a, 0x7a, 0x05, 0xde, 0x47, 0x51, 0x12, 0xce, 0xe1, 0xa6, 0xe5, 0x39, 0xb5, 0xcc, 0x09, 0x9d,
	0xf8, 0x61, 0x66, 0x03, 0x5c, 0x02, 0x0c, 0xa3, 0x18, 0x68, 0x54, 0x35, 0x49, 0x76, 0x6d, 0x52,
	0x13, 0x26, 0x7a, 0x02, 0xb3, 0x1d, 0xf1, 0xb1, 0xd8, 0x6b, 0x8f, 0x8c, 0x0e, 0x47, 0x92, 0x0a,
	0x1f, 0x81, 0xfb, 0xf5, 0x70, 0x36, 0xd2, 0x30, 0x6a, 0x00, 0xa7, 0x32, 0x39, 0x88, 0x5e, 0x12,
	0xae, 0xc0, 0x2b, 0x44, 0x49, 0x0c, 0x42, 0x27, 0xbe, 0xdb, 0xdc, 0x27, 0xbf, 0xfa, 0xca, 0x48,
	0x69, 0x3a, 0x33, 0x49, 0x6d, 0xd6, 0xc9, 0x8a, 0xcd, 0xad, 0x59, 0x27, 0x2b, 0x5c, 0x82, 0x57,
	0x72, 0xc5, 0x99, 0x13, 0xba, 0xf1, 0xed, 0x06, 0x12, 0x33, 0xa7, 0x31, 0x36, 0x7c, 0xd4, 0xc0,
	0xad, 0x2d, 0xf6, 0x89, 0x8f, 0xbc, 0xfb, 0xbf, 0xc1, 0x10, 0xc1, 0x1b, 0x78, 0x45, 0xcc, 0x0d,
	0x9d, 0xf8, 0x26, 0x33, 0x58, 0x73, 0xb2, 0xfe, 0x4e, 0xcc, 0xb3, 0x9c, 0xc6, 0x9b, 0x1f, 0xd7,
	0xf0, 0x60, 0xd7, 0x9c, 0xb6, 0x5d, 0x99, 0xe3, 0x6b, 0xf0, 0x6d, 0x61, 0x5c, 0xd8, 0xa6, 0x2e,
	0x56, 0x13, 0xb0, 0xcb, 0x84, 0x5d, 0x46, 0x74, 0x85, 0x11, 0xf8, 0xdb, 0x91, 0xb8, 0x22, 0x9c,
	0xcc, 0x14, 0x4c, 0xb0, 0xd5, 0x7c, 0x1e, 0xca, 0x7f, 0x6b, 0x9e, 0x81, 0xff, 0x8e, 0x5a, 0x52,
	0x84, 0x77, 0xe7, 0x95, 0xee, 0xd4, 0x58, 0xf7, 0x55, 0xf0, 0x47, 0x1c, 0x5d, 0xe1, 0x73, 0xf0,
	0x3e, 0xd4, 0x52, 0xe1, 0x6c, 0xda, 0x97, 0xd9, 0xdb, 0x5f, 0xc4, 0x2b, 0x70, 0xdf, 0x93, 0xba,
	0x70, 0xfd, 0xad, 0xfa, 0xdb, 0x37, 0xb0, 0xe8, 0x49, 0x25, 0xb2, 0x39, 0x15, 0xad, 0x38, 0x96,
	0xf6, 0xca, 0x8c, 0xe2, 0xcb, 0xd3, 0xaa, 0x56, 0xfb, 0x63, 0xae, 0x9f, 0xa7, 0xb2, 0x39, 0xad,
	0x8d, 0x60, 0xad, 0xa8, 0x48, 0x8d, 0x28, 0xfd, 0xf6, 0xc2, 0xdc, 0x6c, 0xee, 0x9b, 0xf0, 0xe5,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x92, 0xd5, 0x14, 0xc7, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SkyCmdbClient is the client API for SkyCmdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkyCmdbClient interface {
	Search(ctx context.Context, in *SearchNodeRequest, opts ...grpc.CallOption) (*SearchNodeResponse, error)
	Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Delete(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*common.String, error)
	List(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*common.String, error)
	Get(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*Node, error)
}

type skyCmdbClient struct {
	cc grpc.ClientConnInterface
}

func NewSkyCmdbClient(cc grpc.ClientConnInterface) SkyCmdbClient {
	return &skyCmdbClient{cc}
}

func (c *skyCmdbClient) Search(ctx context.Context, in *SearchNodeRequest, opts ...grpc.CallOption) (*SearchNodeResponse, error) {
	out := new(SearchNodeResponse)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skyCmdbClient) Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skyCmdbClient) Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skyCmdbClient) Delete(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*common.String, error) {
	out := new(common.String)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skyCmdbClient) List(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*common.String, error) {
	out := new(common.String)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skyCmdbClient) Get(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/cmdb.SkyCmdb/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkyCmdbServer is the server API for SkyCmdb service.
type SkyCmdbServer interface {
	Search(context.Context, *SearchNodeRequest) (*SearchNodeResponse, error)
	Create(context.Context, *Node) (*Node, error)
	Update(context.Context, *Node) (*Node, error)
	Delete(context.Context, *common.String) (*common.String, error)
	List(context.Context, *SearchParam) (*common.String, error)
	Get(context.Context, *common.String) (*Node, error)
}

// UnimplementedSkyCmdbServer can be embedded to have forward compatible implementations.
type UnimplementedSkyCmdbServer struct {
}

func (*UnimplementedSkyCmdbServer) Search(ctx context.Context, req *SearchNodeRequest) (*SearchNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSkyCmdbServer) Create(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSkyCmdbServer) Update(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSkyCmdbServer) Delete(ctx context.Context, req *common.String) (*common.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSkyCmdbServer) List(ctx context.Context, req *SearchParam) (*common.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedSkyCmdbServer) Get(ctx context.Context, req *common.String) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterSkyCmdbServer(s *grpc.Server, srv SkyCmdbServer) {
	s.RegisterService(&_SkyCmdb_serviceDesc, srv)
}

func _SkyCmdb_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).Search(ctx, req.(*SearchNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkyCmdb_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).Create(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkyCmdb_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).Update(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkyCmdb_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).Delete(ctx, req.(*common.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkyCmdb_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).List(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkyCmdb_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyCmdbServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdb.SkyCmdb/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyCmdbServer).Get(ctx, req.(*common.String))
	}
	return interceptor(ctx, in, info, handler)
}

var _SkyCmdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmdb.SkyCmdb",
	HandlerType: (*SkyCmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SkyCmdb_Search_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SkyCmdb_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SkyCmdb_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SkyCmdb_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SkyCmdb_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SkyCmdb_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmdb/cmdb.proto",
}
